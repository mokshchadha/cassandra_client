// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for the Cassandra C/C++ library
class CassandraBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CassandraBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CassandraBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Creates a new execution profile.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @return Returns a execution profile that must be freed.
  ///
  /// @see cass_execution_profile_free()
  ffi.Pointer<CassExecProfile> camelCase() {
    return _camelCase();
  }

  late final _camelCasePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassExecProfile> Function()>>(
          'cass_execution_profile_new');
  late final _camelCase =
      _camelCasePtr.asFunction<ffi.Pointer<CassExecProfile> Function()>();

  /// Frees a execution profile instance.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  void camelCase$1(
    ffi.Pointer<CassExecProfile> profile,
  ) {
    return _camelCase$1(
      profile,
    );
  }

  late final _camelCase$1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassExecProfile>)>>(
      'cass_execution_profile_free');
  late final _camelCase$1 =
      _camelCase$1Ptr.asFunction<void Function(ffi.Pointer<CassExecProfile>)>();

  /// Sets the timeout waiting for a response from a node.
  ///
  /// <b>Default:</b> Disabled (uses the cluster request timeout)
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] timeout_ms Request timeout in milliseconds. Use 0 for no timeout
  /// or CASS_UINT64_MAX to disable.
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_statement_set_request_timeout()
  CassError_ camelCase$2(
    ffi.Pointer<CassExecProfile> profile,
    Dartcass_uint64_t timeout_ms,
  ) {
    return CassError_.fromValue(_camelCase$2(
      profile,
      timeout_ms,
    ));
  }

  late final _camelCase$2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>,
              cass_uint64_t)>>('cass_execution_profile_set_request_timeout');
  late final _camelCase$2 = _camelCase$2Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int)>();

  /// Sets the consistency level.
  ///
  /// <b>Default:</b> Disabled (uses the default consistency)
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_statement_set_consistency()
  CassError_ camelCase$3(
    ffi.Pointer<CassExecProfile> profile,
    CassConsistency_ consistency,
  ) {
    return CassError_.fromValue(_camelCase$3(
      profile,
      consistency.value,
    ));
  }

  late final _camelCase$3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>,
              ffi.UnsignedInt)>>('cass_execution_profile_set_consistency');
  late final _camelCase$3 = _camelCase$3Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int)>();

  /// Sets the serial consistency level.
  ///
  /// <b>Default:</b> Disabled (uses the default serial consistency)
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] serial_consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_statement_set_serial_consistency()
  CassError_ camelCase$4(
    ffi.Pointer<CassExecProfile> profile,
    CassConsistency_ serial_consistency,
  ) {
    return CassError_.fromValue(_camelCase$4(
      profile,
      serial_consistency.value,
    ));
  }

  late final _camelCase$4Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.UnsignedInt)>>(
      'cass_execution_profile_set_serial_consistency');
  late final _camelCase$4 = _camelCase$4Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int)>();

  /// Configures the execution profile to use round-robin load balancing.
  ///
  /// The driver discovers all nodes in a cluster and cycles through
  /// them per request. All are considered 'local'.
  ///
  /// <b>Note:</b> Profile-based load balancing policy is disabled by default;
  /// cluster load balancing policy is used when profile does not contain a policy.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_load_balance_round_robin()
  CassError_ camelCase$5(
    ffi.Pointer<CassExecProfile> profile,
  ) {
    return CassError_.fromValue(_camelCase$5(
      profile,
    ));
  }

  late final _camelCase$5Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>)>>(
      'cass_execution_profile_set_load_balance_round_robin');
  late final _camelCase$5 =
      _camelCase$5Ptr.asFunction<int Function(ffi.Pointer<CassExecProfile>)>();

  /// Configures the execution profile to use DC-aware load balancing.
  /// For each query, all live nodes in a primary 'local' DC are tried first,
  /// followed by any node from other DCs.
  ///
  /// <b>Note:</b> Profile-based load balancing policy is disabled by default;
  /// cluster load balancing policy is used when profile does not contain a policy.
  ///
  /// @deprecated The remote DC settings for DC-aware are not suitable for most
  /// scenarios that require DC failover. There is also unhandled gap between
  /// replication factor number of nodes failing and the full cluster failing. Only
  /// the remote DC settings are being deprecated.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] local_dc The primary data center to try first
  /// @param[in] used_hosts_per_remote_dc The number of hosts used in each remote
  /// DC if no hosts are available in the local dc (<b>deprecated</b>)
  /// @param[in] allow_remote_dcs_for_local_cl Allows remote hosts to be used if no
  /// local dc hosts are available and the consistency level is LOCAL_ONE or
  /// LOCAL_QUORUM (<b>deprecated</b>)
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_load_balance_dc_aware()
  CassError_ camelCase$6(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> local_dc,
    int used_hosts_per_remote_dc,
    cass_bool_t allow_remote_dcs_for_local_cl,
  ) {
    return CassError_.fromValue(_camelCase$6(
      profile,
      local_dc,
      used_hosts_per_remote_dc,
      allow_remote_dcs_for_local_cl.value,
    ));
  }

  late final _camelCase$6Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>,
                  ffi.Pointer<ffi.Char>, ffi.UnsignedInt, ffi.UnsignedInt)>>(
      'cass_execution_profile_set_load_balance_dc_aware');
  late final _camelCase$6 = _camelCase$6Ptr.asFunction<
      int Function(
          ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Same as cass_execution_profile_set_load_balance_dc_aware(), but with lengths
  /// for string parameters.
  ///
  /// @deprecated The remote DC settings for DC-aware are not suitable for most
  /// scenarios that require DC failover. There is also unhandled gap between
  /// replication factor number of nodes failing and the full cluster failing. Only
  /// the remote DC settings are being deprecated.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] local_dc
  /// @param[in] local_dc_length
  /// @param[in] used_hosts_per_remote_dc (<b>deprecated</b>)
  /// @param[in] allow_remote_dcs_for_local_cl (<b>deprecated</b>)
  /// @return same as cass_execution_profile_set_load_balance_dc_aware()
  ///
  /// @see cass_execution_profile_set_load_balance_dc_aware()
  /// @see cass_cluster_set_load_balance_dc_aware_n()
  CassError_ camelCase$7(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> local_dc,
    int local_dc_length,
    int used_hosts_per_remote_dc,
    cass_bool_t allow_remote_dcs_for_local_cl,
  ) {
    return CassError_.fromValue(_camelCase$7(
      profile,
      local_dc,
      local_dc_length,
      used_hosts_per_remote_dc,
      allow_remote_dcs_for_local_cl.value,
    ));
  }

  late final _camelCase$7Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.UnsignedInt,
                  ffi.UnsignedInt)>>(
      'cass_execution_profile_set_load_balance_dc_aware_n');
  late final _camelCase$7 = _camelCase$7Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>, int,
          int, int)>();

  /// Configures the execution profile to use token-aware request routing or not.
  ///
  /// <b>Important:</b> Token-aware routing depends on keyspace metadata.
  /// For this reason enabling token-aware routing will also enable retrieving
  /// and updating keyspace schema metadata.
  ///
  /// <b>Default:</b> cass_true (enabled).
  ///
  /// This routing policy composes the base routing policy, routing
  /// requests first to replicas on nodes considered 'local' by
  /// the base load balancing policy.
  ///
  /// <b>Note:</b> Execution profiles use the cluster-level load balancing policy
  /// unless enabled. This setting is not applicable unless a load balancing policy
  /// is enabled on the execution profile.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_token_aware_routing()
  CassError_ camelCase$8(
    ffi.Pointer<CassExecProfile> profile,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$8(
      profile,
      enabled.value,
    ));
  }

  late final _camelCase$8Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.UnsignedInt)>>(
      'cass_execution_profile_set_token_aware_routing');
  late final _camelCase$8 = _camelCase$8Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int)>();

  /// Configures the execution profile's token-aware routing to randomly shuffle
  /// replicas. This can reduce the effectiveness of server-side caching, but it
  /// can better distribute load over replicas for a given partition key.
  ///
  /// <b>Note:</b> Token-aware routing must be enabled and a load balancing policy
  /// must be enabled on the execution profile for the setting to be applicable.
  ///
  /// <b>Default:</b> cass_true (enabled).
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_token_aware_routing_shuffle_replicas()
  CassError_ camelCase$9(
    ffi.Pointer<CassExecProfile> profile,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$9(
      profile,
      enabled.value,
    ));
  }

  late final _camelCase$9Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.UnsignedInt)>>(
      'cass_execution_profile_set_token_aware_routing_shuffle_replicas');
  late final _camelCase$9 = _camelCase$9Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int)>();

  /// Configures the execution profile to use latency-aware request routing or not.
  ///
  /// <b>Note:</b> Execution profiles use the cluster-level load balancing policy
  /// unless enabled. This setting is not applicable unless a load balancing policy
  /// is enabled on the execution profile.
  ///
  /// <b>Default:</b> cass_false (disabled).
  ///
  /// This routing policy is a top-level routing policy. It uses the
  /// base routing policy to determine locality (dc-aware) and/or
  /// placement (token-aware) before considering the latency.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_latency_aware_routing()
  CassError_ camelCase$10(
    ffi.Pointer<CassExecProfile> profile,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$10(
      profile,
      enabled.value,
    ));
  }

  late final _camelCase$10Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.UnsignedInt)>>(
      'cass_execution_profile_set_latency_aware_routing');
  late final _camelCase$10 = _camelCase$10Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int)>();

  /// Configures the execution profile's settings for latency-aware request
  /// routing.
  ///
  /// <b>Note:</b> Execution profiles use the cluster-level load balancing policy
  /// unless enabled. This setting is not applicable unless a load balancing policy
  /// is enabled on the execution profile.
  ///
  /// <b>Defaults:</b>
  ///
  /// <ul>
  /// <li>exclusion_threshold: 2.0</li>
  /// <li>scale_ms: 100 milliseconds</li>
  /// <li>retry_period_ms: 10,000 milliseconds (10 seconds)</li>
  /// <li>update_rate_ms: 100 milliseconds</li>
  /// <li>min_measured: 50</li>
  /// </ul>
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] exclusion_threshold Controls how much worse the latency must be
  /// compared to the average latency of the best performing node before it
  /// penalized.
  /// @param[in] scale_ms Controls the weight given to older latencies when
  /// calculating the average latency of a node. A bigger scale will give more
  /// weight to older latency measurements.
  /// @param[in] retry_period_ms The amount of time a node is penalized by the
  /// policy before being given a second chance when the current average latency
  /// exceeds the calculated threshold
  /// (exclusion_threshold * best_average_latency).
  /// @param[in] update_rate_ms The rate at  which the best average latency is
  /// recomputed.
  /// @param[in] min_measured The minimum number of measurements per-host required
  /// to be considered by the policy.
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_latency_aware_routing_settings()
  CassError_ camelCase$11(
    ffi.Pointer<CassExecProfile> profile,
    Dartcass_double_t exclusion_threshold,
    Dartcass_uint64_t scale_ms,
    Dartcass_uint64_t retry_period_ms,
    Dartcass_uint64_t update_rate_ms,
    Dartcass_uint64_t min_measured,
  ) {
    return CassError_.fromValue(_camelCase$11(
      profile,
      exclusion_threshold,
      scale_ms,
      retry_period_ms,
      update_rate_ms,
      min_measured,
    ));
  }

  late final _camelCase$11Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>,
                  cass_double_t,
                  cass_uint64_t,
                  cass_uint64_t,
                  cass_uint64_t,
                  cass_uint64_t)>>(
      'cass_execution_profile_set_latency_aware_routing_settings');
  late final _camelCase$11 = _camelCase$11Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, double, int, int, int, int)>();

  /// Sets/Appends whitelist hosts for the execution profile. The first call sets
  /// the whitelist hosts and any subsequent calls appends additional hosts.
  /// Passing an empty string will clear and disable the whitelist. White space is
  /// striped from the hosts.
  ///
  /// This policy filters requests to all other policies, only allowing requests
  /// to the hosts contained in the whitelist. Any host not in the whitelist will
  /// be ignored and a connection will not be established. This policy is useful
  /// for ensuring that the driver will only connect to a predefined set of hosts.
  ///
  /// Examples: "127.0.0.1" "127.0.0.1,127.0.0.2"
  ///
  /// <b>Note:</b> Execution profiles use the cluster-level load balancing policy
  /// unless enabled. This setting is not applicable unless a load balancing policy
  /// is enabled on the execution profile.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] hosts A comma delimited list of addresses. An empty string will
  /// clear the whitelist hosts. The string is copied into the cluster
  /// configuration; the memory pointed to by this parameter can be freed after
  /// this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_whitelist_filtering()
  CassError_ camelCase$12(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> hosts,
  ) {
    return CassError_.fromValue(_camelCase$12(
      profile,
      hosts,
    ));
  }

  late final _camelCase$12Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>>(
      'cass_execution_profile_set_whitelist_filtering');
  late final _camelCase$12 = _camelCase$12Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_execution_profile_set_whitelist_filtering(), but with lengths
  /// for string parameters.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] hosts
  /// @param[in] hosts_length
  /// @return same as cass_execution_profile_set_whitelist_filtering()
  ///
  /// @see cass_execution_profile_set_whitelist_filtering()
  /// @see cass_cluster_set_whitelist_filtering()
  CassError_ camelCase$13(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> hosts,
    int hosts_length,
  ) {
    return CassError_.fromValue(_camelCase$13(
      profile,
      hosts,
      hosts_length,
    ));
  }

  late final _camelCase$13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassExecProfile>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_execution_profile_set_whitelist_filtering_n');
  late final _camelCase$13 = _camelCase$13Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets/Appends blacklist hosts for the execution profile. The first call sets
  /// the blacklist hosts and any subsequent calls appends additional hosts.
  /// Passing an empty string will clear and disable the blacklist. White space is
  /// striped from the hosts.
  ///
  /// This policy filters requests to all other policies, only allowing requests
  /// to the hosts not contained in the blacklist. Any host in the blacklist will
  /// be ignored and a connection will not be established. This policy is useful
  /// for ensuring that the driver will not connect to a predefined set of hosts.
  ///
  /// Examples: "127.0.0.1" "127.0.0.1,127.0.0.2"
  ///
  /// <b>Note:</b> Execution profiles use the cluster-level load balancing policy
  /// unless enabled. This setting is not applicable unless a load balancing policy
  /// is enabled on the execution profile.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] hosts A comma delimited list of addresses. An empty string will
  /// clear the blacklist hosts. The string is copied into the cluster
  /// configuration; the memory pointed to by this parameter can be freed after
  /// this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_blacklist_filtering()
  CassError_ camelCase$14(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> hosts,
  ) {
    return CassError_.fromValue(_camelCase$14(
      profile,
      hosts,
    ));
  }

  late final _camelCase$14Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>>(
      'cass_execution_profile_set_blacklist_filtering');
  late final _camelCase$14 = _camelCase$14Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_execution_profile_set_blacklist_filtering(), but with lengths
  /// for string parameters.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] hosts
  /// @param[in] hosts_length
  /// @return same as cass_execution_profile_set_blacklist_filtering_hosts()
  ///
  /// @see cass_execution_profile_set_blacklist_filtering()
  /// @see cass_cluster_set_blacklist_filtering()
  CassError_ camelCase$15(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> hosts,
    int hosts_length,
  ) {
    return CassError_.fromValue(_camelCase$15(
      profile,
      hosts,
      hosts_length,
    ));
  }

  late final _camelCase$15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassExecProfile>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_execution_profile_set_blacklist_filtering_n');
  late final _camelCase$15 = _camelCase$15Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_execution_profile_set_whitelist_filtering(), but whitelist all
  /// hosts of a dc.
  ///
  /// Examples: "dc1", "dc1,dc2"
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] dcs A comma delimited list of dcs. An empty string will clear the
  /// whitelist dcs. The string is copied into the cluster configuration; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_whitelist_dc_filtering()
  CassError_ camelCase$16(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> dcs,
  ) {
    return CassError_.fromValue(_camelCase$16(
      profile,
      dcs,
    ));
  }

  late final _camelCase$16Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>>(
      'cass_execution_profile_set_whitelist_dc_filtering');
  late final _camelCase$16 = _camelCase$16Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_execution_profile_set_whitelist_dc_filtering(), but with lengths
  /// for string parameters.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] dcs
  /// @param[in] dcs_length
  /// @return same as cass_execution_profile_set_whitelist_dc_filtering()
  ///
  /// @see cass_execution_profile_set_whitelist_dc_filtering()
  /// @see cass_cluster_set_whitelist_dc_filtering()
  CassError_ camelCase$17(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> dcs,
    int dcs_length,
  ) {
    return CassError_.fromValue(_camelCase$17(
      profile,
      dcs,
      dcs_length,
    ));
  }

  late final _camelCase$17Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>,
                  ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'cass_execution_profile_set_whitelist_dc_filtering_n');
  late final _camelCase$17 = _camelCase$17Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_execution_profile_set_blacklist_filtering(), but blacklist all
  /// hosts of a dc.
  ///
  /// Examples: "dc1", "dc1,dc2"
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] dcs A comma delimited list of dcs. An empty string will clear the
  /// blacklist dcs. The string is copied into the cluster configuration; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_execution_profile_set_blacklist_filtering()
  /// @see cass_cluster_set_blacklist_dc_filtering()
  CassError_ camelCase$18(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> dcs,
  ) {
    return CassError_.fromValue(_camelCase$18(
      profile,
      dcs,
    ));
  }

  late final _camelCase$18Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>>(
      'cass_execution_profile_set_blacklist_dc_filtering');
  late final _camelCase$18 = _camelCase$18Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_execution_profile_set_blacklist_dc_filtering(), but with lengths
  /// for string parameters.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] dcs
  /// @param[in] dcs_length
  /// @return same as cass_execution_profile_set_blacklist_dc_filtering()
  ///
  /// @see cass_execution_profile_set_blacklist_dc_filtering()
  /// @see cass_cluster_set_blacklist_dc_filtering()
  CassError_ camelCase$19(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<ffi.Char> dcs,
    int dcs_length,
  ) {
    return CassError_.fromValue(_camelCase$19(
      profile,
      dcs,
      dcs_length,
    ));
  }

  late final _camelCase$19Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>,
                  ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'cass_execution_profile_set_blacklist_dc_filtering_n');
  late final _camelCase$19 = _camelCase$19Ptr.asFunction<
      int Function(ffi.Pointer<CassExecProfile>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets the execution profile's retry policy.
  ///
  /// <b>Note:</b> Profile-based retry policy is disabled by default; cluster retry
  /// policy is used when profile does not contain a policy unless the retry policy
  /// was explicitly set on the batch/statement request.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] retry_policy NULL will clear retry policy from execution profile
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_retry_policy()
  CassError_ camelCase$20(
    ffi.Pointer<CassExecProfile> profile,
    ffi.Pointer<CassRetryPolicy> retry_policy,
  ) {
    return CassError_.fromValue(_camelCase$20(
      profile,
      retry_policy,
    ));
  }

  late final _camelCase$20Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, ffi.Pointer<CassRetryPolicy>)>>(
      'cass_execution_profile_set_retry_policy');
  late final _camelCase$20 = _camelCase$20Ptr.asFunction<
      int Function(
          ffi.Pointer<CassExecProfile>, ffi.Pointer<CassRetryPolicy>)>();

  /// Enable constant speculative executions with the supplied settings for the
  /// execution profile.
  ///
  /// <b>Note:</b> Profile-based speculative execution policy is disabled by
  /// default; cluster speculative execution policy is used when profile does not
  /// contain a policy.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @param[in] constant_delay_ms
  /// @param[in] max_speculative_executions
  /// @return CASS_OK if successful, otherwise an error occurred
  ///
  /// @see cass_cluster_set_constant_speculative_execution_policy()
  CassError_ camelCase$21(
    ffi.Pointer<CassExecProfile> profile,
    Dartcass_int64_t constant_delay_ms,
    int max_speculative_executions,
  ) {
    return CassError_.fromValue(_camelCase$21(
      profile,
      constant_delay_ms,
      max_speculative_executions,
    ));
  }

  late final _camelCase$21Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassExecProfile>, cass_int64_t, ffi.Int)>>(
      'cass_execution_profile_set_constant_speculative_execution_policy');
  late final _camelCase$21 = _camelCase$21Ptr
      .asFunction<int Function(ffi.Pointer<CassExecProfile>, int, int)>();

  /// Disable speculative executions for the execution profile.
  ///
  /// <b>Note:</b> Profile-based speculative execution policy is disabled by
  /// default; cluster speculative execution policy is used when profile does not
  /// contain a policy.
  ///
  /// @public @memberof CassExecProfile
  ///
  /// @param[in] profile
  /// @return CASS_OK if successful, otherwise an error occurred
  ///
  /// @see cass_cluster_set_no_speculative_execution_policy()
  CassError_ camelCase$22(
    ffi.Pointer<CassExecProfile> profile,
  ) {
    return CassError_.fromValue(_camelCase$22(
      profile,
    ));
  }

  late final _camelCase$22Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassExecProfile>)>>(
      'cass_execution_profile_set_no_speculative_execution_policy');
  late final _camelCase$22 =
      _camelCase$22Ptr.asFunction<int Function(ffi.Pointer<CassExecProfile>)>();

  /// Creates a new cluster.
  ///
  /// @public @memberof CassCluster
  ///
  /// @return Returns a cluster that must be freed.
  ///
  /// @see cass_cluster_free()
  ffi.Pointer<CassCluster> camelCase$23() {
    return _camelCase$23();
  }

  late final _camelCase$23Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassCluster> Function()>>(
          'cass_cluster_new');
  late final _camelCase$23 =
      _camelCase$23Ptr.asFunction<ffi.Pointer<CassCluster> Function()>();

  /// Frees a cluster instance.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  void camelCase$24(
    ffi.Pointer<CassCluster> cluster,
  ) {
    return _camelCase$24(
      cluster,
    );
  }

  late final _camelCase$24Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassCluster>)>>(
          'cass_cluster_free');
  late final _camelCase$24 =
      _camelCase$24Ptr.asFunction<void Function(ffi.Pointer<CassCluster>)>();

  /// Sets/Appends contact points. This *MUST* be set. The first call sets
  /// the contact points and any subsequent calls appends additional contact
  /// points. Passing an empty string will clear the contact points. White space
  /// is striped from the contact points.
  ///
  /// Examples: "127.0.0.1" "127.0.0.1,127.0.0.2", "server1.domain.com"
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] contact_points A comma delimited list of addresses or
  /// names. An empty string will clear the contact points.
  /// The string is copied into the cluster configuration; the memory pointed
  /// to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$25(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> contact_points,
  ) {
    return CassError_.fromValue(_camelCase$25(
      cluster,
      contact_points,
    ));
  }

  late final _camelCase$25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_contact_points');
  late final _camelCase$25 = _camelCase$25Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_contact_points(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] contact_points
  /// @param[in] contact_points_length
  /// @return same as cass_cluster_set_contact_points()
  ///
  /// @see cass_cluster_set_contact_points()
  CassError_ camelCase$26(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> contact_points,
    int contact_points_length,
  ) {
    return CassError_.fromValue(_camelCase$26(
      cluster,
      contact_points,
      contact_points_length,
    ));
  }

  late final _camelCase$26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_contact_points_n');
  late final _camelCase$26 = _camelCase$26Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets the port.
  ///
  /// <b>Default:</b> 9042
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] port
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$27(
    ffi.Pointer<CassCluster> cluster,
    int port,
  ) {
    return CassError_.fromValue(_camelCase$27(
      cluster,
      port,
    ));
  }

  late final _camelCase$27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCluster>, ffi.Int)>>('cass_cluster_set_port');
  late final _camelCase$27 = _camelCase$27Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the local address to bind when connecting to the cluster,
  /// if desired.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] name IP address to bind, or empty string for no binding.
  /// Only numeric addresses are supported; no resolution is done.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$28(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> name,
  ) {
    return CassError_.fromValue(_camelCase$28(
      cluster,
      name,
    ));
  }

  late final _camelCase$28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_local_address');
  late final _camelCase$28 = _camelCase$28Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_local_address(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_cluster_set_local_address()
  ///
  /// @see cass_cluster_set_local_address()
  CassError_ camelCase$29(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return CassError_.fromValue(_camelCase$29(
      cluster,
      name,
      name_length,
    ));
  }

  late final _camelCase$29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_local_address_n');
  late final _camelCase$29 = _camelCase$29Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets the SSL context and enables SSL.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] ssl
  ///
  /// @see cass_ssl_new()
  void camelCase$30(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<CassSsl> ssl,
  ) {
    return _camelCase$30(
      cluster,
      ssl,
    );
  }

  late final _camelCase$30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<CassSsl>)>>('cass_cluster_set_ssl');
  late final _camelCase$30 = _camelCase$30Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<CassSsl>)>();

  /// Sets custom authenticator
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] exchange_callbacks
  /// @param[in] cleanup_callback
  /// @param[in] data
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$31(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<CassAuthenticatorCallbacks> exchange_callbacks,
    CassAuthenticatorDataCleanupCallback cleanup_callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return CassError_.fromValue(_camelCase$31(
      cluster,
      exchange_callbacks,
      cleanup_callback,
      data,
    ));
  }

  late final _camelCase$31Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>,
                  ffi.Pointer<CassAuthenticatorCallbacks>,
                  CassAuthenticatorDataCleanupCallback,
                  ffi.Pointer<ffi.Void>)>>(
      'cass_cluster_set_authenticator_callbacks');
  late final _camelCase$31 = _camelCase$31Ptr.asFunction<
      int Function(
          ffi.Pointer<CassCluster>,
          ffi.Pointer<CassAuthenticatorCallbacks>,
          CassAuthenticatorDataCleanupCallback,
          ffi.Pointer<ffi.Void>)>();

  /// Sets the protocol version. The driver will automatically downgrade to the lowest
  /// supported protocol version.
  ///
  /// <b>Default:</b> CASS_PROTOCOL_VERSION_V4 or CASS_PROTOCOL_VERSION_DSEV1 when
  /// using the DSE driver with DataStax Enterprise.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] protocol_version
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_use_beta_protocol_version()
  CassError_ camelCase$32(
    ffi.Pointer<CassCluster> cluster,
    int protocol_version,
  ) {
    return CassError_.fromValue(_camelCase$32(
      cluster,
      protocol_version,
    ));
  }

  late final _camelCase$32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.Int)>>('cass_cluster_set_protocol_version');
  late final _camelCase$32 = _camelCase$32Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Use the newest beta protocol version. This currently enables the use of
  /// protocol version v5 (CASS_PROTOCOL_VERSION_V5) or DSEv2 (CASS_PROTOCOL_VERSION_DSEV2)
  /// when using the DSE driver with DataStax Enterprise.
  ///
  /// <b>Default:</b> cass_false
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enable if false the highest non-beta protocol version will be used
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$33(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enable,
  ) {
    return CassError_.fromValue(_camelCase$33(
      cluster,
      enable.value,
    ));
  }

  late final _camelCase$33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_use_beta_protocol_version');
  late final _camelCase$33 = _camelCase$33Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets default consistency level of statement.
  ///
  /// <b>Default:</b> CASS_CONSISTENCY_LOCAL_ONE
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$34(
    ffi.Pointer<CassCluster> cluster,
    CassConsistency_ consistency,
  ) {
    return CassError_.fromValue(_camelCase$34(
      cluster,
      consistency.value,
    ));
  }

  late final _camelCase$34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_consistency');
  late final _camelCase$34 = _camelCase$34Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets default serial consistency level of statement.
  ///
  /// <b>Default:</b> CASS_CONSISTENCY_ANY
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$35(
    ffi.Pointer<CassCluster> cluster,
    CassConsistency_ consistency,
  ) {
    return CassError_.fromValue(_camelCase$35(
      cluster,
      consistency.value,
    ));
  }

  late final _camelCase$35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_serial_consistency');
  late final _camelCase$35 = _camelCase$35Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the number of IO threads. This is the number of threads
  /// that will handle query requests.
  ///
  /// <b>Default:</b> 1
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] num_threads
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$36(
    ffi.Pointer<CassCluster> cluster,
    int num_threads,
  ) {
    return CassError_.fromValue(_camelCase$36(
      cluster,
      num_threads,
    ));
  }

  late final _camelCase$36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_num_threads_io');
  late final _camelCase$36 = _camelCase$36Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the size of the fixed size queue that stores
  /// pending requests.
  ///
  /// <b>Default:</b> 8192
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] queue_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$37(
    ffi.Pointer<CassCluster> cluster,
    int queue_size,
  ) {
    return CassError_.fromValue(_camelCase$37(
      cluster,
      queue_size,
    ));
  }

  late final _camelCase$37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_queue_size_io');
  late final _camelCase$37 = _camelCase$37Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the size of the fixed size queue that stores
  /// events.
  ///
  /// <b>Default:</b> 8192
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] queue_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$38(
    ffi.Pointer<CassCluster> cluster,
    int queue_size,
  ) {
    return CassError_.fromValue(_camelCase$38(
      cluster,
      queue_size,
    ));
  }

  late final _camelCase$38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_queue_size_event');
  late final _camelCase$38 = _camelCase$38Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the number of connections made to each server in each
  /// IO thread.
  ///
  /// <b>Default:</b> 1
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] num_connections
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$39(
    ffi.Pointer<CassCluster> cluster,
    int num_connections,
  ) {
    return CassError_.fromValue(_camelCase$39(
      cluster,
      num_connections,
    ));
  }

  late final _camelCase$39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_core_connections_per_host');
  late final _camelCase$39 = _camelCase$39Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the maximum number of connections made to each server in each
  /// IO thread.
  ///
  /// <b>Default:</b> 2
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_connections
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$40(
    ffi.Pointer<CassCluster> cluster,
    int num_connections,
  ) {
    return CassError_.fromValue(_camelCase$40(
      cluster,
      num_connections,
    ));
  }

  late final _camelCase$40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_max_connections_per_host');
  late final _camelCase$40 = _camelCase$40Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the amount of time to wait before attempting to reconnect.
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is being replaced with cass_cluster_set_constant_reconnect().
  /// Expect this to be removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] wait_time
  void camelCase$41(
    ffi.Pointer<CassCluster> cluster,
    int wait_time,
  ) {
    return _camelCase$41(
      cluster,
      wait_time,
    );
  }

  late final _camelCase$41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_reconnect_wait_time');
  late final _camelCase$41 = _camelCase$41Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Configures the cluster to use a reconnection policy that waits a constant
  /// time between each reconnection attempt.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] delay_ms Time in milliseconds to delay attempting a reconnection;
  /// 0 to perform a reconnection immediately.
  void camelCase$42(
    ffi.Pointer<CassCluster> cluster,
    int delay_ms,
  ) {
    return _camelCase$42(
      cluster,
      delay_ms,
    );
  }

  late final _camelCase$42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              cass_uint64_t)>>('cass_cluster_set_constant_reconnect');
  late final _camelCase$42 = _camelCase$42Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Configures the cluster to use a reconnection policy that waits exponentially
  /// longer between each reconnection attempt; however will maintain a constant
  /// delay once the maximum delay is reached.
  ///
  /// <b>Default:</b>
  /// <ul>
  /// <li>2000 milliseconds base delay</li>
  /// <li>60000 milliseconds max delay</li>
  /// </ul>
  ///
  /// <p>
  /// <b>Note:</b> A random amount of jitter (+/- 15%) will be added to the pure
  /// exponential delay value. This helps to prevent situations where multiple
  /// connections are in the reconnection process at exactly the same time. The
  /// jitter will never cause the delay to be less than the base delay, or more
  /// than the max delay.
  /// </p>
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] base_delay_ms The base delay (in milliseconds) to use for
  /// scheduling reconnection attempts.
  /// @param[in] max_delay_ms The maximum delay to wait between two reconnection
  /// attempts.
  /// @return CASS_OK if successful, otherwise error occurred.
  CassError_ camelCase$43(
    ffi.Pointer<CassCluster> cluster,
    Dartcass_uint64_t base_delay_ms,
    Dartcass_uint64_t max_delay_ms,
  ) {
    return CassError_.fromValue(_camelCase$43(
      cluster,
      base_delay_ms,
      max_delay_ms,
    ));
  }

  late final _camelCase$43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>, cass_uint64_t,
              cass_uint64_t)>>('cass_cluster_set_exponential_reconnect');
  late final _camelCase$43 = _camelCase$43Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int, int)>();

  /// Sets the amount of time, in microseconds, to wait for new requests to
  /// coalesce into a single system call. This should be set to a value around
  /// the latency SLA of your application's requests while also considering the
  /// request's roundtrip time. Larger values should be used for throughput
  /// bound workloads and lower values should be used for latency bound
  /// workloads.
  ///
  /// <b>Default:</b> 200 us
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] delay_us
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$44(
    ffi.Pointer<CassCluster> cluster,
    Dartcass_int64_t delay_us,
  ) {
    return CassError_.fromValue(_camelCase$44(
      cluster,
      delay_us,
    ));
  }

  late final _camelCase$44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              cass_int64_t)>>('cass_cluster_set_coalesce_delay');
  late final _camelCase$44 = _camelCase$44Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the ratio of time spent processing new requests versus handling the I/O
  /// and processing of outstanding requests. The range of this setting is 1 to 100,
  /// where larger values allocate more time to processing new requests and smaller
  /// values allocate more time to processing outstanding requests.
  ///
  /// <b>Default:</b> 50
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] ratio
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$45(
    ffi.Pointer<CassCluster> cluster,
    Dartcass_int32_t ratio,
  ) {
    return CassError_.fromValue(_camelCase$45(
      cluster,
      ratio,
    ));
  }

  late final _camelCase$45Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              cass_int32_t)>>('cass_cluster_set_new_request_ratio');
  late final _camelCase$45 = _camelCase$45Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the maximum number of connections that will be created concurrently.
  /// Connections are created when the current connections are unable to keep up with
  /// request throughput.
  ///
  /// <b>Default:</b> 1
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_connections
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$46(
    ffi.Pointer<CassCluster> cluster,
    int num_connections,
  ) {
    return CassError_.fromValue(_camelCase$46(
      cluster,
      num_connections,
    ));
  }

  late final _camelCase$46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_max_concurrent_creation');
  late final _camelCase$46 = _camelCase$46Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the threshold for the maximum number of concurrent requests in-flight
  /// on a connection before creating a new connection. The number of new connections
  /// created will not exceed max_connections_per_host.
  ///
  /// <b>Default:</b> 100
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_requests
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$47(
    ffi.Pointer<CassCluster> cluster,
    int num_requests,
  ) {
    return CassError_.fromValue(_camelCase$47(
      cluster,
      num_requests,
    ));
  }

  late final _camelCase$47Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_max_concurrent_requests_threshold');
  late final _camelCase$47 = _camelCase$47Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the maximum number of requests processed by an IO worker
  /// per flush.
  ///
  /// <b>Default:</b> 128
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_requests
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$48(
    ffi.Pointer<CassCluster> cluster,
    int num_requests,
  ) {
    return CassError_.fromValue(_camelCase$48(
      cluster,
      num_requests,
    ));
  }

  late final _camelCase$48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_max_requests_per_flush');
  late final _camelCase$48 = _camelCase$48Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the high water mark for the number of bytes outstanding
  /// on a connection. Disables writes to a connection if the number
  /// of bytes queued exceed this value.
  ///
  /// <b>Default:</b> 64 KB
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_bytes
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$49(
    ffi.Pointer<CassCluster> cluster,
    int num_bytes,
  ) {
    return CassError_.fromValue(_camelCase$49(
      cluster,
      num_bytes,
    ));
  }

  late final _camelCase$49Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_write_bytes_high_water_mark');
  late final _camelCase$49 = _camelCase$49Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the low water mark for number of bytes outstanding on a
  /// connection. After exceeding high water mark bytes, writes will
  /// only resume once the number of bytes fall below this value.
  ///
  /// <b>Default:</b> 32 KB
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_bytes
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$50(
    ffi.Pointer<CassCluster> cluster,
    int num_bytes,
  ) {
    return CassError_.fromValue(_camelCase$50(
      cluster,
      num_bytes,
    ));
  }

  late final _camelCase$50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_write_bytes_low_water_mark');
  late final _camelCase$50 = _camelCase$50Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the high water mark for the number of requests queued waiting
  /// for a connection in a connection pool. Disables writes to a
  /// host on an IO worker if the number of requests queued exceed this
  /// value.
  ///
  /// <b>Default:</b> 256
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_requests
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$51(
    ffi.Pointer<CassCluster> cluster,
    int num_requests,
  ) {
    return CassError_.fromValue(_camelCase$51(
      cluster,
      num_requests,
    ));
  }

  late final _camelCase$51Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_pending_requests_high_water_mark');
  late final _camelCase$51 = _camelCase$51Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the low water mark for the number of requests queued waiting
  /// for a connection in a connection pool. After exceeding high water mark
  /// requests, writes to a host will only resume once the number of requests
  /// fall below this value.
  ///
  /// <b>Default:</b> 128
  ///
  /// @public @memberof CassCluster
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] cluster
  /// @param[in] num_requests
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$52(
    ffi.Pointer<CassCluster> cluster,
    int num_requests,
  ) {
    return CassError_.fromValue(_camelCase$52(
      cluster,
      num_requests,
    ));
  }

  late final _camelCase$52Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_pending_requests_low_water_mark');
  late final _camelCase$52 = _camelCase$52Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the timeout for connecting to a node.
  ///
  /// <b>Default:</b> 5000 milliseconds
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] timeout_ms Connect timeout in milliseconds
  void camelCase$53(
    ffi.Pointer<CassCluster> cluster,
    int timeout_ms,
  ) {
    return _camelCase$53(
      cluster,
      timeout_ms,
    );
  }

  late final _camelCase$53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_connect_timeout');
  late final _camelCase$53 = _camelCase$53Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the timeout for waiting for a response from a node.
  ///
  /// <b>Default:</b> 12000 milliseconds
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] timeout_ms Request timeout in milliseconds. Use 0 for no timeout.
  void camelCase$54(
    ffi.Pointer<CassCluster> cluster,
    int timeout_ms,
  ) {
    return _camelCase$54(
      cluster,
      timeout_ms,
    );
  }

  late final _camelCase$54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_request_timeout');
  late final _camelCase$54 = _camelCase$54Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the timeout for waiting for DNS name resolution.
  ///
  /// <b>Default:</b> 2000 milliseconds
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] timeout_ms Request timeout in milliseconds
  void camelCase$55(
    ffi.Pointer<CassCluster> cluster,
    int timeout_ms,
  ) {
    return _camelCase$55(
      cluster,
      timeout_ms,
    );
  }

  late final _camelCase$55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_resolve_timeout');
  late final _camelCase$55 = _camelCase$55Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the maximum time to wait for schema agreement after a schema change
  /// is made (e.g. creating, altering, dropping a table/keyspace/view/index etc).
  ///
  /// <b>Default:</b> 10000 milliseconds
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] wait_time_ms Wait time in milliseconds
  void camelCase$56(
    ffi.Pointer<CassCluster> cluster,
    int wait_time_ms,
  ) {
    return _camelCase$56(
      cluster,
      wait_time_ms,
    );
  }

  late final _camelCase$56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_max_schema_wait_time');
  late final _camelCase$56 = _camelCase$56Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the maximum time to wait for tracing data to become available.
  ///
  /// <b>Default:</b> 15 milliseconds
  ///
  /// @param[in] cluster
  /// @param[in] max_wait_time_ms
  void camelCase$57(
    ffi.Pointer<CassCluster> cluster,
    int max_wait_time_ms,
  ) {
    return _camelCase$57(
      cluster,
      max_wait_time_ms,
    );
  }

  late final _camelCase$57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_tracing_max_wait_time');
  late final _camelCase$57 = _camelCase$57Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the amount of time to wait between attempts to check to see if tracing is
  /// available.
  ///
  /// <b>Default:</b> 3 milliseconds
  ///
  /// @param[in] cluster
  /// @param[in] retry_wait_time_ms
  void camelCase$58(
    ffi.Pointer<CassCluster> cluster,
    int retry_wait_time_ms,
  ) {
    return _camelCase$58(
      cluster,
      retry_wait_time_ms,
    );
  }

  late final _camelCase$58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_tracing_retry_wait_time');
  late final _camelCase$58 = _camelCase$58Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the consistency level to use for checking to see if tracing data is
  /// available.
  ///
  /// <b>Default:</b> CASS_CONSISTENCY_ONE
  ///
  /// @param[in] cluster
  /// @param[in] consistency
  void camelCase$59(
    ffi.Pointer<CassCluster> cluster,
    CassConsistency_ consistency,
  ) {
    return _camelCase$59(
      cluster,
      consistency.value,
    );
  }

  late final _camelCase$59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_tracing_consistency');
  late final _camelCase$59 = _camelCase$59Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets credentials for plain text authentication.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] username
  /// @param[in] password
  void camelCase$60(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _camelCase$60(
      cluster,
      username,
      password,
    );
  }

  late final _camelCase$60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_credentials');
  late final _camelCase$60 = _camelCase$60Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_credentials(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] username
  /// @param[in] username_length
  /// @param[in] password
  /// @param[in] password_length
  /// @return same as cass_cluster_set_credentials()
  ///
  /// @see cass_cluster_set_credentials();
  void camelCase$61(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> username,
    int username_length,
    ffi.Pointer<ffi.Char> password,
    int password_length,
  ) {
    return _camelCase$61(
      cluster,
      username,
      username_length,
      password,
      password_length,
    );
  }

  late final _camelCase$61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_credentials_n');
  late final _camelCase$61 = _camelCase$61Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  /// Configures the cluster to use round-robin load balancing.
  ///
  /// The driver discovers all nodes in a cluster and cycles through
  /// them per request. All are considered 'local'.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  void camelCase$62(
    ffi.Pointer<CassCluster> cluster,
  ) {
    return _camelCase$62(
      cluster,
    );
  }

  late final _camelCase$62Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassCluster>)>>(
          'cass_cluster_set_load_balance_round_robin');
  late final _camelCase$62 =
      _camelCase$62Ptr.asFunction<void Function(ffi.Pointer<CassCluster>)>();

  /// Configures the cluster to use DC-aware load balancing.
  /// For each query, all live nodes in a primary 'local' DC are tried first,
  /// followed by any node from other DCs.
  ///
  /// <b>Note:</b> This is the default, and does not need to be called unless
  /// switching an existing from another policy or changing settings.
  /// Without further configuration, a default local_dc is chosen from the
  /// first connected contact point, and no remote hosts are considered in
  /// query plans. If relying on this mechanism, be sure to use only contact
  /// points from the local DC.
  ///
  /// @deprecated The remote DC settings for DC-aware are not suitable for most
  /// scenarios that require DC failover. There is also unhandled gap between
  /// replication factor number of nodes failing and the full cluster failing. Only
  /// the remote DC settings are being deprecated.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] local_dc The primary data center to try first
  /// @param[in] used_hosts_per_remote_dc The number of hosts used in each remote
  /// DC if no hosts are available in the local dc (<b>deprecated</b>)
  /// @param[in] allow_remote_dcs_for_local_cl Allows remote hosts to be used if no
  /// local dc hosts are available and the consistency level is LOCAL_ONE or
  /// LOCAL_QUORUM (<b>deprecated</b>)
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$63(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> local_dc,
    int used_hosts_per_remote_dc,
    cass_bool_t allow_remote_dcs_for_local_cl,
  ) {
    return CassError_.fromValue(_camelCase$63(
      cluster,
      local_dc,
      used_hosts_per_remote_dc,
      allow_remote_dcs_for_local_cl.value,
    ));
  }

  late final _camelCase$63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('cass_cluster_set_load_balance_dc_aware');
  late final _camelCase$63 = _camelCase$63Ptr.asFunction<
      int Function(
          ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Same as cass_cluster_set_load_balance_dc_aware(), but with lengths for string
  /// parameters.
  ///
  /// @deprecated The remote DC settings for DC-aware are not suitable for most
  /// scenarios that require DC failover. There is also unhandled gap between
  /// replication factor number of nodes failing and the full cluster failing. Only
  /// the remote DC settings are being deprecated.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] local_dc
  /// @param[in] local_dc_length
  /// @param[in] used_hosts_per_remote_dc (<b>deprecated</b>)
  /// @param[in] allow_remote_dcs_for_local_cl (<b>deprecated</b>)
  /// @return same as cass_cluster_set_load_balance_dc_aware()
  ///
  /// @see cass_cluster_set_load_balance_dc_aware()
  CassError_ camelCase$64(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> local_dc,
    int local_dc_length,
    int used_hosts_per_remote_dc,
    cass_bool_t allow_remote_dcs_for_local_cl,
  ) {
    return CassError_.fromValue(_camelCase$64(
      cluster,
      local_dc,
      local_dc_length,
      used_hosts_per_remote_dc,
      allow_remote_dcs_for_local_cl.value,
    ));
  }

  late final _camelCase$64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('cass_cluster_set_load_balance_dc_aware_n');
  late final _camelCase$64 = _camelCase$64Ptr.asFunction<
      int Function(
          ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int, int, int)>();

  /// Configures the cluster to use token-aware request routing or not.
  ///
  /// <b>Important:</b> Token-aware routing depends on keyspace metadata.
  /// For this reason enabling token-aware routing will also enable retrieving
  /// and updating keyspace schema metadata.
  ///
  /// <b>Default:</b> cass_true (enabled).
  ///
  /// This routing policy composes the base routing policy, routing
  /// requests first to replicas on nodes considered 'local' by
  /// the base load balancing policy.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  void camelCase$65(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return _camelCase$65(
      cluster,
      enabled.value,
    );
  }

  late final _camelCase$65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_token_aware_routing');
  late final _camelCase$65 = _camelCase$65Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Configures token-aware routing to randomly shuffle replicas. This can reduce
  /// the effectiveness of server-side caching, but it can better distribute load over
  /// replicas for a given partition key.
  ///
  /// <b>Note:</b> Token-aware routing must be enabled for the setting to
  /// be applicable.
  ///
  /// <b>Default:</b> cass_true (enabled).
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  void camelCase$66(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return _camelCase$66(
      cluster,
      enabled.value,
    );
  }

  late final _camelCase$66Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_token_aware_routing_shuffle_replicas');
  late final _camelCase$66 = _camelCase$66Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Configures the cluster to use latency-aware request routing or not.
  ///
  /// <b>Default:</b> cass_false (disabled).
  ///
  /// This routing policy is a top-level routing policy. It uses the
  /// base routing policy to determine locality (dc-aware) and/or
  /// placement (token-aware) before considering the latency.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  void camelCase$67(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return _camelCase$67(
      cluster,
      enabled.value,
    );
  }

  late final _camelCase$67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_latency_aware_routing');
  late final _camelCase$67 = _camelCase$67Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Configures the settings for latency-aware request routing.
  ///
  /// <b>Defaults:</b>
  ///
  /// <ul>
  /// <li>exclusion_threshold: 2.0</li>
  /// <li>scale_ms: 100 milliseconds</li>
  /// <li>retry_period_ms: 10,000 milliseconds (10 seconds)</li>
  /// <li>update_rate_ms: 100 milliseconds</li>
  /// <li>min_measured: 50</li>
  /// </ul>
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] exclusion_threshold Controls how much worse the latency must be compared to the
  /// average latency of the best performing node before it penalized.
  /// @param[in] scale_ms Controls the weight given to older latencies when calculating the average
  /// latency of a node. A bigger scale will give more weight to older latency measurements.
  /// @param[in] retry_period_ms The amount of time a node is penalized by the policy before
  /// being given a second chance when the current average latency exceeds the calculated
  /// threshold (exclusion_threshold * best_average_latency).
  /// @param[in] update_rate_ms The rate at  which the best average latency is recomputed.
  /// @param[in] min_measured The minimum number of measurements per-host required to
  /// be considered by the policy.
  void camelCase$68(
    ffi.Pointer<CassCluster> cluster,
    double exclusion_threshold,
    int scale_ms,
    int retry_period_ms,
    int update_rate_ms,
    int min_measured,
  ) {
    return _camelCase$68(
      cluster,
      exclusion_threshold,
      scale_ms,
      retry_period_ms,
      update_rate_ms,
      min_measured,
    );
  }

  late final _camelCase$68Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CassCluster>, cass_double_t,
                  cass_uint64_t, cass_uint64_t, cass_uint64_t, cass_uint64_t)>>(
      'cass_cluster_set_latency_aware_routing_settings');
  late final _camelCase$68 = _camelCase$68Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, double, int, int, int, int)>();

  /// Sets/Appends whitelist hosts. The first call sets the whitelist hosts and
  /// any subsequent calls appends additional hosts. Passing an empty string will
  /// clear and disable the whitelist. White space is striped from the hosts.
  ///
  /// This policy filters requests to all other policies, only allowing requests
  /// to the hosts contained in the whitelist. Any host not in the whitelist will
  /// be ignored and a connection will not be established. This policy is useful
  /// for ensuring that the driver will only connect to a predefined set of hosts.
  ///
  /// Examples: "127.0.0.1" "127.0.0.1,127.0.0.2"
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] hosts A comma delimited list of addresses. An empty string will
  /// clear the whitelist hosts. The string is copied into the cluster
  /// configuration; the memory pointed to by this parameter can be freed after
  /// this call.
  void camelCase$69(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> hosts,
  ) {
    return _camelCase$69(
      cluster,
      hosts,
    );
  }

  late final _camelCase$69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_whitelist_filtering');
  late final _camelCase$69 = _camelCase$69Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_whitelist_filtering(), but with lengths for
  /// string parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] hosts
  /// @param[in] hosts_length
  /// @return same as cass_cluster_set_whitelist_filtering()
  ///
  /// @see cass_cluster_set_whitelist_filtering()
  void camelCase$70(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> hosts,
    int hosts_length,
  ) {
    return _camelCase$70(
      cluster,
      hosts,
      hosts_length,
    );
  }

  late final _camelCase$70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_whitelist_filtering_n');
  late final _camelCase$70 = _camelCase$70Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets/Appends blacklist hosts. The first call sets the blacklist hosts and
  /// any subsequent calls appends additional hosts. Passing an empty string will
  /// clear and disable the blacklist. White space is striped from the hosts.
  ///
  /// This policy filters requests to all other policies, only allowing requests
  /// to the hosts not contained in the blacklist. Any host in the blacklist will
  /// be ignored and a connection will not be established. This policy is useful
  /// for ensuring that the driver will not connect to a predefined set of hosts.
  ///
  /// Examples: "127.0.0.1" "127.0.0.1,127.0.0.2"
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] hosts A comma delimited list of addresses. An empty string will
  /// clear the blacklist hosts. The string is copied into the cluster
  /// configuration; the memory pointed to by this parameter can be freed after
  /// this call.
  void camelCase$71(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> hosts,
  ) {
    return _camelCase$71(
      cluster,
      hosts,
    );
  }

  late final _camelCase$71Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_blacklist_filtering');
  late final _camelCase$71 = _camelCase$71Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_blacklist_filtering_hosts(), but with lengths for
  /// string parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] hosts
  /// @param[in] hosts_length
  /// @return same as cass_cluster_set_blacklist_filtering()
  ///
  /// @see cass_cluster_set_blacklist_filtering()
  void camelCase$72(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> hosts,
    int hosts_length,
  ) {
    return _camelCase$72(
      cluster,
      hosts,
      hosts_length,
    );
  }

  late final _camelCase$72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_blacklist_filtering_n');
  late final _camelCase$72 = _camelCase$72Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_cluster_set_whitelist_filtering(), but whitelist all hosts of a dc
  ///
  /// Examples: "dc1", "dc1,dc2"
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] dcs A comma delimited list of dcs. An empty string will clear the
  /// whitelist dcs. The string is copied into the cluster configuration; the
  /// memory pointed to by this parameter can be freed after this call.
  void camelCase$73(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> dcs,
  ) {
    return _camelCase$73(
      cluster,
      dcs,
    );
  }

  late final _camelCase$73Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>>(
      'cass_cluster_set_whitelist_dc_filtering');
  late final _camelCase$73 = _camelCase$73Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_whitelist_dc_filtering(), but with lengths for
  /// string parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] dcs
  /// @param[in] dcs_length
  /// @return same as cass_cluster_set_whitelist_dc_filtering()
  ///
  /// @see cass_cluster_set_whitelist_dc_filtering()
  void camelCase$74(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> dcs,
    int dcs_length,
  ) {
    return _camelCase$74(
      cluster,
      dcs,
      dcs_length,
    );
  }

  late final _camelCase$74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_whitelist_dc_filtering_n');
  late final _camelCase$74 = _camelCase$74Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_cluster_set_blacklist_filtering(), but blacklist all hosts of a dc
  ///
  /// Examples: "dc1", "dc1,dc2"
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] dcs A comma delimited list of dcs. An empty string will clear the
  /// blacklist dcs. The string is copied into the cluster configuration; the
  /// memory pointed to by this parameter can be freed after this call.
  void camelCase$75(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> dcs,
  ) {
    return _camelCase$75(
      cluster,
      dcs,
    );
  }

  late final _camelCase$75Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>>(
      'cass_cluster_set_blacklist_dc_filtering');
  late final _camelCase$75 = _camelCase$75Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_blacklist_dc_filtering(), but with lengths for
  /// string parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] dcs
  /// @param[in] dcs_length
  /// @return same as cass_cluster_set_blacklist_dc_filtering()
  ///
  /// @see cass_cluster_set_blacklist_dc_filtering()
  void camelCase$76(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> dcs,
    int dcs_length,
  ) {
    return _camelCase$76(
      cluster,
      dcs,
      dcs_length,
    );
  }

  late final _camelCase$76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_blacklist_dc_filtering_n');
  late final _camelCase$76 = _camelCase$76Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Enable/Disable Nagle's algorithm on connections.
  ///
  /// <b>Default:</b> cass_true (disables Nagle's algorithm).
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  void camelCase$77(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return _camelCase$77(
      cluster,
      enabled.value,
    );
  }

  late final _camelCase$77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_tcp_nodelay');
  late final _camelCase$77 = _camelCase$77Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Enable/Disable TCP keep-alive
  ///
  /// <b>Default:</b> cass_false (disabled).
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  /// @param[in] delay_secs The initial delay in seconds, ignored when
  /// `enabled` is false.
  void camelCase$78(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
    int delay_secs,
  ) {
    return _camelCase$78(
      cluster,
      enabled.value,
      delay_secs,
    );
  }

  late final _camelCase$78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('cass_cluster_set_tcp_keepalive');
  late final _camelCase$78 = _camelCase$78Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int, int)>();

  /// Sets the timestamp generator used to assign timestamps to all requests
  /// unless overridden by setting the timestamp on a statement or a batch.
  ///
  /// <b>Default:</b> Monotonically increasing, client-side timestamp generator.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] timestamp_gen
  ///
  /// @see cass_statement_set_timestamp()
  /// @see cass_batch_set_timestamp()
  void camelCase$79(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<CassTimestampGen> timestamp_gen,
  ) {
    return _camelCase$79(
      cluster,
      timestamp_gen,
    );
  }

  late final _camelCase$79Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<CassCluster>, ffi.Pointer<CassTimestampGen>)>>(
      'cass_cluster_set_timestamp_gen');
  late final _camelCase$79 = _camelCase$79Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<CassTimestampGen>)>();

  /// Sets the amount of time between heartbeat messages and controls the amount
  /// of time the connection must be idle before sending heartbeat messages. This
  /// is useful for preventing intermediate network devices from dropping
  /// connections.
  ///
  /// <b>Default:</b> 30 seconds
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] interval_secs Use 0 to disable heartbeat messages
  void camelCase$80(
    ffi.Pointer<CassCluster> cluster,
    int interval_secs,
  ) {
    return _camelCase$80(
      cluster,
      interval_secs,
    );
  }

  late final _camelCase$80Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_connection_heartbeat_interval');
  late final _camelCase$80 = _camelCase$80Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the amount of time a connection is allowed to be without a successful
  /// heartbeat response before being terminated and scheduled for reconnection.
  ///
  /// <b>Default:</b> 60 seconds
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] timeout_secs
  void camelCase$81(
    ffi.Pointer<CassCluster> cluster,
    int timeout_secs,
  ) {
    return _camelCase$81(
      cluster,
      timeout_secs,
    );
  }

  late final _camelCase$81Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_connection_idle_timeout');
  late final _camelCase$81 = _camelCase$81Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the retry policy used for all requests unless overridden by setting
  /// a retry policy on a statement or a batch.
  ///
  /// <b>Default:</b> The same policy as would be created by the function:
  /// cass_retry_policy_default_new(). This policy will retry on a read timeout
  /// if there was enough replicas, but no data present, on a write timeout if a
  /// logged batch request failed to write the batch log, and on a unavailable
  /// error it retries using a new host. In all other cases the default policy
  /// will return an error.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] retry_policy
  ///
  /// @see cass_retry_policy_default_new()
  /// @see cass_statement_set_retry_policy()
  /// @see cass_batch_set_retry_policy()
  void camelCase$82(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<CassRetryPolicy> retry_policy,
  ) {
    return _camelCase$82(
      cluster,
      retry_policy,
    );
  }

  late final _camelCase$82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<CassRetryPolicy>)>>('cass_cluster_set_retry_policy');
  late final _camelCase$82 = _camelCase$82Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<CassRetryPolicy>)>();

  /// Enable/Disable retrieving and updating schema metadata. If disabled
  /// this is allows the driver to skip over retrieving and updating schema
  /// metadata and cass_session_get_schema_meta() will always return an empty object.
  /// This can be useful for reducing the startup overhead of short-lived sessions.
  ///
  /// <b>Default:</b> cass_true (enabled).
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  ///
  /// @see cass_session_get_schema_meta()
  void camelCase$83(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return _camelCase$83(
      cluster,
      enabled.value,
    );
  }

  late final _camelCase$83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_use_schema');
  late final _camelCase$83 = _camelCase$83Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Enable/Disable retrieving hostnames for IP addresses using reverse IP lookup.
  ///
  /// @deprecated Do not use. Using reverse DNS lookup to verify the certificate
  /// does not protect against man-in-the-middle attacks.
  ///
  /// <b>Default:</b> cass_false (disabled).
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred
  ///
  /// @see cass_cluster_set_resolve_timeout()
  CassError_ camelCase$84(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$84(
      cluster,
      enabled.value,
    ));
  }

  late final _camelCase$84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_use_hostname_resolution');
  late final _camelCase$84 = _camelCase$84Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Enable/Disable the randomization of the contact points list.
  ///
  /// <b>Default:</b> cass_true (enabled).
  ///
  /// <b>Important:</b> This setting should only be disabled for debugging or
  /// tests.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$85(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$85(
      cluster,
      enabled.value,
    ));
  }

  late final _camelCase$85Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.UnsignedInt)>>(
      'cass_cluster_set_use_randomized_contact_points');
  late final _camelCase$85 = _camelCase$85Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Enable constant speculative executions with the supplied settings.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] constant_delay_ms
  /// @param[in] max_speculative_executions
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$86(
    ffi.Pointer<CassCluster> cluster,
    Dartcass_int64_t constant_delay_ms,
    int max_speculative_executions,
  ) {
    return CassError_.fromValue(_camelCase$86(
      cluster,
      constant_delay_ms,
      max_speculative_executions,
    ));
  }

  late final _camelCase$86Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, cass_int64_t, ffi.Int)>>(
      'cass_cluster_set_constant_speculative_execution_policy');
  late final _camelCase$86 = _camelCase$86Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int, int)>();

  /// Disable speculative executions
  ///
  /// <b>Default:</b> This is the default speculative execution policy.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$87(
    ffi.Pointer<CassCluster> cluster,
  ) {
    return CassError_.fromValue(_camelCase$87(
      cluster,
    ));
  }

  late final _camelCase$87Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassCluster>)>>(
      'cass_cluster_set_no_speculative_execution_policy');
  late final _camelCase$87 =
      _camelCase$87Ptr.asFunction<int Function(ffi.Pointer<CassCluster>)>();

  /// Sets the maximum number of "pending write" objects that will be
  /// saved for re-use for marshalling new requests. These objects may
  /// hold on to a significant amount of memory and reducing the
  /// number of these objects may reduce memory usage of the application.
  ///
  /// The cost of reducing the value of this setting is potentially slower
  /// marshalling of requests prior to sending.
  ///
  /// <b>Default:</b> Max unsigned integer value
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] num_objects
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$88(
    ffi.Pointer<CassCluster> cluster,
    int num_objects,
  ) {
    return CassError_.fromValue(_camelCase$88(
      cluster,
      num_objects,
    ));
  }

  late final _camelCase$88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_max_reusable_write_objects');
  late final _camelCase$88 = _camelCase$88Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Associates a named execution profile which can be utilized during execution.
  ///
  /// <b>Note:</b> Once the execution profile is added to a cluster, it is
  /// immutable and any changes made to the execution profile must be re-assigned
  /// to the cluster before a session connection is established in order for those
  /// settings to be utilized during query execution.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] name
  /// @param[in] profile
  /// @return CASS_OK if successful, otherwise an error occurred
  ///
  /// @see cass_batch_set_execution_profile()
  /// @see cass_statement_set_execution_profile()
  CassError_ camelCase$89(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassExecProfile> profile,
  ) {
    return CassError_.fromValue(_camelCase$89(
      cluster,
      name,
      profile,
    ));
  }

  late final _camelCase$89Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CassExecProfile>)>>(
      'cass_cluster_set_execution_profile');
  late final _camelCase$89 = _camelCase$89Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassExecProfile>)>();

  /// Same as cass_cluster_add_execution_profile(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] profile
  /// @return same as cass_cluster_set_execution_profile()
  ///
  /// @see cass_batch_set_execution_profile()
  /// @see cass_statement_set_execution_profile()
  CassError_ camelCase$90(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassExecProfile> profile,
  ) {
    return CassError_.fromValue(_camelCase$90(
      cluster,
      name,
      name_length,
      profile,
    ));
  }

  late final _camelCase$90Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<CassExecProfile>)>>(
      'cass_cluster_set_execution_profile_n');
  late final _camelCase$90 = _camelCase$90Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassExecProfile>)>();

  /// Prepare statements on all available hosts.
  ///
  /// <b>Default:</b> cass_true
  ///
  /// @public @memberof CassCluster
  ///
  /// @param cluster
  /// @param enabled
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$91(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$91(
      cluster,
      enabled.value,
    ));
  }

  late final _camelCase$91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_prepare_on_all_hosts');
  late final _camelCase$91 = _camelCase$91Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Enable pre-preparing cached prepared statements when existing hosts become
  /// available again or when new hosts are added to the cluster.
  ///
  /// This can help mitigate request latency when executing prepared statements
  /// by avoiding an extra round trip in cases where the statement is
  /// unprepared on a freshly started server. The main tradeoff is extra background
  /// network traffic is required to prepare the statements on hosts as they become
  /// available.
  ///
  /// <b>Default:</b> cass_true
  ///
  /// @param cluster
  /// @param enabled
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$92(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$92(
      cluster,
      enabled.value,
    ));
  }

  late final _camelCase$92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_prepare_on_up_or_add_host');
  late final _camelCase$92 = _camelCase$92Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Enable the <b>NO_COMPACT</b> startup option.
  ///
  /// This can help facilitate uninterrupted cluster upgrades where tables using
  /// <b>COMPACT_STORAGE</b> will operate in "compatibility mode" for
  /// <b>BATCH</b>, <b>DELETE</b>, <b>SELECT</b>, and <b>UPDATE</b> CQL operations.
  ///
  /// <b>Default:</b> cass_false
  ///
  /// @cassandra{3.0.16+}
  /// @cassandra{3.11.2+}
  /// @cassandra{4.0+}
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] enabled
  CassError_ camelCase$93(
    ffi.Pointer<CassCluster> cluster,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$93(
      cluster,
      enabled.value,
    ));
  }

  late final _camelCase$93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_no_compact');
  late final _camelCase$93 = _camelCase$93Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets a callback for handling host state changes in the cluster.
  ///
  /// <b>Note:</b> The callback is invoked only when state changes in the cluster
  /// are applicable to the configured load balancing policy(s).
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] callback
  /// @param[in] data
  /// @return CASS_OK if successful, otherwise and error occurred
  CassError_ camelCase$94(
    ffi.Pointer<CassCluster> cluster,
    CassHostListenerCallback callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return CassError_.fromValue(_camelCase$94(
      cluster,
      callback,
      data,
    ));
  }

  late final _camelCase$94Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
                  CassHostListenerCallback, ffi.Pointer<ffi.Void>)>>(
      'cass_cluster_set_host_listener_callback');
  late final _camelCase$94 = _camelCase$94Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, CassHostListenerCallback,
          ffi.Pointer<ffi.Void>)>();

  /// Sets the secure connection bundle path for processing DBaaS credentials.
  ///
  /// This will pre-configure a cluster using the credentials format provided by
  /// the DBaaS cloud provider.
  ///
  /// @param[in] cluster
  /// @param[in] path Absolute path to DBaaS credentials file.
  /// @return CASS_OK if successful, otherwise error occured.
  CassError_ camelCase$95(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> path,
  ) {
    return CassError_.fromValue(_camelCase$95(
      cluster,
      path,
    ));
  }

  late final _camelCase$95Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>>(
      'cass_cluster_set_cloud_secure_connection_bundle');
  late final _camelCase$95 = _camelCase$95Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_cloud_secure_connection_bundle(), but with lengths
  /// for string parameters.
  ///
  /// @see cass_cluster_set_cloud_secure_connection_bundle()
  ///
  /// @param[in] cluster
  /// @param[in] path Absolute path to DBaaS credentials file.
  /// @param[in] path_length Length of path variable.
  /// @return CASS_OK if successful, otherwise error occured.
  CassError_ camelCase$96(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> path,
    int path_length,
  ) {
    return CassError_.fromValue(_camelCase$96(
      cluster,
      path,
      path_length,
    ));
  }

  late final _camelCase$96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_cloud_secure_connection_bundle_n');
  late final _camelCase$96 = _camelCase$96Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_cluster_set_cloud_secure_connection_bundle(), but it does not
  /// initialize the underlying SSL library implementation. The SSL library still
  /// needs to be initialized, but it's up to the client application to handle
  /// initialization. This is similar to the function cass_ssl_new_no_lib_init(),
  /// and its documentation should be used as a reference to properly initialize
  /// the underlying SSL library.
  ///
  /// @see cass_ssl_new_no_lib_init()
  /// @see cass_cluster_set_cloud_secure_connection_bundle()
  ///
  /// @param[in] cluster
  /// @param[in] path Absolute path to DBaaS credentials file.
  /// @return CASS_OK if successful, otherwise error occured.
  CassError_ camelCase$97(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> path,
  ) {
    return CassError_.fromValue(_camelCase$97(
      cluster,
      path,
    ));
  }

  late final _camelCase$97Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>>(
      'cass_cluster_set_cloud_secure_connection_bundle_no_ssl_lib_init');
  late final _camelCase$97 = _camelCase$97Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_cloud_secure_connection_bundle_no_ssl_lib_init(),
  /// but with lengths for string parameters.
  ///
  /// @see cass_cluster_set_cloud_secure_connection_bundle_no_ssl_lib_init()
  ///
  /// @param[in] cluster
  /// @param[in] path Absolute path to DBaaS credentials file.
  /// @param[in] path_length Length of path variable.
  /// @return CASS_OK if successful, otherwise error occured.
  CassError_ camelCase$98(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> path,
    int path_length,
  ) {
    return CassError_.fromValue(_camelCase$98(
      cluster,
      path,
      path_length,
    ));
  }

  late final _camelCase$98Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, ffi.Size)>>(
      'cass_cluster_set_cloud_secure_connection_bundle_no_ssl_lib_init_n');
  late final _camelCase$98 = _camelCase$98Ptr.asFunction<
      int Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Set the application name.
  ///
  /// This is optional; however it provides the server with the application name
  /// that can aid in debugging issues with larger clusters where there are a lot
  /// of client (or application) connections.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] application_name
  void camelCase$99(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> application_name,
  ) {
    return _camelCase$99(
      cluster,
      application_name,
    );
  }

  late final _camelCase$99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_application_name');
  late final _camelCase$99 = _camelCase$99Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_application_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] application_name
  /// @param[in] application_name_length
  void camelCase$100(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> application_name,
    int application_name_length,
  ) {
    return _camelCase$100(
      cluster,
      application_name,
      application_name_length,
    );
  }

  late final _camelCase$100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_application_name_n');
  late final _camelCase$100 = _camelCase$100Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Set the application version.
  ///
  /// This is optional; however it provides the server with the application
  /// version that can aid in debugging issues with large clusters where there are
  /// a lot of client (or application) connections that may have different
  /// versions in use.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] application_version
  void camelCase$101(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> application_version,
  ) {
    return _camelCase$101(
      cluster,
      application_version,
    );
  }

  late final _camelCase$101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_cluster_set_application_version');
  late final _camelCase$101 = _camelCase$101Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_cluster_set_application_version(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] application_version
  /// @param[in] application_version_length
  void camelCase$102(
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> application_version,
    int application_version_length,
  ) {
    return _camelCase$102(
      cluster,
      application_version,
      application_version_length,
    );
  }

  late final _camelCase$102Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_cluster_set_application_version_n');
  late final _camelCase$102 = _camelCase$102Ptr.asFunction<
      void Function(ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Set the client id.
  ///
  /// This is optional; however it provides the server with the client ID that can
  /// aid in debugging issues with large clusters where there are a lot of client
  /// connections.
  ///
  /// Default: UUID v4 generated (@see cass_session_get_client_id())
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] client_id
  void camelCase$103(
    ffi.Pointer<CassCluster> cluster,
    CassUuid client_id,
  ) {
    return _camelCase$103(
      cluster,
      client_id,
    );
  }

  late final _camelCase$103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              CassUuid)>>('cass_cluster_set_client_id');
  late final _camelCase$103 = _camelCase$103Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, CassUuid)>();

  /// Sets the amount of time between monitor reporting event messages.
  ///
  /// <b>Default:</b> 300 seconds.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param[in] cluster
  /// @param[in] interval_secs Use 0 to disable monitor reporting event messages.
  void camelCase$104(
    ffi.Pointer<CassCluster> cluster,
    int interval_secs,
  ) {
    return _camelCase$104(
      cluster,
      interval_secs,
    );
  }

  late final _camelCase$104Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_monitor_reporting_interval');
  late final _camelCase$104 = _camelCase$104Ptr
      .asFunction<void Function(ffi.Pointer<CassCluster>, int)>();

  /// Sets the amount of time after which metric histograms should be refreshed.
  /// Upon refresh histograms are reset to zero, effectively dropping any history to
  /// that point.  Refresh occurs when a snapshot is requested so ths value should
  /// be thought of as a minimum time to refresh.
  ///
  /// If refresh is not enabled the driver will continue to accumulate histogram
  /// data over the life of a session; this is the default behaviour and replicates
  /// the behaviour of previous versions.
  ///
  /// Note that the specified interval must be > 0 otherwise CASS_ERROR_LIB_BAD_PARAMS
  /// will be returned.
  ///
  /// @public @memberof CassCluster
  ///
  /// @param cluster
  /// @param refresh_interval Minimum interval (in milliseconds) for refresh interval
  CassError_ camelCase$105(
    ffi.Pointer<CassCluster> cluster,
    int refresh_interval,
  ) {
    return CassError_.fromValue(_camelCase$105(
      cluster,
      refresh_interval,
    ));
  }

  late final _camelCase$105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCluster>,
              ffi.UnsignedInt)>>('cass_cluster_set_histogram_refresh_interval');
  late final _camelCase$105 = _camelCase$105Ptr
      .asFunction<int Function(ffi.Pointer<CassCluster>, int)>();

  /// Creates a new session.
  ///
  /// @public @memberof CassSession
  ///
  /// @return Returns a session that must be freed.
  ///
  /// @see cass_session_free()
  ffi.Pointer<CassSession> camelCase$106() {
    return _camelCase$106();
  }

  late final _camelCase$106Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassSession> Function()>>(
          'cass_session_new');
  late final _camelCase$106 =
      _camelCase$106Ptr.asFunction<ffi.Pointer<CassSession> Function()>();

  /// Frees a session instance. If the session is still connected it will be synchronously
  /// closed before being deallocated.
  ///
  /// Important: Do not free a session in a future callback. Freeing a session in a future
  /// callback will cause a deadlock.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  void camelCase$107(
    ffi.Pointer<CassSession> session,
  ) {
    return _camelCase$107(
      session,
    );
  }

  late final _camelCase$107Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassSession>)>>(
          'cass_session_free');
  late final _camelCase$107 =
      _camelCase$107Ptr.asFunction<void Function(ffi.Pointer<CassSession>)>();

  /// Connects a session.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] cluster The cluster configuration is copied into the session and
  /// is immutable after connection.
  /// @return A future that must be freed.
  ///
  /// @see cass_session_close()
  ffi.Pointer<CassFuture> camelCase$108(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassCluster> cluster,
  ) {
    return _camelCase$108(
      session,
      cluster,
    );
  }

  late final _camelCase$108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
              ffi.Pointer<CassCluster>)>>('cass_session_connect');
  late final _camelCase$108 = _camelCase$108Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(
          ffi.Pointer<CassSession>, ffi.Pointer<CassCluster>)>();

  /// Connects a session and sets the keyspace.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] cluster The cluster configuration is copied into the session and
  /// is immutable after connection.
  /// @param[in] keyspace
  /// @return A future that must be freed.
  ///
  /// @see cass_session_close()
  ffi.Pointer<CassFuture> camelCase$109(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> keyspace,
  ) {
    return _camelCase$109(
      session,
      cluster,
      keyspace,
    );
  }

  late final _camelCase$109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(
              ffi.Pointer<CassSession>,
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>)>>('cass_session_connect_keyspace');
  late final _camelCase$109 = _camelCase$109Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
          ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_session_connect_keyspace(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] cluster
  /// @param[in] keyspace
  /// @param[in] keyspace_length
  /// @return same as cass_session_connect_keyspace()
  ///
  /// @see cass_session_connect_keyspace()
  ffi.Pointer<CassFuture> camelCase$110(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassCluster> cluster,
    ffi.Pointer<ffi.Char> keyspace,
    int keyspace_length,
  ) {
    return _camelCase$110(
      session,
      cluster,
      keyspace,
      keyspace_length,
    );
  }

  late final _camelCase$110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(
              ffi.Pointer<CassSession>,
              ffi.Pointer<CassCluster>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_session_connect_keyspace_n');
  late final _camelCase$110 = _camelCase$110Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
          ffi.Pointer<CassCluster>, ffi.Pointer<ffi.Char>, int)>();

  /// Closes the session instance, outputs a close future which can
  /// be used to determine when the session has been terminated. This allows
  /// in-flight requests to finish.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @return A future that must be freed.
  ffi.Pointer<CassFuture> camelCase$111(
    ffi.Pointer<CassSession> session,
  ) {
    return _camelCase$111(
      session,
    );
  }

  late final _camelCase$111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(
              ffi.Pointer<CassSession>)>>('cass_session_close');
  late final _camelCase$111 = _camelCase$111Ptr
      .asFunction<ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>)>();

  /// Create a prepared statement.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] query The query is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return A future that must be freed.
  ///
  /// @see cass_future_get_prepared()
  ffi.Pointer<CassFuture> camelCase$112(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<ffi.Char> query,
  ) {
    return _camelCase$112(
      session,
      query,
    );
  }

  late final _camelCase$112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
              ffi.Pointer<ffi.Char>)>>('cass_session_prepare');
  late final _camelCase$112 = _camelCase$112Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(
          ffi.Pointer<CassSession>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_session_prepare(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] query
  /// @param[in] query_length
  /// @return same as cass_session_prepare()
  ///
  /// @see cass_session_prepare()
  ffi.Pointer<CassFuture> camelCase$113(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<ffi.Char> query,
    int query_length,
  ) {
    return _camelCase$113(
      session,
      query,
      query_length,
    );
  }

  late final _camelCase$113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('cass_session_prepare_n');
  late final _camelCase$113 = _camelCase$113Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(
          ffi.Pointer<CassSession>, ffi.Pointer<ffi.Char>, int)>();

  /// Create a prepared statement from an existing statement.
  ///
  /// <b>Note:</b> Bound statements will inherit the keyspace, consistency,
  /// serial consistency, request timeout and retry policy of the existing
  /// statement.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] statement
  /// @return A future that must be freed.
  ///
  /// @see cass_future_get_prepared()
  ffi.Pointer<CassFuture> camelCase$114(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassStatement> statement,
  ) {
    return _camelCase$114(
      session,
      statement,
    );
  }

  late final _camelCase$114Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassFuture> Function(
                  ffi.Pointer<CassSession>, ffi.Pointer<CassStatement>)>>(
      'cass_session_prepare_from_existing');
  late final _camelCase$114 = _camelCase$114Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(
          ffi.Pointer<CassSession>, ffi.Pointer<CassStatement>)>();

  /// Execute a query or bound statement.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] statement
  /// @return A future that must be freed.
  ///
  /// @see cass_future_get_result()
  ffi.Pointer<CassFuture> camelCase$115(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassStatement> statement,
  ) {
    return _camelCase$115(
      session,
      statement,
    );
  }

  late final _camelCase$115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
              ffi.Pointer<CassStatement>)>>('cass_session_execute');
  late final _camelCase$115 = _camelCase$115Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(
          ffi.Pointer<CassSession>, ffi.Pointer<CassStatement>)>();

  /// Execute a batch statement.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[in] batch
  /// @return A future that must be freed.
  ///
  /// @see cass_future_get_result()
  ffi.Pointer<CassFuture> camelCase$116(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassBatch> batch,
  ) {
    return _camelCase$116(
      session,
      batch,
    );
  }

  late final _camelCase$116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFuture> Function(ffi.Pointer<CassSession>,
              ffi.Pointer<CassBatch>)>>('cass_session_execute_batch');
  late final _camelCase$116 = _camelCase$116Ptr.asFunction<
      ffi.Pointer<CassFuture> Function(
          ffi.Pointer<CassSession>, ffi.Pointer<CassBatch>)>();

  /// Gets a snapshot of this session's schema metadata. The returned
  /// snapshot of the schema metadata is not updated. This function
  /// must be called again to retrieve any schema changes since the
  /// previous call.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @return A schema instance that must be freed.
  ///
  /// @see cass_schema_meta_free()
  ffi.Pointer<CassSchemaMeta> camelCase$117(
    ffi.Pointer<CassSession> session,
  ) {
    return _camelCase$117(
      session,
    );
  }

  late final _camelCase$117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassSchemaMeta> Function(
              ffi.Pointer<CassSession>)>>('cass_session_get_schema_meta');
  late final _camelCase$117 = _camelCase$117Ptr.asFunction<
      ffi.Pointer<CassSchemaMeta> Function(ffi.Pointer<CassSession>)>();

  /// Gets a copy of this session's performance/diagnostic metrics.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[out] output
  void camelCase$118(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassMetrics> output,
  ) {
    return _camelCase$118(
      session,
      output,
    );
  }

  late final _camelCase$118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassSession>,
              ffi.Pointer<CassMetrics>)>>('cass_session_get_metrics');
  late final _camelCase$118 = _camelCase$118Ptr.asFunction<
      void Function(ffi.Pointer<CassSession>, ffi.Pointer<CassMetrics>)>();

  /// Gets a copy of this session's speculative execution metrics.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @param[out] output
  void camelCase$119(
    ffi.Pointer<CassSession> session,
    ffi.Pointer<CassSpeculativeExecutionMetrics> output,
  ) {
    return _camelCase$119(
      session,
      output,
    );
  }

  late final _camelCase$119Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<CassSession>,
                  ffi.Pointer<CassSpeculativeExecutionMetrics>)>>(
      'cass_session_get_speculative_execution_metrics');
  late final _camelCase$119 = _camelCase$119Ptr.asFunction<
      void Function(ffi.Pointer<CassSession>,
          ffi.Pointer<CassSpeculativeExecutionMetrics>)>();

  /// Get the client id.
  ///
  /// @public @memberof CassSession
  ///
  /// @param[in] session
  /// @return Client id.
  CassUuid camelCase$120(
    ffi.Pointer<CassSession> session,
  ) {
    return _camelCase$120(
      session,
    );
  }

  late final _camelCase$120Ptr =
      _lookup<ffi.NativeFunction<CassUuid Function(ffi.Pointer<CassSession>)>>(
          'cass_session_get_client_id');
  late final _camelCase$120 = _camelCase$120Ptr
      .asFunction<CassUuid Function(ffi.Pointer<CassSession>)>();

  /// Frees a schema metadata instance.
  ///
  /// @public @memberof CassSchemaMeta
  ///
  /// @param[in] schema_meta
  void camelCase$121(
    ffi.Pointer<CassSchemaMeta> schema_meta,
  ) {
    return _camelCase$121(
      schema_meta,
    );
  }

  late final _camelCase$121Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassSchemaMeta>)>>(
      'cass_schema_meta_free');
  late final _camelCase$121 = _camelCase$121Ptr
      .asFunction<void Function(ffi.Pointer<CassSchemaMeta>)>();

  /// Gets the version of the schema metadata snapshot.
  ///
  /// @public @memberof CassSchemaMeta
  ///
  /// @param[in] schema_meta
  ///
  /// @return The snapshot version.
  int camelCase$122(
    ffi.Pointer<CassSchemaMeta> schema_meta,
  ) {
    return _camelCase$122(
      schema_meta,
    );
  }

  late final _camelCase$122Ptr = _lookup<
          ffi
          .NativeFunction<cass_uint32_t Function(ffi.Pointer<CassSchemaMeta>)>>(
      'cass_schema_meta_snapshot_version');
  late final _camelCase$122 =
      _camelCase$122Ptr.asFunction<int Function(ffi.Pointer<CassSchemaMeta>)>();

  /// Gets the version of the connected Cassandra cluster.
  ///
  /// @public @memberof CassSchemaMeta
  ///
  /// @param[in] schema_meta
  ///
  /// @return Cassandra's version
  CassVersion camelCase$123(
    ffi.Pointer<CassSchemaMeta> schema_meta,
  ) {
    return _camelCase$123(
      schema_meta,
    );
  }

  late final _camelCase$123Ptr = _lookup<
          ffi
          .NativeFunction<CassVersion Function(ffi.Pointer<CassSchemaMeta>)>>(
      'cass_schema_meta_version');
  late final _camelCase$123 = _camelCase$123Ptr
      .asFunction<CassVersion Function(ffi.Pointer<CassSchemaMeta>)>();

  /// Gets the keyspace metadata for the provided keyspace name.
  ///
  /// @public @memberof CassSchemaMeta
  ///
  /// @param[in] schema_meta
  /// @param[in] keyspace
  ///
  /// @return The metadata for a keyspace. NULL if keyspace does not exist.
  ffi.Pointer<CassKeyspaceMeta> camelCase$124(
    ffi.Pointer<CassSchemaMeta> schema_meta,
    ffi.Pointer<ffi.Char> keyspace,
  ) {
    return _camelCase$124(
      schema_meta,
      keyspace,
    );
  }

  late final _camelCase$124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassKeyspaceMeta> Function(ffi.Pointer<CassSchemaMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_schema_meta_keyspace_by_name');
  late final _camelCase$124 = _camelCase$124Ptr.asFunction<
      ffi.Pointer<CassKeyspaceMeta> Function(
          ffi.Pointer<CassSchemaMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_schema_meta_keyspace_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassSchemaMeta
  ///
  /// @param[in] schema_meta
  /// @param[in] keyspace
  /// @param[in] keyspace_length
  /// @return same as cass_schema_meta_keyspace_by_name()
  ///
  /// @see cass_schema_meta_keyspace_by_name()
  ffi.Pointer<CassKeyspaceMeta> camelCase$125(
    ffi.Pointer<CassSchemaMeta> schema_meta,
    ffi.Pointer<ffi.Char> keyspace,
    int keyspace_length,
  ) {
    return _camelCase$125(
      schema_meta,
      keyspace,
      keyspace_length,
    );
  }

  late final _camelCase$125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassKeyspaceMeta> Function(
              ffi.Pointer<CassSchemaMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_schema_meta_keyspace_by_name_n');
  late final _camelCase$125 = _camelCase$125Ptr.asFunction<
      ffi.Pointer<CassKeyspaceMeta> Function(
          ffi.Pointer<CassSchemaMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the keyspace.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$126(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$126(
      keyspace_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_keyspace_meta_name');
  late final _camelCase$126 = _camelCase$126Ptr.asFunction<
      void Function(ffi.Pointer<CassKeyspaceMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Determine if the keyspace is a virtual keyspace.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return cass_true is the keyspace is virtual, otherwise cass_false
  cass_bool_t camelCase$127(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return cass_bool_t.fromValue(_camelCase$127(
      keyspace_meta,
    ));
  }

  late final _camelCase$127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassKeyspaceMeta>)>>('cass_keyspace_meta_is_virtual');
  late final _camelCase$127 = _camelCase$127Ptr
      .asFunction<int Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Gets the table metadata for the provided table name.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] table
  ///
  /// @return The metadata for a table. NULL if table does not exist.
  ffi.Pointer<CassTableMeta> camelCase$128(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> table,
  ) {
    return _camelCase$128(
      keyspace_meta,
      table,
    );
  }

  late final _camelCase$128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassTableMeta> Function(ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_keyspace_meta_table_by_name');
  late final _camelCase$128 = _camelCase$128Ptr.asFunction<
      ffi.Pointer<CassTableMeta> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_keyspace_meta_table_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] table
  /// @param[in] table_length
  /// @return same as cass_keyspace_meta_table_by_name()
  ///
  /// @see cass_keyspace_meta_table_by_name()
  ffi.Pointer<CassTableMeta> camelCase$129(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> table,
    int table_length,
  ) {
    return _camelCase$129(
      keyspace_meta,
      table,
      table_length,
    );
  }

  late final _camelCase$129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassTableMeta> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_keyspace_meta_table_by_name_n');
  late final _camelCase$129 = _camelCase$129Ptr.asFunction<
      ffi.Pointer<CassTableMeta> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the materialized view metadata for the provided view name.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] view
  ///
  /// @return The metadata for a view. NULL if view does not exist.
  ffi.Pointer<CassMaterializedViewMeta> camelCase$130(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> view,
  ) {
    return _camelCase$130(
      keyspace_meta,
      view,
    );
  }

  late final _camelCase$130Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassMaterializedViewMeta> Function(
                  ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>)>>(
      'cass_keyspace_meta_materialized_view_by_name');
  late final _camelCase$130 = _camelCase$130Ptr.asFunction<
      ffi.Pointer<CassMaterializedViewMeta> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_keyspace_meta_materialized_view_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] view
  /// @param[in] view_length
  /// @return same as cass_keyspace_meta_materialized_view_by_name()
  ///
  /// @see cass_keyspace_meta_materialized_view_by_name()
  ffi.Pointer<CassMaterializedViewMeta> camelCase$131(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> view,
    int view_length,
  ) {
    return _camelCase$131(
      keyspace_meta,
      view,
      view_length,
    );
  }

  late final _camelCase$131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassMaterializedViewMeta> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_keyspace_meta_materialized_view_by_name_n');
  late final _camelCase$131 = _camelCase$131Ptr.asFunction<
      ffi.Pointer<CassMaterializedViewMeta> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the data type for the provided type name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] type
  ///
  /// @return The data type for a user defined type. NULL if type does not exist.
  ffi.Pointer<CassDataType> camelCase$132(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> type,
  ) {
    return _camelCase$132(
      keyspace_meta,
      type,
    );
  }

  late final _camelCase$132Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_keyspace_meta_user_type_by_name');
  late final _camelCase$132 = _camelCase$132Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_keyspace_meta_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] type
  /// @param[in] type_length
  /// @return same as cass_keyspace_meta_type_by_name()
  ///
  /// @see cass_keyspace_meta_type_by_name()
  ffi.Pointer<CassDataType> camelCase$133(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> type,
    int type_length,
  ) {
    return _camelCase$133(
      keyspace_meta,
      type,
      type_length,
    );
  }

  late final _camelCase$133Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_keyspace_meta_user_type_by_name_n');
  late final _camelCase$133 = _camelCase$133Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the function metadata for the provided function name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] name
  /// @param[in] arguments A comma delimited list of CQL types (e.g "text,int,...")
  /// describing the function's signature.
  ///
  /// @return The data function for a user defined function. NULL if function does not exist.
  ffi.Pointer<CassFunctionMeta> camelCase$134(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> arguments,
  ) {
    return _camelCase$134(
      keyspace_meta,
      name,
      arguments,
    );
  }

  late final _camelCase$134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFunctionMeta> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cass_keyspace_meta_function_by_name');
  late final _camelCase$134 = _camelCase$134Ptr.asFunction<
      ffi.Pointer<CassFunctionMeta> Function(ffi.Pointer<CassKeyspaceMeta>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_keyspace_meta_function_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] arguments
  /// @param[in] arguments_length
  /// @return same as cass_keyspace_meta_function_by_name()
  ///
  /// @see cass_keyspace_meta_function_by_name()
  ffi.Pointer<CassFunctionMeta> camelCase$135(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<ffi.Char> arguments,
    int arguments_length,
  ) {
    return _camelCase$135(
      keyspace_meta,
      name,
      name_length,
      arguments,
      arguments_length,
    );
  }

  late final _camelCase$135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFunctionMeta> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_keyspace_meta_function_by_name_n');
  late final _camelCase$135 = _camelCase$135Ptr.asFunction<
      ffi.Pointer<CassFunctionMeta> Function(ffi.Pointer<CassKeyspaceMeta>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the aggregate metadata for the provided aggregate name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] name
  /// @param[in] arguments A comma delimited list of CQL types (e.g "text,int,...")
  /// describing the aggregate's signature.
  ///
  /// @return The data aggregate for a user defined aggregate. NULL if aggregate does not exist.
  ffi.Pointer<CassAggregateMeta> camelCase$136(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> arguments,
  ) {
    return _camelCase$136(
      keyspace_meta,
      name,
      arguments,
    );
  }

  late final _camelCase$136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassAggregateMeta> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cass_keyspace_meta_aggregate_by_name');
  late final _camelCase$136 = _camelCase$136Ptr.asFunction<
      ffi.Pointer<CassAggregateMeta> Function(ffi.Pointer<CassKeyspaceMeta>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_keyspace_meta_aggregate_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] arguments
  /// @param[in] arguments_length
  /// @return same as cass_keyspace_meta_aggregate_by_name()
  ///
  /// @see cass_keyspace_meta_aggregate_by_name()
  ffi.Pointer<CassAggregateMeta> camelCase$137(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<ffi.Char> arguments,
    int arguments_length,
  ) {
    return _camelCase$137(
      keyspace_meta,
      name,
      name_length,
      arguments,
      arguments_length,
    );
  }

  late final _camelCase$137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassAggregateMeta> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_keyspace_meta_aggregate_by_name_n');
  late final _camelCase$137 = _camelCase$137Ptr.asFunction<
      ffi.Pointer<CassAggregateMeta> Function(ffi.Pointer<CassKeyspaceMeta>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the column data found in the underlying "keyspaces" metadata table.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$138(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$138(
      keyspace_meta,
      name,
    );
  }

  late final _camelCase$138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_keyspace_meta_field_by_name');
  late final _camelCase$138 = _camelCase$138Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_keyspace_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_keyspace_meta_field_by_name()
  ///
  /// @see cass_keyspace_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$139(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$139(
      keyspace_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassKeyspaceMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_keyspace_meta_field_by_name_n');
  late final _camelCase$139 = _camelCase$139Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassKeyspaceMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the table.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$140(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$140(
      table_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$140Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_table_meta_name');
  late final _camelCase$140 = _camelCase$140Ptr.asFunction<
      void Function(ffi.Pointer<CassTableMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Determine if the table is a virtual table.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return cass_true is the table is virtual, otherwise cass_false
  cass_bool_t camelCase$141(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return cass_bool_t.fromValue(_camelCase$141(
      table_meta,
    ));
  }

  late final _camelCase$141Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassTableMeta>)>>('cass_table_meta_is_virtual');
  late final _camelCase$141 =
      _camelCase$141Ptr.asFunction<int Function(ffi.Pointer<CassTableMeta>)>();

  /// Gets the column metadata for the provided column name.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] column
  ///
  /// @return The metadata for a column. NULL if column does not exist.
  ffi.Pointer<CassColumnMeta> camelCase$142(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> column,
  ) {
    return _camelCase$142(
      table_meta,
      column,
    );
  }

  late final _camelCase$142Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_table_meta_column_by_name');
  late final _camelCase$142 = _camelCase$142Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_table_meta_column_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] column
  /// @param[in] column_length
  /// @return same as cass_table_meta_column_by_name()
  ///
  /// @see cass_table_meta_column_by_name()
  ffi.Pointer<CassColumnMeta> camelCase$143(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> column,
    int column_length,
  ) {
    return _camelCase$143(
      table_meta,
      column,
      column_length,
    );
  }

  late final _camelCase$143Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_table_meta_column_by_name_n');
  late final _camelCase$143 = _camelCase$143Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the total number of columns for the table.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return The total column count.
  int camelCase$144(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$144(
      table_meta,
    );
  }

  late final _camelCase$144Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_table_meta_column_count');
  late final _camelCase$144 =
      _camelCase$144Ptr.asFunction<int Function(ffi.Pointer<CassTableMeta>)>();

  /// Gets the column metadata for the provided index.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @return The metadata for a column. NULL returned if the index is out of range.
  ffi.Pointer<CassColumnMeta> camelCase$145(
    ffi.Pointer<CassTableMeta> table_meta,
    int index,
  ) {
    return _camelCase$145(
      table_meta,
      index,
    );
  }

  late final _camelCase$145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassTableMeta>, ffi.Size)>>('cass_table_meta_column');
  late final _camelCase$145 = _camelCase$145Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassTableMeta>, int)>();

  /// Gets the index metadata for the provided index name.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  ///
  /// @return The metadata for a index. NULL if index does not exist.
  ffi.Pointer<CassIndexMeta> camelCase$146(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> index,
  ) {
    return _camelCase$146(
      table_meta,
      index,
    );
  }

  late final _camelCase$146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIndexMeta> Function(ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_table_meta_index_by_name');
  late final _camelCase$146 = _camelCase$146Ptr.asFunction<
      ffi.Pointer<CassIndexMeta> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_table_meta_index_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @param[in] index_length
  /// @return same as cass_table_meta_index_by_name()
  ///
  /// @see cass_table_meta_index_by_name()
  ffi.Pointer<CassIndexMeta> camelCase$147(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> index,
    int index_length,
  ) {
    return _camelCase$147(
      table_meta,
      index,
      index_length,
    );
  }

  late final _camelCase$147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIndexMeta> Function(
              ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_table_meta_index_by_name_n');
  late final _camelCase$147 = _camelCase$147Ptr.asFunction<
      ffi.Pointer<CassIndexMeta> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the total number of indexes for the table.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return The total index count.
  int camelCase$148(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$148(
      table_meta,
    );
  }

  late final _camelCase$148Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_table_meta_index_count');
  late final _camelCase$148 =
      _camelCase$148Ptr.asFunction<int Function(ffi.Pointer<CassTableMeta>)>();

  /// Gets the index metadata for the provided index.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @return The metadata for a index. NULL returned if the index is out of range.
  ffi.Pointer<CassIndexMeta> camelCase$149(
    ffi.Pointer<CassTableMeta> table_meta,
    int index,
  ) {
    return _camelCase$149(
      table_meta,
      index,
    );
  }

  late final _camelCase$149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIndexMeta> Function(
              ffi.Pointer<CassTableMeta>, ffi.Size)>>('cass_table_meta_index');
  late final _camelCase$149 = _camelCase$149Ptr.asFunction<
      ffi.Pointer<CassIndexMeta> Function(ffi.Pointer<CassTableMeta>, int)>();

  /// Gets the materialized view metadata for the provided view name.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] view
  ///
  /// @return The metadata for a view. NULL if view does not exist.
  ffi.Pointer<CassMaterializedViewMeta> camelCase$150(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> view,
  ) {
    return _camelCase$150(
      table_meta,
      view,
    );
  }

  late final _camelCase$150Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassMaterializedViewMeta> Function(
                  ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>)>>(
      'cass_table_meta_materialized_view_by_name');
  late final _camelCase$150 = _camelCase$150Ptr.asFunction<
      ffi.Pointer<CassMaterializedViewMeta> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_table_meta_materialized_view_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] view
  /// @param[in] view_length
  /// @return same as cass_table_meta_materialized_view_by_name()
  ///
  /// @see cass_table_meta_materialized_view_by_name()
  ffi.Pointer<CassMaterializedViewMeta> camelCase$151(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> view,
    int view_length,
  ) {
    return _camelCase$151(
      table_meta,
      view,
      view_length,
    );
  }

  late final _camelCase$151Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassMaterializedViewMeta> Function(
              ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_table_meta_materialized_view_by_name_n');
  late final _camelCase$151 = _camelCase$151Ptr.asFunction<
      ffi.Pointer<CassMaterializedViewMeta> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the total number of views for the table.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return The total view count.
  int camelCase$152(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$152(
      table_meta,
    );
  }

  late final _camelCase$152Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_table_meta_materialized_view_count');
  late final _camelCase$152 =
      _camelCase$152Ptr.asFunction<int Function(ffi.Pointer<CassTableMeta>)>();

  /// Gets the materialized view metadata for the provided index.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @return The metadata for a view. NULL returned if the index is out of range.
  ffi.Pointer<CassMaterializedViewMeta> camelCase$153(
    ffi.Pointer<CassTableMeta> table_meta,
    int index,
  ) {
    return _camelCase$153(
      table_meta,
      index,
    );
  }

  late final _camelCase$153Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassMaterializedViewMeta> Function(
              ffi.Pointer<CassTableMeta>,
              ffi.Size)>>('cass_table_meta_materialized_view');
  late final _camelCase$153 = _camelCase$153Ptr.asFunction<
      ffi.Pointer<CassMaterializedViewMeta> Function(
          ffi.Pointer<CassTableMeta>, int)>();

  /// Gets the number of columns for the table's partition key.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return The count for the number of columns in the partition key.
  int camelCase$154(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$154(
      table_meta,
    );
  }

  late final _camelCase$154Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_table_meta_partition_key_count');
  late final _camelCase$154 =
      _camelCase$154Ptr.asFunction<int Function(ffi.Pointer<CassTableMeta>)>();

  /// Gets the partition key column metadata for the provided index.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @return The metadata for a column. NULL returned if the index is out of range.
  ///
  /// @see cass_table_meta_partition_key_count()
  ffi.Pointer<CassColumnMeta> camelCase$155(
    ffi.Pointer<CassTableMeta> table_meta,
    int index,
  ) {
    return _camelCase$155(
      table_meta,
      index,
    );
  }

  late final _camelCase$155Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassTableMeta>,
              ffi.Size)>>('cass_table_meta_partition_key');
  late final _camelCase$155 = _camelCase$155Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassTableMeta>, int)>();

  /// Gets the number of columns for the table's clustering key.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return The count for the number of columns in the clustering key.
  int camelCase$156(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$156(
      table_meta,
    );
  }

  late final _camelCase$156Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_table_meta_clustering_key_count');
  late final _camelCase$156 =
      _camelCase$156Ptr.asFunction<int Function(ffi.Pointer<CassTableMeta>)>();

  /// Gets the clustering key column metadata for the provided index.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @return The metadata for a column. NULL returned if the index is out of range.
  ///
  /// @see cass_table_meta_clustering_key_count()
  ffi.Pointer<CassColumnMeta> camelCase$157(
    ffi.Pointer<CassTableMeta> table_meta,
    int index,
  ) {
    return _camelCase$157(
      table_meta,
      index,
    );
  }

  late final _camelCase$157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassTableMeta>,
              ffi.Size)>>('cass_table_meta_clustering_key');
  late final _camelCase$157 = _camelCase$157Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassTableMeta>, int)>();

  /// Gets the clustering order column metadata for the provided index.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] index
  /// @return The clustering order for a column.
  /// CASS_CLUSTERING_ORDER_NONE returned if the index is out of range.
  ///
  /// @see cass_table_meta_clustering_key_count()
  CassClusteringOrder_ camelCase$158(
    ffi.Pointer<CassTableMeta> table_meta,
    int index,
  ) {
    return CassClusteringOrder_.fromValue(_camelCase$158(
      table_meta,
      index,
    ));
  }

  late final _camelCase$158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTableMeta>,
              ffi.Size)>>('cass_table_meta_clustering_key_order');
  late final _camelCase$158 = _camelCase$158Ptr
      .asFunction<int Function(ffi.Pointer<CassTableMeta>, int)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the column data found in the underlying "tables" metadata table.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$159(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$159(
      table_meta,
      name,
    );
  }

  late final _camelCase$159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_table_meta_field_by_name');
  late final _camelCase$159 = _camelCase$159Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_table_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_table_meta_field_by_name()
  ///
  /// @see cass_table_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$160(
    ffi.Pointer<CassTableMeta> table_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$160(
      table_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassTableMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_table_meta_field_by_name_n');
  late final _camelCase$160 = _camelCase$160Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassTableMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the column metadata for the provided column name.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] column
  ///
  /// @return The metadata for a column. NULL if column does not exist.
  ffi.Pointer<CassColumnMeta> camelCase$161(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    ffi.Pointer<ffi.Char> column,
  ) {
    return _camelCase$161(
      view_meta,
      column,
    );
  }

  late final _camelCase$161Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassColumnMeta> Function(
                  ffi.Pointer<CassMaterializedViewMeta>,
                  ffi.Pointer<ffi.Char>)>>(
      'cass_materialized_view_meta_column_by_name');
  late final _camelCase$161 = _camelCase$161Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassMaterializedViewMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_materialized_view_meta_column_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] column
  /// @param[in] column_length
  /// @return same as cass_materialized_view_meta_column_by_name()
  ///
  /// @see cass_materialized_view_meta_column_by_name()
  ffi.Pointer<CassColumnMeta> camelCase$162(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    ffi.Pointer<ffi.Char> column,
    int column_length,
  ) {
    return _camelCase$162(
      view_meta,
      column,
      column_length,
    );
  }

  late final _camelCase$162Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_materialized_view_meta_column_by_name_n');
  late final _camelCase$162 = _camelCase$162Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassMaterializedViewMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the view.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$163(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$163(
      view_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$163Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_materialized_view_meta_name');
  late final _camelCase$163 = _camelCase$163Ptr.asFunction<
      void Function(ffi.Pointer<CassMaterializedViewMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the base table of the view.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  ///
  /// @return The base table for the view.
  ffi.Pointer<CassTableMeta> camelCase$164(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
  ) {
    return _camelCase$164(
      view_meta,
    );
  }

  late final _camelCase$164Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassTableMeta> Function(
                  ffi.Pointer<CassMaterializedViewMeta>)>>(
      'cass_materialized_view_meta_base_table');
  late final _camelCase$164 = _camelCase$164Ptr.asFunction<
      ffi.Pointer<CassTableMeta> Function(
          ffi.Pointer<CassMaterializedViewMeta>)>();

  /// Gets the total number of columns for the view.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @return The total column count.
  int camelCase$165(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
  ) {
    return _camelCase$165(
      view_meta,
    );
  }

  late final _camelCase$165Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<CassMaterializedViewMeta>)>>(
      'cass_materialized_view_meta_column_count');
  late final _camelCase$165 = _camelCase$165Ptr
      .asFunction<int Function(ffi.Pointer<CassMaterializedViewMeta>)>();

  /// Gets the column metadata for the provided index.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] index
  /// @return The metadata for a column. NULL returned if the index is out of range.
  ffi.Pointer<CassColumnMeta> camelCase$166(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    int index,
  ) {
    return _camelCase$166(
      view_meta,
      index,
    );
  }

  late final _camelCase$166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Size)>>('cass_materialized_view_meta_column');
  late final _camelCase$166 = _camelCase$166Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassMaterializedViewMeta>, int)>();

  /// Gets the number of columns for the view's partition key.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @return The count for the number of columns in the partition key.
  int camelCase$167(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
  ) {
    return _camelCase$167(
      view_meta,
    );
  }

  late final _camelCase$167Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<CassMaterializedViewMeta>)>>(
      'cass_materialized_view_meta_partition_key_count');
  late final _camelCase$167 = _camelCase$167Ptr
      .asFunction<int Function(ffi.Pointer<CassMaterializedViewMeta>)>();

  /// Gets the partition key column metadata for the provided index.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] index
  /// @return The metadata for a column. NULL returned if the index is out of range.
  ffi.Pointer<CassColumnMeta> camelCase$168(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    int index,
  ) {
    return _camelCase$168(
      view_meta,
      index,
    );
  }

  late final _camelCase$168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Size)>>('cass_materialized_view_meta_partition_key');
  late final _camelCase$168 = _camelCase$168Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassMaterializedViewMeta>, int)>();

  /// Gets the number of columns for the view's clustering key.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @return The count for the number of columns in the clustering key.
  int camelCase$169(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
  ) {
    return _camelCase$169(
      view_meta,
    );
  }

  late final _camelCase$169Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<CassMaterializedViewMeta>)>>(
      'cass_materialized_view_meta_clustering_key_count');
  late final _camelCase$169 = _camelCase$169Ptr
      .asFunction<int Function(ffi.Pointer<CassMaterializedViewMeta>)>();

  /// Gets the clustering key column metadata for the provided index.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] index
  /// @return The metadata for a column. NULL returned if the index is out of range.
  ffi.Pointer<CassColumnMeta> camelCase$170(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    int index,
  ) {
    return _camelCase$170(
      view_meta,
      index,
    );
  }

  late final _camelCase$170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Size)>>('cass_materialized_view_meta_clustering_key');
  late final _camelCase$170 = _camelCase$170Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(
          ffi.Pointer<CassMaterializedViewMeta>, int)>();

  /// Gets the clustering order column metadata for the provided index.
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] index
  /// @return The clustering order for a column.
  /// CASS_CLUSTERING_ORDER_NONE returned if the index is out of range.
  ///
  /// @see cass_materialized_view_meta_clustering_key_count()
  CassClusteringOrder_ camelCase$171(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    int index,
  ) {
    return CassClusteringOrder_.fromValue(_camelCase$171(
      view_meta,
      index,
    ));
  }

  late final _camelCase$171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Size)>>('cass_materialized_view_meta_clustering_key_order');
  late final _camelCase$171 = _camelCase$171Ptr
      .asFunction<int Function(ffi.Pointer<CassMaterializedViewMeta>, int)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the column data found in the underlying "views" metadata view.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$172(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$172(
      view_meta,
      name,
    );
  }

  late final _camelCase$172Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassValue> Function(
                  ffi.Pointer<CassMaterializedViewMeta>,
                  ffi.Pointer<ffi.Char>)>>(
      'cass_materialized_view_meta_field_by_name');
  late final _camelCase$172 = _camelCase$172Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassMaterializedViewMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_materialized_view_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_materialized_view_meta_field_by_name()
  ///
  /// @see cass_materialized_view_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$173(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$173(
      view_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassMaterializedViewMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_materialized_view_meta_field_by_name_n');
  late final _camelCase$173 = _camelCase$173Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassMaterializedViewMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the column.
  ///
  /// @public @memberof CassColumnMeta
  ///
  /// @param[in] column_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$174(
    ffi.Pointer<CassColumnMeta> column_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$174(
      column_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassColumnMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_column_meta_name');
  late final _camelCase$174 = _camelCase$174Ptr.asFunction<
      void Function(ffi.Pointer<CassColumnMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the type of the column.
  ///
  /// @public @memberof CassColumnMeta
  ///
  /// @param[in] column_meta
  /// @return The column's type.
  CassColumnType_ camelCase$175(
    ffi.Pointer<CassColumnMeta> column_meta,
  ) {
    return CassColumnType_.fromValue(_camelCase$175(
      column_meta,
    ));
  }

  late final _camelCase$175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassColumnMeta>)>>('cass_column_meta_type');
  late final _camelCase$175 =
      _camelCase$175Ptr.asFunction<int Function(ffi.Pointer<CassColumnMeta>)>();

  /// Gets the data type of the column.
  ///
  /// @public @memberof CassColumnMeta
  ///
  /// @param[in] column_meta
  /// @return The column's data type.
  ffi.Pointer<CassDataType> camelCase$176(
    ffi.Pointer<CassColumnMeta> column_meta,
  ) {
    return _camelCase$176(
      column_meta,
    );
  }

  late final _camelCase$176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassColumnMeta>)>>('cass_column_meta_data_type');
  late final _camelCase$176 = _camelCase$176Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassColumnMeta>)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the column data found in the underlying "columns" metadata table.
  ///
  /// @public @memberof CassColumnMeta
  ///
  /// @param[in] column_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$177(
    ffi.Pointer<CassColumnMeta> column_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$177(
      column_meta,
      name,
    );
  }

  late final _camelCase$177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassColumnMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_column_meta_field_by_name');
  late final _camelCase$177 = _camelCase$177Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassColumnMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_column_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassColumnMeta
  ///
  /// @param[in] column_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_column_meta_field_by_name()
  ///
  /// @see cass_column_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$178(
    ffi.Pointer<CassColumnMeta> column_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$178(
      column_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassColumnMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_column_meta_field_by_name_n');
  late final _camelCase$178 = _camelCase$178Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassColumnMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the index.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$179(
    ffi.Pointer<CassIndexMeta> index_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$179(
      index_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassIndexMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_index_meta_name');
  late final _camelCase$179 = _camelCase$179Ptr.asFunction<
      void Function(ffi.Pointer<CassIndexMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the type of the index.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @return The index's type.
  CassIndexType_ camelCase$180(
    ffi.Pointer<CassIndexMeta> index_meta,
  ) {
    return CassIndexType_.fromValue(_camelCase$180(
      index_meta,
    ));
  }

  late final _camelCase$180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassIndexMeta>)>>('cass_index_meta_type');
  late final _camelCase$180 =
      _camelCase$180Ptr.asFunction<int Function(ffi.Pointer<CassIndexMeta>)>();

  /// Gets the target of the index.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @param[out] target
  /// @param[out] target_length
  void camelCase$181(
    ffi.Pointer<CassIndexMeta> index_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> target,
    ffi.Pointer<ffi.Size> target_length,
  ) {
    return _camelCase$181(
      index_meta,
      target,
      target_length,
    );
  }

  late final _camelCase$181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassIndexMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_index_meta_target');
  late final _camelCase$181 = _camelCase$181Ptr.asFunction<
      void Function(ffi.Pointer<CassIndexMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the options of the index.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @return The index's options.
  ffi.Pointer<CassValue> camelCase$182(
    ffi.Pointer<CassIndexMeta> index_meta,
  ) {
    return _camelCase$182(
      index_meta,
    );
  }

  late final _camelCase$182Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassIndexMeta>)>>('cass_index_meta_options');
  late final _camelCase$182 = _camelCase$182Ptr.asFunction<
      ffi.Pointer<CassValue> Function(ffi.Pointer<CassIndexMeta>)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the index data found in the underlying "indexes" metadata table.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$183(
    ffi.Pointer<CassIndexMeta> index_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$183(
      index_meta,
      name,
    );
  }

  late final _camelCase$183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassIndexMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_index_meta_field_by_name');
  late final _camelCase$183 = _camelCase$183Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassIndexMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_index_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_index_meta_field_by_name()
  ///
  /// @see cass_index_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$184(
    ffi.Pointer<CassIndexMeta> index_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$184(
      index_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$184Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassIndexMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_index_meta_field_by_name_n');
  late final _camelCase$184 = _camelCase$184Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassIndexMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the function.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$185(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$185(
      function_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_function_meta_name');
  late final _camelCase$185 = _camelCase$185Ptr.asFunction<
      void Function(ffi.Pointer<CassFunctionMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the full name of the function. The full name includes the
  /// function's name and the function's signature:
  /// "name(type1 type2.. typeN)".
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[out] full_name
  /// @param[out] full_name_length
  void camelCase$186(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> full_name,
    ffi.Pointer<ffi.Size> full_name_length,
  ) {
    return _camelCase$186(
      function_meta,
      full_name,
      full_name_length,
    );
  }

  late final _camelCase$186Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_function_meta_full_name');
  late final _camelCase$186 = _camelCase$186Ptr.asFunction<
      void Function(ffi.Pointer<CassFunctionMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the body of the function.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[out] body
  /// @param[out] body_length
  void camelCase$187(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> body,
    ffi.Pointer<ffi.Size> body_length,
  ) {
    return _camelCase$187(
      function_meta,
      body,
      body_length,
    );
  }

  late final _camelCase$187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_function_meta_body');
  late final _camelCase$187 = _camelCase$187Ptr.asFunction<
      void Function(ffi.Pointer<CassFunctionMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the language of the function.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[out] language
  /// @param[out] language_length
  void camelCase$188(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> language,
    ffi.Pointer<ffi.Size> language_length,
  ) {
    return _camelCase$188(
      function_meta,
      language,
      language_length,
    );
  }

  late final _camelCase$188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_function_meta_language');
  late final _camelCase$188 = _camelCase$188Ptr.asFunction<
      void Function(ffi.Pointer<CassFunctionMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets whether a function is called on "null".
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @return cass_true if a function is called on null, otherwise cass_false.
  cass_bool_t camelCase$189(
    ffi.Pointer<CassFunctionMeta> function_meta,
  ) {
    return cass_bool_t.fromValue(_camelCase$189(
      function_meta,
    ));
  }

  late final _camelCase$189Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassFunctionMeta>)>>(
      'cass_function_meta_called_on_null_input');
  late final _camelCase$189 = _camelCase$189Ptr
      .asFunction<int Function(ffi.Pointer<CassFunctionMeta>)>();

  /// Gets the number of arguments this function takes.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @return The number of arguments.
  int camelCase$190(
    ffi.Pointer<CassFunctionMeta> function_meta,
  ) {
    return _camelCase$190(
      function_meta,
    );
  }

  late final _camelCase$190Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassFunctionMeta>)>>(
      'cass_function_meta_argument_count');
  late final _camelCase$190 = _camelCase$190Ptr
      .asFunction<int Function(ffi.Pointer<CassFunctionMeta>)>();

  /// Gets the function's argument name and type for the provided index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[in] index
  /// @param[out] name
  /// @param[out] name_length
  /// @param[out] type
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$191(
    ffi.Pointer<CassFunctionMeta> function_meta,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
    ffi.Pointer<ffi.Pointer<CassDataType>> type,
  ) {
    return CassError_.fromValue(_camelCase$191(
      function_meta,
      index,
      name,
      name_length,
      type,
    ));
  }

  late final _camelCase$191Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassFunctionMeta>,
                  ffi.Size,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<CassDataType>>)>>(
      'cass_function_meta_argument');
  late final _camelCase$191 = _camelCase$191Ptr.asFunction<
      int Function(
          ffi.Pointer<CassFunctionMeta>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<CassDataType>>)>();

  /// Gets the function's argument and type for the provided name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[in] name
  /// @return A data type. NULL if the argument does not exist.
  ffi.Pointer<CassDataType> camelCase$192(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$192(
      function_meta,
      name,
    );
  }

  late final _camelCase$192Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassDataType> Function(
                  ffi.Pointer<CassFunctionMeta>, ffi.Pointer<ffi.Char>)>>(
      'cass_function_meta_argument_type_by_name');
  late final _camelCase$192 = _camelCase$192Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassFunctionMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_function_meta_argument_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_function_meta_argument_type_by_name()
  ///
  /// @see cass_function_meta_argument_type_by_name()
  ffi.Pointer<CassDataType> camelCase$193(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$193(
      function_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_function_meta_argument_type_by_name_n');
  late final _camelCase$193 = _camelCase$193Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassFunctionMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the return type of the function.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @return The data type returned by the function.
  ffi.Pointer<CassDataType> camelCase$194(
    ffi.Pointer<CassFunctionMeta> function_meta,
  ) {
    return _camelCase$194(
      function_meta,
    );
  }

  late final _camelCase$194Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassDataType> Function(
                  ffi.Pointer<CassFunctionMeta>)>>(
      'cass_function_meta_return_type');
  late final _camelCase$194 = _camelCase$194Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassFunctionMeta>)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the column data found in the underlying "functions" metadata table.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$195(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$195(
      function_meta,
      name,
    );
  }

  late final _camelCase$195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_function_meta_field_by_name');
  late final _camelCase$195 = _camelCase$195Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassFunctionMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_function_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_function_meta_field_by_name()
  ///
  /// @see cass_function_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$196(
    ffi.Pointer<CassFunctionMeta> function_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$196(
      function_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassFunctionMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_function_meta_field_by_name_n');
  late final _camelCase$196 = _camelCase$196Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassFunctionMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the name of the aggregate.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @param[out] name
  /// @param[out] name_length
  void camelCase$197(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return _camelCase$197(
      aggregate_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassAggregateMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_aggregate_meta_name');
  late final _camelCase$197 = _camelCase$197Ptr.asFunction<
      void Function(ffi.Pointer<CassAggregateMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the full name of the aggregate. The full name includes the
  /// aggregate's name and the aggregate's signature:
  /// "name(type1 type2.. typeN)".
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @param[out] full_name
  /// @param[out] full_name_length
  void camelCase$198(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
    ffi.Pointer<ffi.Pointer<ffi.Char>> full_name,
    ffi.Pointer<ffi.Size> full_name_length,
  ) {
    return _camelCase$198(
      aggregate_meta,
      full_name,
      full_name_length,
    );
  }

  late final _camelCase$198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassAggregateMeta>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_aggregate_meta_full_name');
  late final _camelCase$198 = _camelCase$198Ptr.asFunction<
      void Function(ffi.Pointer<CassAggregateMeta>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the number of arguments this aggregate takes.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return The number of arguments.
  int camelCase$199(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$199(
      aggregate_meta,
    );
  }

  late final _camelCase$199Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<CassAggregateMeta>)>>(
      'cass_aggregate_meta_argument_count');
  late final _camelCase$199 = _camelCase$199Ptr
      .asFunction<int Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Gets the aggregate's argument type for the provided index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @param[in] index
  /// @return The data type for argument. NULL returned if the index is out of range.
  ffi.Pointer<CassDataType> camelCase$200(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
    int index,
  ) {
    return _camelCase$200(
      aggregate_meta,
      index,
    );
  }

  late final _camelCase$200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(ffi.Pointer<CassAggregateMeta>,
              ffi.Size)>>('cass_aggregate_meta_argument_type');
  late final _camelCase$200 = _camelCase$200Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassAggregateMeta>, int)>();

  /// Gets the return type of the aggregate.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return The data type returned by the aggregate.
  ffi.Pointer<CassDataType> camelCase$201(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$201(
      aggregate_meta,
    );
  }

  late final _camelCase$201Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassDataType> Function(
                  ffi.Pointer<CassAggregateMeta>)>>(
      'cass_aggregate_meta_return_type');
  late final _camelCase$201 = _camelCase$201Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Gets the state type of the aggregate.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return The data type of the aggregate's state.
  ffi.Pointer<CassDataType> camelCase$202(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$202(
      aggregate_meta,
    );
  }

  late final _camelCase$202Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassDataType> Function(
                  ffi.Pointer<CassAggregateMeta>)>>(
      'cass_aggregate_meta_state_type');
  late final _camelCase$202 = _camelCase$202Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Gets the function metadata for the aggregate's state function.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return The function metadata for the state function.
  ffi.Pointer<CassFunctionMeta> camelCase$203(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$203(
      aggregate_meta,
    );
  }

  late final _camelCase$203Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassFunctionMeta> Function(
                  ffi.Pointer<CassAggregateMeta>)>>(
      'cass_aggregate_meta_state_func');
  late final _camelCase$203 = _camelCase$203Ptr.asFunction<
      ffi.Pointer<CassFunctionMeta> Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Gets the function metadata for the aggregates's final function.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return The function metadata for the final function.
  ffi.Pointer<CassFunctionMeta> camelCase$204(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$204(
      aggregate_meta,
    );
  }

  late final _camelCase$204Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassFunctionMeta> Function(
                  ffi.Pointer<CassAggregateMeta>)>>(
      'cass_aggregate_meta_final_func');
  late final _camelCase$204 = _camelCase$204Ptr.asFunction<
      ffi.Pointer<CassFunctionMeta> Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Gets the initial condition value for the aggregate.
  ///
  /// @cassandra{2.2+}
  ///
  /// <b>Note:</b> The value of the initial condition will always be
  /// a "varchar" type for Cassandra 3.0+.
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return The value of the initial condition.
  ffi.Pointer<CassValue> camelCase$205(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$205(
      aggregate_meta,
    );
  }

  late final _camelCase$205Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassValue> Function(ffi.Pointer<CassAggregateMeta>)>>(
      'cass_aggregate_meta_init_cond');
  late final _camelCase$205 = _camelCase$205Ptr.asFunction<
      ffi.Pointer<CassValue> Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Gets a metadata field for the provided name. Metadata fields allow direct
  /// access to the column data found in the underlying "aggregates" metadata table.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @param[in] name
  /// @return A metadata field value. NULL if the field does not exist.
  ffi.Pointer<CassValue> camelCase$206(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$206(
      aggregate_meta,
      name,
    );
  }

  late final _camelCase$206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassAggregateMeta>,
              ffi.Pointer<ffi.Char>)>>('cass_aggregate_meta_field_by_name');
  late final _camelCase$206 = _camelCase$206Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassAggregateMeta>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_aggregate_meta_field_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_aggregate_meta_field_by_name()
  ///
  /// @see cass_aggregate_meta_field_by_name()
  ffi.Pointer<CassValue> camelCase$207(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$207(
      aggregate_meta,
      name,
      name_length,
    );
  }

  late final _camelCase$207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassAggregateMeta>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_aggregate_meta_field_by_name_n');
  late final _camelCase$207 = _camelCase$207Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassAggregateMeta>, ffi.Pointer<ffi.Char>, int)>();

  /// Creates a new SSL context.
  ///
  /// @public @memberof CassSsl
  ///
  /// @return Returns a SSL context that must be freed.
  ///
  /// @see cass_ssl_free()
  ffi.Pointer<CassSsl> camelCase$208() {
    return _camelCase$208();
  }

  late final _camelCase$208Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassSsl> Function()>>(
          'cass_ssl_new');
  late final _camelCase$208 =
      _camelCase$208Ptr.asFunction<ffi.Pointer<CassSsl> Function()>();

  /// Creates a new SSL context <b>without</b> initializing the underlying library
  /// implementation. The integrating application is responsible for
  /// initializing the underlying SSL implementation. The driver uses the SSL
  /// implmentation from several threads concurrently so it's important that it's
  /// properly setup for multithreaded use e.g. lock callbacks for OpenSSL.
  ///
  /// <b>Important:</b> The SSL library must be initialized before calling this
  /// function.
  ///
  /// When using OpenSSL the following components need to be initialized:
  ///
  /// SSL_library_init();
  /// SSL_load_error_strings();
  /// OpenSSL_add_all_algorithms();
  ///
  /// The following thread-safety callbacks also need to be set:
  ///
  /// CRYPTO_set_locking_callback(...);
  /// CRYPTO_set_id_callback(...);
  ///
  /// @public @memberof CassSsl
  ///
  /// @return Returns a SSL context that must be freed.
  ///
  /// @see cass_ssl_new()
  /// @see cass_ssl_free()
  ffi.Pointer<CassSsl> camelCase$209() {
    return _camelCase$209();
  }

  late final _camelCase$209Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassSsl> Function()>>(
          'cass_ssl_new_no_lib_init');
  late final _camelCase$209 =
      _camelCase$209Ptr.asFunction<ffi.Pointer<CassSsl> Function()>();

  /// Frees a SSL context instance.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  void camelCase$210(
    ffi.Pointer<CassSsl> ssl,
  ) {
    return _camelCase$210(
      ssl,
    );
  }

  late final _camelCase$210Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassSsl>)>>(
          'cass_ssl_free');
  late final _camelCase$210 =
      _camelCase$210Ptr.asFunction<void Function(ffi.Pointer<CassSsl>)>();

  /// Adds a trusted certificate. This is used to verify
  /// the peer's certificate.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] cert PEM formatted certificate string
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$211(
    ffi.Pointer<CassSsl> ssl,
    ffi.Pointer<ffi.Char> cert,
  ) {
    return CassError_.fromValue(_camelCase$211(
      ssl,
      cert,
    ));
  }

  late final _camelCase$211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassSsl>,
              ffi.Pointer<ffi.Char>)>>('cass_ssl_add_trusted_cert');
  late final _camelCase$211 = _camelCase$211Ptr
      .asFunction<int Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_ssl_add_trusted_cert(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] cert
  /// @param[in] cert_length
  /// @return same as cass_ssl_add_trusted_cert()
  ///
  /// @see cass_ssl_add_trusted_cert()
  CassError_ camelCase$212(
    ffi.Pointer<CassSsl> ssl,
    ffi.Pointer<ffi.Char> cert,
    int cert_length,
  ) {
    return CassError_.fromValue(_camelCase$212(
      ssl,
      cert,
      cert_length,
    ));
  }

  late final _camelCase$212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_ssl_add_trusted_cert_n');
  late final _camelCase$212 = _camelCase$212Ptr.asFunction<
      int Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets verification performed on the peer's certificate.
  ///
  /// CASS_SSL_VERIFY_NONE - No verification is performed
  /// CASS_SSL_VERIFY_PEER_CERT - Certificate is present and valid
  /// CASS_SSL_VERIFY_PEER_IDENTITY - IP address matches the certificate's
  /// common name or one of its subject alternative names. This implies the
  /// certificate is also present.
  /// CASS_SSL_VERIFY_PEER_IDENTITY_DNS -  Do not use. This option requires the
  /// use of reverse DNS lookup which is not sufficient to protect against
  /// man-in-the-middle attacks.
  ///
  /// <b>Default:</b> CASS_SSL_VERIFY_PEER_CERT
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] flags
  /// @return CASS_OK if successful, otherwise an error occurred
  void camelCase$213(
    ffi.Pointer<CassSsl> ssl,
    int flags,
  ) {
    return _camelCase$213(
      ssl,
      flags,
    );
  }

  late final _camelCase$213Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassSsl>, ffi.Int)>>(
      'cass_ssl_set_verify_flags');
  late final _camelCase$213 =
      _camelCase$213Ptr.asFunction<void Function(ffi.Pointer<CassSsl>, int)>();

  /// Set client-side certificate chain. This is used to authenticate
  /// the client on the server-side. This should contain the entire
  /// Certificate chain starting with the certificate itself.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] cert PEM formatted certificate string
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$214(
    ffi.Pointer<CassSsl> ssl,
    ffi.Pointer<ffi.Char> cert,
  ) {
    return CassError_.fromValue(_camelCase$214(
      ssl,
      cert,
    ));
  }

  late final _camelCase$214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassSsl>,
              ffi.Pointer<ffi.Char>)>>('cass_ssl_set_cert');
  late final _camelCase$214 = _camelCase$214Ptr
      .asFunction<int Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_ssl_set_cert(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] cert
  /// @param[in] cert_length
  /// @return same as cass_ssl_set_cert()
  ///
  /// @see cass_ssl_set_cert()
  CassError_ camelCase$215(
    ffi.Pointer<CassSsl> ssl,
    ffi.Pointer<ffi.Char> cert,
    int cert_length,
  ) {
    return CassError_.fromValue(_camelCase$215(
      ssl,
      cert,
      cert_length,
    ));
  }

  late final _camelCase$215Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_ssl_set_cert_n');
  late final _camelCase$215 = _camelCase$215Ptr.asFunction<
      int Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>, int)>();

  /// Set client-side private key. This is used to authenticate
  /// the client on the server-side.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] key PEM formatted key string
  /// @param[in] password used to decrypt key
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$216(
    ffi.Pointer<CassSsl> ssl,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> password,
  ) {
    return CassError_.fromValue(_camelCase$216(
      ssl,
      key,
      password,
    ));
  }

  late final _camelCase$216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cass_ssl_set_private_key');
  late final _camelCase$216 = _camelCase$216Ptr.asFunction<
      int Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Same as cass_ssl_set_private_key(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] key
  /// @param[in] key_length
  /// @param[in] password
  /// @param[in] password_length
  /// @return same as cass_ssl_set_private_key()
  ///
  /// @see cass_ssl_set_private_key()
  CassError_ camelCase$217(
    ffi.Pointer<CassSsl> ssl,
    ffi.Pointer<ffi.Char> key,
    int key_length,
    ffi.Pointer<ffi.Char> password,
    int password_length,
  ) {
    return CassError_.fromValue(_camelCase$217(
      ssl,
      key,
      key_length,
      password,
      password_length,
    ));
  }

  late final _camelCase$217Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassSsl>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_ssl_set_private_key_n');
  late final _camelCase$217 = _camelCase$217Ptr.asFunction<
      int Function(ffi.Pointer<CassSsl>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  /// Set minimum supported client-side protocol version. This will prevent the
  /// connection using protocol versions earlier than the specified one. Useful
  /// for preventing TLS downgrade attacks.
  ///
  /// @public @memberof CassSsl
  ///
  /// @param[in] ssl
  /// @param[in] min_version
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$218(
    ffi.Pointer<CassSsl> ssl,
    CassSslTlsVersion_ min_version,
  ) {
    return CassError_.fromValue(_camelCase$218(
      ssl,
      min_version.value,
    ));
  }

  late final _camelCase$218Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassSsl>,
              ffi.UnsignedInt)>>('cass_ssl_set_min_protocol_version');
  late final _camelCase$218 =
      _camelCase$218Ptr.asFunction<int Function(ffi.Pointer<CassSsl>, int)>();

  /// Gets the IP address of the host being authenticated.
  ///
  /// @param[in] auth
  /// @param[out] address
  ///
  /// @public @memberof CassAuthenticator
  void camelCase$219(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<CassInet> address,
  ) {
    return _camelCase$219(
      auth,
      address,
    );
  }

  late final _camelCase$219Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<CassInet>)>>('cass_authenticator_address');
  late final _camelCase$219 = _camelCase$219Ptr.asFunction<
      void Function(ffi.Pointer<CassAuthenticator>, ffi.Pointer<CassInet>)>();

  /// Gets the hostname of the host being authenticated.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[out] length
  /// @return A null-terminated string.
  ffi.Pointer<ffi.Char> camelCase$220(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Size> length,
  ) {
    return _camelCase$220(
      auth,
      length,
    );
  }

  late final _camelCase$220Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<ffi.Size>)>>('cass_authenticator_hostname');
  late final _camelCase$220 = _camelCase$220Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<CassAuthenticator>, ffi.Pointer<ffi.Size>)>();

  /// Gets the class name for the server-side IAuthentication implementation.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[out] length
  /// @return A null-terminated string.
  ffi.Pointer<ffi.Char> camelCase$221(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Size> length,
  ) {
    return _camelCase$221(
      auth,
      length,
    );
  }

  late final _camelCase$221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<ffi.Size>)>>('cass_authenticator_class_name');
  late final _camelCase$221 = _camelCase$221Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<CassAuthenticator>, ffi.Pointer<ffi.Size>)>();

  /// Gets the user data created during the authenticator exchange. This
  /// is set using cass_authenticator_set_exchange_data().
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @return User specified exchange data previously set by
  /// cass_authenticator_set_exchange_data().
  ///
  /// @see cass_authenticator_set_exchange_data()
  ffi.Pointer<ffi.Void> camelCase$222(
    ffi.Pointer<CassAuthenticator> auth,
  ) {
    return _camelCase$222(
      auth,
    );
  }

  late final _camelCase$222Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<CassAuthenticator>)>>(
      'cass_authenticator_exchange_data');
  late final _camelCase$222 = _camelCase$222Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<CassAuthenticator>)>();

  /// Sets the user data to be used during the authenticator exchange.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[in] exchange_data
  ///
  /// @see cass_authenticator_exchange_data()
  void camelCase$223(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Void> exchange_data,
  ) {
    return _camelCase$223(
      auth,
      exchange_data,
    );
  }

  late final _camelCase$223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<ffi.Void>)>>('cass_authenticator_set_exchange_data');
  late final _camelCase$223 = _camelCase$223Ptr.asFunction<
      void Function(ffi.Pointer<CassAuthenticator>, ffi.Pointer<ffi.Void>)>();

  /// Gets a response token buffer of the provided size.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[in] size
  /// @return A buffer to copy the response token.
  ffi.Pointer<ffi.Char> camelCase$224(
    ffi.Pointer<CassAuthenticator> auth,
    int size,
  ) {
    return _camelCase$224(
      auth,
      size,
    );
  }

  late final _camelCase$224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<CassAuthenticator>,
              ffi.Size)>>('cass_authenticator_response');
  late final _camelCase$224 = _camelCase$224Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<CassAuthenticator>, int)>();

  /// Sets the response token.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[in] response
  /// @param[in] response_size
  void camelCase$225(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Char> response,
    int response_size,
  ) {
    return _camelCase$225(
      auth,
      response,
      response_size,
    );
  }

  late final _camelCase$225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_authenticator_set_response');
  late final _camelCase$225 = _camelCase$225Ptr.asFunction<
      void Function(
          ffi.Pointer<CassAuthenticator>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets an error for the authenticator exchange.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[in] message
  void camelCase$226(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Char> message,
  ) {
    return _camelCase$226(
      auth,
      message,
    );
  }

  late final _camelCase$226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<ffi.Char>)>>('cass_authenticator_set_error');
  late final _camelCase$226 = _camelCase$226Ptr.asFunction<
      void Function(ffi.Pointer<CassAuthenticator>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_authenticator_set_error(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassAuthenticator
  ///
  /// @param[in] auth
  /// @param[in] message
  /// @param[in] message_length
  ///
  /// @see cass_authenticator_set_error()
  void camelCase$227(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Char> message,
    int message_length,
  ) {
    return _camelCase$227(
      auth,
      message,
      message_length,
    );
  }

  late final _camelCase$227Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassAuthenticator>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_authenticator_set_error_n');
  late final _camelCase$227 = _camelCase$227Ptr.asFunction<
      void Function(
          ffi.Pointer<CassAuthenticator>, ffi.Pointer<ffi.Char>, int)>();

  /// Frees a future instance. A future can be freed anytime.
  ///
  /// @public @memberof CassFuture
  void camelCase$228(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$228(
      future,
    );
  }

  late final _camelCase$228Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassFuture>)>>(
          'cass_future_free');
  late final _camelCase$228 =
      _camelCase$228Ptr.asFunction<void Function(ffi.Pointer<CassFuture>)>();

  /// Sets a callback that is called when a future is set
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @param[in] callback
  /// @param[in] data
  /// @return CASS_OK if successful, otherwise an error occurred
  CassError_ camelCase$229(
    ffi.Pointer<CassFuture> future,
    CassFutureCallback callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return CassError_.fromValue(_camelCase$229(
      future,
      callback,
      data,
    ));
  }

  late final _camelCase$229Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassFuture>, CassFutureCallback,
              ffi.Pointer<ffi.Void>)>>('cass_future_set_callback');
  late final _camelCase$229 = _camelCase$229Ptr.asFunction<
      int Function(ffi.Pointer<CassFuture>, CassFutureCallback,
          ffi.Pointer<ffi.Void>)>();

  /// Gets the set status of the future.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @return true if set
  cass_bool_t camelCase$230(
    ffi.Pointer<CassFuture> future,
  ) {
    return cass_bool_t.fromValue(_camelCase$230(
      future,
    ));
  }

  late final _camelCase$230Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassFuture>)>>(
      'cass_future_ready');
  late final _camelCase$230 =
      _camelCase$230Ptr.asFunction<int Function(ffi.Pointer<CassFuture>)>();

  /// Wait for the future to be set with either a result or error.
  ///
  /// <b>Important:</b> Do not wait in a future callback. Waiting in a future
  /// callback will cause a deadlock.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  void camelCase$231(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$231(
      future,
    );
  }

  late final _camelCase$231Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassFuture>)>>(
          'cass_future_wait');
  late final _camelCase$231 =
      _camelCase$231Ptr.asFunction<void Function(ffi.Pointer<CassFuture>)>();

  /// Wait for the future to be set or timeout.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @param[in] timeout_us wait time in microseconds
  /// @return false if returned due to timeout
  cass_bool_t camelCase$232(
    ffi.Pointer<CassFuture> future,
    Dartcass_uint64_t timeout_us,
  ) {
    return cass_bool_t.fromValue(_camelCase$232(
      future,
      timeout_us,
    ));
  }

  late final _camelCase$232Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassFuture>,
              cass_duration_t)>>('cass_future_wait_timed');
  late final _camelCase$232 = _camelCase$232Ptr
      .asFunction<int Function(ffi.Pointer<CassFuture>, int)>();

  /// Gets the result of a successful future. If the future is not ready this method will
  /// wait for the future to be set.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @return CassResult instance if successful, otherwise NULL for error. The return instance
  /// must be freed using cass_result_free().
  ///
  /// @see cass_session_execute() and cass_session_execute_batch()
  ffi.Pointer<CassResult> camelCase$233(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$233(
      future,
    );
  }

  late final _camelCase$233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassResult> Function(
              ffi.Pointer<CassFuture>)>>('cass_future_get_result');
  late final _camelCase$233 = _camelCase$233Ptr
      .asFunction<ffi.Pointer<CassResult> Function(ffi.Pointer<CassFuture>)>();

  /// Gets the error result from a future that failed as a result of a server error. If the
  /// future is not ready this method will wait for the future to be set.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @return CassErrorResult instance if the request failed with a server error,
  /// otherwise NULL if the request was successful or the failure was not caused by
  /// a server error. The return instance must be freed using cass_error_result_free().
  ///
  /// @see cass_session_execute() and cass_session_execute_batch()
  ffi.Pointer<CassErrorResult> camelCase$234(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$234(
      future,
    );
  }

  late final _camelCase$234Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassErrorResult> Function(
              ffi.Pointer<CassFuture>)>>('cass_future_get_error_result');
  late final _camelCase$234 = _camelCase$234Ptr.asFunction<
      ffi.Pointer<CassErrorResult> Function(ffi.Pointer<CassFuture>)>();

  /// Gets the result of a successful future. If the future is not ready this method will
  /// wait for the future to be set. The first successful call consumes the future, all
  /// subsequent calls will return NULL.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @return CassPrepared instance if successful, otherwise NULL for error. The return instance
  /// must be freed using cass_prepared_free().
  ///
  /// @see cass_session_prepare()
  ffi.Pointer<CassPrepared> camelCase$235(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$235(
      future,
    );
  }

  late final _camelCase$235Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassPrepared> Function(
              ffi.Pointer<CassFuture>)>>('cass_future_get_prepared');
  late final _camelCase$235 = _camelCase$235Ptr.asFunction<
      ffi.Pointer<CassPrepared> Function(ffi.Pointer<CassFuture>)>();

  /// Gets the error code from future. If the future is not ready this method will
  /// wait for the future to be set.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_error_desc()
  CassError_ camelCase$236(
    ffi.Pointer<CassFuture> future,
  ) {
    return CassError_.fromValue(_camelCase$236(
      future,
    ));
  }

  late final _camelCase$236Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassFuture>)>>(
      'cass_future_error_code');
  late final _camelCase$236 =
      _camelCase$236Ptr.asFunction<int Function(ffi.Pointer<CassFuture>)>();

  /// Gets the error message from future. If the future is not ready this method will
  /// wait for the future to be set.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @param[out] message Empty string returned if successful, otherwise
  /// a message describing the error is returned.
  /// @param[out] message_length
  void camelCase$237(
    ffi.Pointer<CassFuture> future,
    ffi.Pointer<ffi.Pointer<ffi.Char>> message,
    ffi.Pointer<ffi.Size> message_length,
  ) {
    return _camelCase$237(
      future,
      message,
      message_length,
    );
  }

  late final _camelCase$237Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassFuture>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_future_error_message');
  late final _camelCase$237 = _camelCase$237Ptr.asFunction<
      void Function(ffi.Pointer<CassFuture>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>)>();

  /// Gets the tracing ID associated with the request.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @param[out] tracing_id
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$238(
    ffi.Pointer<CassFuture> future,
    ffi.Pointer<CassUuid> tracing_id,
  ) {
    return CassError_.fromValue(_camelCase$238(
      future,
      tracing_id,
    ));
  }

  late final _camelCase$238Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassFuture>,
              ffi.Pointer<CassUuid>)>>('cass_future_tracing_id');
  late final _camelCase$238 = _camelCase$238Ptr.asFunction<
      int Function(ffi.Pointer<CassFuture>, ffi.Pointer<CassUuid>)>();

  /// Gets a the number of custom payload items from a response future. If the future is not
  /// ready this method will wait for the future to be set.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @return the number of custom payload items.
  int camelCase$239(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$239(
      future,
    );
  }

  late final _camelCase$239Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassFuture>)>>(
          'cass_future_custom_payload_item_count');
  late final _camelCase$239 =
      _camelCase$239Ptr.asFunction<int Function(ffi.Pointer<CassFuture>)>();

  /// Gets a custom payload item from a response future at the specified index. If the future is not
  /// ready this method will wait for the future to be set.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFuture
  ///
  /// @param[in] future
  /// @param[in] index
  /// @param[out] name
  /// @param[out] name_length
  /// @param[out] value
  /// @param[out] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$240(
    ffi.Pointer<CassFuture> future,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
    ffi.Pointer<ffi.Pointer<cass_byte_t>> value,
    ffi.Pointer<ffi.Size> value_size,
  ) {
    return CassError_.fromValue(_camelCase$240(
      future,
      index,
      name,
      name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$240Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassFuture>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<cass_byte_t>>,
              ffi.Pointer<ffi.Size>)>>('cass_future_custom_payload_item');
  late final _camelCase$240 = _camelCase$240Ptr.asFunction<
      int Function(
          ffi.Pointer<CassFuture>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<cass_byte_t>>,
          ffi.Pointer<ffi.Size>)>();

  /// Gets the node that acted as coordinator for this query. If the future is not
  /// ready this method will wait for the future to be set.
  ///
  /// @public @memberof CassFuture
  ///
  /// @param future
  /// @return The coordinator node that handled the query. The lifetime of this
  /// object is the same as the result object it came from. NULL can be returned
  /// if the future is not a response future or if an error occurs before a
  /// coordinator responds.
  ///
  /// @see cass_statement_set_node()
  ffi.Pointer<CassNode> camelCase$241(
    ffi.Pointer<CassFuture> future,
  ) {
    return _camelCase$241(
      future,
    );
  }

  late final _camelCase$241Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassNode> Function(
              ffi.Pointer<CassFuture>)>>('cass_future_coordinator');
  late final _camelCase$241 = _camelCase$241Ptr
      .asFunction<ffi.Pointer<CassNode> Function(ffi.Pointer<CassFuture>)>();

  /// Creates a new query statement.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] query The query is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] parameter_count The number of bound parameters.
  /// @return Returns a statement that must be freed.
  ///
  /// @see cass_statement_free()
  ffi.Pointer<CassStatement> camelCase$242(
    ffi.Pointer<ffi.Char> query,
    int parameter_count,
  ) {
    return _camelCase$242(
      query,
      parameter_count,
    );
  }

  late final _camelCase$242Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassStatement> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('cass_statement_new');
  late final _camelCase$242 = _camelCase$242Ptr.asFunction<
      ffi.Pointer<CassStatement> Function(ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_new(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] query
  /// @param[in] query_length
  /// @param[in] parameter_count
  /// @return same as cass_statement_new()
  ///
  /// @see cass_statement_new()
  ffi.Pointer<CassStatement> camelCase$243(
    ffi.Pointer<ffi.Char> query,
    int query_length,
    int parameter_count,
  ) {
    return _camelCase$243(
      query,
      query_length,
      parameter_count,
    );
  }

  late final _camelCase$243Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassStatement> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Size)>>('cass_statement_new_n');
  late final _camelCase$243 = _camelCase$243Ptr.asFunction<
      ffi.Pointer<CassStatement> Function(ffi.Pointer<ffi.Char>, int, int)>();

  /// Clear and/or resize the statement's parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] count
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$244(
    ffi.Pointer<CassStatement> statement,
    int count,
  ) {
    return CassError_.fromValue(_camelCase$244(
      statement,
      count,
    ));
  }

  late final _camelCase$244Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Size)>>('cass_statement_reset_parameters');
  late final _camelCase$244 = _camelCase$244Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Frees a statement instance. Statements can be immediately freed after
  /// being prepared, executed or added to a batch.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  void camelCase$245(
    ffi.Pointer<CassStatement> statement,
  ) {
    return _camelCase$245(
      statement,
    );
  }

  late final _camelCase$245Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassStatement>)>>(
      'cass_statement_free');
  late final _camelCase$245 =
      _camelCase$245Ptr.asFunction<void Function(ffi.Pointer<CassStatement>)>();

  /// Adds a key index specifier to this a statement.
  /// When using token-aware routing, this can be used to tell the driver which
  /// parameters within a non-prepared, parameterized statement are part of
  /// the partition key.
  ///
  /// Use consecutive calls for composite partition keys.
  ///
  /// This is not necessary for prepared statements, as the key
  /// parameters are determined in the metadata processed in the prepare phase.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$246(
    ffi.Pointer<CassStatement> statement,
    int index,
  ) {
    return CassError_.fromValue(_camelCase$246(
      statement,
      index,
    ));
  }

  late final _camelCase$246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Size)>>('cass_statement_add_key_index');
  late final _camelCase$246 = _camelCase$246Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets the statement's keyspace. This is used for token-aware routing and when
  /// using protocol v5 or greater it also overrides the session's current
  /// keyspace for the statement.
  ///
  /// This is not necessary and will not work for bound statements, as the keyspace
  /// is determined by the prepared statement metadata.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] keyspace
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$247(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> keyspace,
  ) {
    return CassError_.fromValue(_camelCase$247(
      statement,
      keyspace,
    ));
  }

  late final _camelCase$247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>)>>('cass_statement_set_keyspace');
  late final _camelCase$247 = _camelCase$247Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_statement_set_keyspace(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] keyspace
  /// @param[in] keyspace_length
  /// @return same as cass_statement_set_keyspace()
  ///
  /// @see cass_statement_set_keyspace()
  CassError_ camelCase$248(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> keyspace,
    int keyspace_length,
  ) {
    return CassError_.fromValue(_camelCase$248(
      statement,
      keyspace,
      keyspace_length,
    ));
  }

  late final _camelCase$248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_statement_set_keyspace_n');
  late final _camelCase$248 = _camelCase$248Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets the statement's consistency level.
  ///
  /// <b>Default:</b> CASS_CONSISTENCY_LOCAL_ONE
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$249(
    ffi.Pointer<CassStatement> statement,
    CassConsistency_ consistency,
  ) {
    return CassError_.fromValue(_camelCase$249(
      statement,
      consistency.value,
    ));
  }

  late final _camelCase$249Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.UnsignedInt)>>('cass_statement_set_consistency');
  late final _camelCase$249 = _camelCase$249Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets the statement's serial consistency level.
  ///
  /// @cassandra{2.0+}
  ///
  /// <b>Default:</b> Not set
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] serial_consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$250(
    ffi.Pointer<CassStatement> statement,
    CassConsistency_ serial_consistency,
  ) {
    return CassError_.fromValue(_camelCase$250(
      statement,
      serial_consistency.value,
    ));
  }

  late final _camelCase$250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.UnsignedInt)>>('cass_statement_set_serial_consistency');
  late final _camelCase$250 = _camelCase$250Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets the statement's page size.
  ///
  /// @cassandra{2.0+}
  ///
  /// <b>Default:</b> -1 (Disabled)
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] page_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$251(
    ffi.Pointer<CassStatement> statement,
    int page_size,
  ) {
    return CassError_.fromValue(_camelCase$251(
      statement,
      page_size,
    ));
  }

  late final _camelCase$251Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Int)>>('cass_statement_set_paging_size');
  late final _camelCase$251 = _camelCase$251Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets the statement's paging state. This can be used to get the next page of
  /// data in a multi-page query.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] result
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$252(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<CassResult> result,
  ) {
    return CassError_.fromValue(_camelCase$252(
      statement,
      result,
    ));
  }

  late final _camelCase$252Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<CassResult>)>>('cass_statement_set_paging_state');
  late final _camelCase$252 = _camelCase$252Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<CassResult>)>();

  /// Sets the statement's paging state. This can be used to get the next page of
  /// data in a multi-page query.
  ///
  /// @cassandra{2.0+}
  ///
  /// <b>Warning:</b> The paging state should not be exposed to or come from
  /// untrusted environments. The paging state could be spoofed and potentially
  /// used to gain access to other data.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] paging_state
  /// @param[in] paging_state_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_result_paging_state_token()
  CassError_ camelCase$253(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> paging_state,
    int paging_state_size,
  ) {
    return CassError_.fromValue(_camelCase$253(
      statement,
      paging_state,
      paging_state_size,
    ));
  }

  late final _camelCase$253Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_statement_set_paging_state_token');
  late final _camelCase$253 = _camelCase$253Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets the statement's timestamp.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] timestamp
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$254(
    ffi.Pointer<CassStatement> statement,
    Dartcass_int64_t timestamp,
  ) {
    return CassError_.fromValue(_camelCase$254(
      statement,
      timestamp,
    ));
  }

  late final _camelCase$254Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              cass_int64_t)>>('cass_statement_set_timestamp');
  late final _camelCase$254 = _camelCase$254Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets the statement's timeout for waiting for a response from a node.
  ///
  /// <b>Default:</b> Disabled (use the cluster-level request timeout)
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] timeout_ms Request timeout in milliseconds. Use 0 for no timeout
  /// or CASS_UINT64_MAX to disable (to use the cluster-level request timeout).
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_request_timeout()
  CassError_ camelCase$255(
    ffi.Pointer<CassStatement> statement,
    Dartcass_uint64_t timeout_ms,
  ) {
    return CassError_.fromValue(_camelCase$255(
      statement,
      timeout_ms,
    ));
  }

  late final _camelCase$255Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              cass_uint64_t)>>('cass_statement_set_request_timeout');
  late final _camelCase$255 = _camelCase$255Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets whether the statement is idempotent. Idempotent statements are able to be
  /// automatically retried after timeouts/errors and can be speculatively executed.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] is_idempotent
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_constant_speculative_execution_policy()
  /// @see cass_execution_profile_set_constant_speculative_execution_policy()
  CassError_ camelCase$256(
    ffi.Pointer<CassStatement> statement,
    cass_bool_t is_idempotent,
  ) {
    return CassError_.fromValue(_camelCase$256(
      statement,
      is_idempotent.value,
    ));
  }

  late final _camelCase$256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.UnsignedInt)>>('cass_statement_set_is_idempotent');
  late final _camelCase$256 = _camelCase$256Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets the statement's retry policy.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] retry_policy
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$257(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<CassRetryPolicy> retry_policy,
  ) {
    return CassError_.fromValue(_camelCase$257(
      statement,
      retry_policy,
    ));
  }

  late final _camelCase$257Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassStatement>, ffi.Pointer<CassRetryPolicy>)>>(
      'cass_statement_set_retry_policy');
  late final _camelCase$257 = _camelCase$257Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<CassRetryPolicy>)>();

  /// Sets the statement's custom payload.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] payload
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$258(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<CassCustomPayload> payload,
  ) {
    return CassError_.fromValue(_camelCase$258(
      statement,
      payload,
    ));
  }

  late final _camelCase$258Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassStatement>, ffi.Pointer<CassCustomPayload>)>>(
      'cass_statement_set_custom_payload');
  late final _camelCase$258 = _camelCase$258Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<CassCustomPayload>)>();

  /// Sets the execution profile to execute the statement with.
  ///
  /// <b>Note:</b> NULL or empty string will clear execution profile from statement
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_execution_profile()
  CassError_ camelCase$259(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
  ) {
    return CassError_.fromValue(_camelCase$259(
      statement,
      name,
    ));
  }

  late final _camelCase$259Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>)>>('cass_statement_set_execution_profile');
  late final _camelCase$259 = _camelCase$259Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_statement_set_execution_profile(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_statement_set_execution_profile()
  CassError_ camelCase$260(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return CassError_.fromValue(_camelCase$260(
      statement,
      name,
      name_length,
    ));
  }

  late final _camelCase$260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_statement_set_execution_profile_n');
  late final _camelCase$260 = _camelCase$260Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets whether the statement should use tracing.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$261(
    ffi.Pointer<CassStatement> statement,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$261(
      statement,
      enabled.value,
    ));
  }

  late final _camelCase$261Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.UnsignedInt)>>('cass_statement_set_tracing');
  late final _camelCase$261 = _camelCase$261Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Sets a specific host that should run the query.
  ///
  /// In general, this should not be used, but it can be useful in the following
  /// situations:
  /// * To query node-local tables such as system and virtual tables.
  /// * To apply a sequence of schema changes where it makes sense for all the
  /// changes to be applied on a single node.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] host
  /// @param[in] port
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$262(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> host,
    int port,
  ) {
    return CassError_.fromValue(_camelCase$262(
      statement,
      host,
      port,
    ));
  }

  late final _camelCase$262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('cass_statement_set_host');
  late final _camelCase$262 = _camelCase$262Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_set_host(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] host
  /// @param[in] host_length
  /// @param[in] port
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$263(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> host,
    int host_length,
    int port,
  ) {
    return CassError_.fromValue(_camelCase$263(
      statement,
      host,
      host_length,
      port,
    ));
  }

  late final _camelCase$263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int)>>('cass_statement_set_host_n');
  late final _camelCase$263 = _camelCase$263Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Same as cass_statement_set_host(), but with the `CassInet` type
  /// for the host instead of a string.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] host
  /// @param[in] port
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$264(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<CassInet> host,
    int port,
  ) {
    return CassError_.fromValue(_camelCase$264(
      statement,
      host,
      port,
    ));
  }

  late final _camelCase$264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<CassInet>, ffi.Int)>>('cass_statement_set_host_inet');
  late final _camelCase$264 = _camelCase$264Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<CassInet>, int)>();

  /// Same as cass_statement_set_host(), but using the `CassNode` type. This can
  /// be used to re-query the same coordinator when used with the result of
  /// `cass_future_coordinator()`
  ///
  /// @public @memberof CassStatement
  ///
  /// @param statement
  /// @param node
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_future_coordinator()
  CassError_ camelCase$265(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<CassNode> node,
  ) {
    return CassError_.fromValue(_camelCase$265(
      statement,
      node,
    ));
  }

  late final _camelCase$265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<CassNode>)>>('cass_statement_set_node');
  late final _camelCase$265 = _camelCase$265Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<CassNode>)>();

  /// Binds null to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$266(
    ffi.Pointer<CassStatement> statement,
    int index,
  ) {
    return CassError_.fromValue(_camelCase$266(
      statement,
      index,
    ));
  }

  late final _camelCase$266Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Size)>>('cass_statement_bind_null');
  late final _camelCase$266 = _camelCase$266Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int)>();

  /// Binds a null to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$267(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
  ) {
    return CassError_.fromValue(_camelCase$267(
      statement,
      name,
    ));
  }

  late final _camelCase$267Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>)>>('cass_statement_bind_null_by_name');
  late final _camelCase$267 = _camelCase$267Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_statement_bind_null_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_statement_bind_null_by_name()
  ///
  /// @see cass_statement_bind_null_by_name()
  CassError_ camelCase$268(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return CassError_.fromValue(_camelCase$268(
      statement,
      name,
      name_length,
    ));
  }

  late final _camelCase$268Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_statement_bind_null_by_name_n');
  late final _camelCase$268 = _camelCase$268Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Binds a "tinyint" to a query or bound statement at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$269(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$269(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_int8_t)>>('cass_statement_bind_int8');
  late final _camelCase$269 = _camelCase$269Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, int)>();

  /// Binds a "tinyint" to all the values with the specified name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$270(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$270(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_int8_t)>>('cass_statement_bind_int8_by_name');
  late final _camelCase$270 = _camelCase$270Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_bind_int8_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_int8_by_name()
  ///
  /// @see cass_statement_bind_int8_by_name()
  CassError_ camelCase$271(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$271(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int8_t)>>('cass_statement_bind_int8_by_name_n');
  late final _camelCase$271 = _camelCase$271Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Binds an "smallint" to a query or bound statement at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$272(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$272(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_int16_t)>>('cass_statement_bind_int16');
  late final _camelCase$272 = _camelCase$272Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, int)>();

  /// Binds an "smallint" to all the values with the specified name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$273(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$273(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$273Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_int16_t)>>('cass_statement_bind_int16_by_name');
  late final _camelCase$273 = _camelCase$273Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_bind_int16_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_int16_by_name()
  ///
  /// @see cass_statement_bind_int16_by_name()
  CassError_ camelCase$274(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$274(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$274Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int16_t)>>('cass_statement_bind_int16_by_name_n');
  late final _camelCase$274 = _camelCase$274Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Binds an "int" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$275(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$275(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$275Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_int32_t)>>('cass_statement_bind_int32');
  late final _camelCase$275 = _camelCase$275Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, int)>();

  /// Binds an "int" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$276(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$276(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_int32_t)>>('cass_statement_bind_int32_by_name');
  late final _camelCase$276 = _camelCase$276Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_bind_int32_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_int32_by_name()
  ///
  /// @see cass_statement_bind_int32_by_name()
  CassError_ camelCase$277(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$277(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int32_t)>>('cass_statement_bind_int32_by_name_n');
  late final _camelCase$277 = _camelCase$277Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Binds a "date" to a query or bound statement at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$278(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$278(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_uint32_t)>>('cass_statement_bind_uint32');
  late final _camelCase$278 = _camelCase$278Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, int)>();

  /// Binds a "date" to all the values with the specified name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$279(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$279(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$279Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_uint32_t)>>('cass_statement_bind_uint32_by_name');
  late final _camelCase$279 = _camelCase$279Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_bind_uint32_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_uint32_by_name()
  ///
  /// @see cass_statement_bind_uint32_by_name()
  CassError_ camelCase$280(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$280(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$280Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_uint32_t)>>('cass_statement_bind_uint32_by_name_n');
  late final _camelCase$280 = _camelCase$280Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Binds a "bigint", "counter", "timestamp" or "time" to a query or
  /// bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$281(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$281(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$281Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_int64_t)>>('cass_statement_bind_int64');
  late final _camelCase$281 = _camelCase$281Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, int)>();

  /// Binds a "bigint", "counter", "timestamp" or "time" to all values
  /// with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$282(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$282(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$282Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_int64_t)>>('cass_statement_bind_int64_by_name');
  late final _camelCase$282 = _camelCase$282Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_bind_int64_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_int64_by_name(0
  ///
  /// @see cass_statement_bind_int64_by_name()
  CassError_ camelCase$283(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$283(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$283Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int64_t)>>('cass_statement_bind_int64_by_name_n');
  late final _camelCase$283 = _camelCase$283Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Binds a "float" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$284(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$284(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$284Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_float_t)>>('cass_statement_bind_float');
  late final _camelCase$284 = _camelCase$284Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, double)>();

  /// Binds a "float" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$285(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$285(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$285Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_float_t)>>('cass_statement_bind_float_by_name');
  late final _camelCase$285 = _camelCase$285Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, double)>();

  /// Same as cass_statement_bind_float_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_float_by_name()
  ///
  /// @see cass_statement_bind_float_by_name()
  CassError_ camelCase$286(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$286(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$286Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_float_t)>>('cass_statement_bind_float_by_name_n');
  late final _camelCase$286 = _camelCase$286Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, double)>();

  /// Binds a "double" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$287(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$287(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$287Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              cass_double_t)>>('cass_statement_bind_double');
  late final _camelCase$287 = _camelCase$287Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, double)>();

  /// Binds a "double" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$288(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$288(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$288Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_double_t)>>('cass_statement_bind_double_by_name');
  late final _camelCase$288 = _camelCase$288Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, double)>();

  /// Same as cass_statement_bind_double_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_double_by_name()
  ///
  /// @see cass_statement_bind_double_by_name()
  CassError_ camelCase$289(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$289(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$289Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_double_t)>>('cass_statement_bind_double_by_name_n');
  late final _camelCase$289 = _camelCase$289Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, double)>();

  /// Binds a "boolean" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$290(
    ffi.Pointer<CassStatement> statement,
    int index,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$290(
      statement,
      index,
      value.value,
    ));
  }

  late final _camelCase$290Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              ffi.UnsignedInt)>>('cass_statement_bind_bool');
  late final _camelCase$290 = _camelCase$290Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, int)>();

  /// Binds a "boolean" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$291(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$291(
      statement,
      name,
      value.value,
    ));
  }

  late final _camelCase$291Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('cass_statement_bind_bool_by_name');
  late final _camelCase$291 = _camelCase$291Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_statement_bind_bool_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_bool_by_name()
  ///
  /// @see cass_statement_bind_bool_by_name()
  CassError_ camelCase$292(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$292(
      statement,
      name,
      name_length,
      value.value,
    ));
  }

  late final _camelCase$292Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt)>>('cass_statement_bind_bool_by_name_n');
  late final _camelCase$292 = _camelCase$292Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Binds an "ascii", "text" or "varchar" to a query or bound statement
  /// at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$293(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<ffi.Char> value,
  ) {
    return CassError_.fromValue(_camelCase$293(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$293Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('cass_statement_bind_string');
  late final _camelCase$293 = _camelCase$293Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, int, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_statement_bind_string(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @param[in] value_length
  /// @return same as cass_statement_bind_string()
  ///
  /// @see cass_statement_bind_string()
  CassError_ camelCase$294(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<ffi.Char> value,
    int value_length,
  ) {
    return CassError_.fromValue(_camelCase$294(
      statement,
      index,
      value,
      value_length,
    ));
  }

  late final _camelCase$294Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_statement_bind_string_n');
  late final _camelCase$294 = _camelCase$294Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Binds an "ascii", "text" or "varchar" to all the values
  /// with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$295(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return CassError_.fromValue(_camelCase$295(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$295Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cass_statement_bind_string_by_name');
  late final _camelCase$295 = _camelCase$295Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Same as cass_statement_bind_string_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @param[in] value_length
  /// @return same as cass_statement_bind_string_by_name()
  ///
  /// @see cass_statement_bind_string_by_name()
  CassError_ camelCase$296(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<ffi.Char> value,
    int value_length,
  ) {
    return CassError_.fromValue(_camelCase$296(
      statement,
      name,
      name_length,
      value,
      value_length,
    ));
  }

  late final _camelCase$296Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_statement_bind_string_by_name_n');
  late final _camelCase$296 = _camelCase$296Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  /// Binds a "blob", "varint" or "custom" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$297(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$297(
      statement,
      index,
      value,
      value_size,
    ));
  }

  late final _camelCase$297Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_bytes');
  late final _camelCase$297 = _camelCase$297Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, int, ffi.Pointer<cass_byte_t>, int)>();

  /// Binds a "blob", "varint" or "custom" to all the values with the
  /// specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$298(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$298(
      statement,
      name,
      value,
      value_size,
    ));
  }

  late final _camelCase$298Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_bytes_by_name');
  late final _camelCase$298 = _camelCase$298Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_statement_bind_bytes_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_statement_bind_bytes_by_name()
  ///
  /// @see cass_statement_bind_bytes_by_name()
  CassError_ camelCase$299(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$299(
      statement,
      name,
      name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$299Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_bytes_by_name_n');
  late final _camelCase$299 = _camelCase$299Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Binds a "custom" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] class_name
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$300(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<ffi.Char> class_name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$300(
      statement,
      index,
      class_name,
      value,
      value_size,
    ));
  }

  late final _camelCase$300Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_custom');
  late final _camelCase$300 = _camelCase$300Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_statement_bind_custom(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$301(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$301(
      statement,
      index,
      class_name,
      class_name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$301Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_custom_n');
  late final _camelCase$301 = _camelCase$301Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Binds a "custom" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] class_name
  /// @param[in] value The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$302(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> class_name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$302(
      statement,
      name,
      class_name,
      value,
      value_size,
    ));
  }

  late final _camelCase$302Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_custom_by_name');
  late final _camelCase$302 = _camelCase$302Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_statement_bind_custom_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_statement_bind_custom_by_name()
  ///
  /// @see cass_statement_bind_custom_by_name()
  CassError_ camelCase$303(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$303(
      statement,
      name,
      name_length,
      class_name,
      class_name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$303Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_statement_bind_custom_by_name_n');
  late final _camelCase$303 = _camelCase$303Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<cass_byte_t>, int)>();

  /// Binds a "uuid" or "timeuuid" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$304(
    ffi.Pointer<CassStatement> statement,
    int index,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$304(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$304Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              CassUuid)>>('cass_statement_bind_uuid');
  late final _camelCase$304 = _camelCase$304Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, CassUuid)>();

  /// Binds a "uuid" or "timeuuid" to all the values
  /// with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$305(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$305(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              CassUuid)>>('cass_statement_bind_uuid_by_name');
  late final _camelCase$305 = _camelCase$305Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, CassUuid)>();

  /// Same as cass_statement_bind_uuid_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_uuid_by_name()
  ///
  /// @see cass_statement_bind_uuid_by_name()
  CassError_ camelCase$306(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$306(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$306Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CassUuid)>>('cass_statement_bind_uuid_by_name_n');
  late final _camelCase$306 = _camelCase$306Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, CassUuid)>();

  /// Binds an "inet" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$307(
    ffi.Pointer<CassStatement> statement,
    int index,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$307(
      statement,
      index,
      value,
    ));
  }

  late final _camelCase$307Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              CassInet)>>('cass_statement_bind_inet');
  late final _camelCase$307 = _camelCase$307Ptr
      .asFunction<int Function(ffi.Pointer<CassStatement>, int, CassInet)>();

  /// Binds an "inet" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$308(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$308(
      statement,
      name,
      value,
    ));
  }

  late final _camelCase$308Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              CassInet)>>('cass_statement_bind_inet_by_name');
  late final _camelCase$308 = _camelCase$308Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, CassInet)>();

  /// Same as cass_statement_bind_inet_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_statement_bind_inet_by_name()
  ///
  /// @see cass_statement_bind_inet_by_name()
  CassError_ camelCase$309(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$309(
      statement,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$309Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CassInet)>>('cass_statement_bind_inet_by_name_n');
  late final _camelCase$309 = _camelCase$309Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, CassInet)>();

  /// Bind a "decimal" to a query or bound statement at the specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] varint The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$310(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    Dartcass_int32_t scale,
  ) {
    return CassError_.fromValue(_camelCase$310(
      statement,
      index,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$310Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              cass_int32_t)>>('cass_statement_bind_decimal');
  late final _camelCase$310 = _camelCase$310Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, int, ffi.Pointer<cass_byte_t>,
          int, int)>();

  /// Binds a "decimal" to all the values with the specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] varint The value is copied into the statement object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$311(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    Dartcass_int32_t scale,
  ) {
    return CassError_.fromValue(_camelCase$311(
      statement,
      name,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$311Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              cass_int32_t)>>('cass_statement_bind_decimal_by_name');
  late final _camelCase$311 = _camelCase$311Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int, int)>();

  /// Same as cass_statement_bind_decimal_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] varint
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return same as cass_statement_bind_decimal_by_name()
  ///
  /// @see cass_statement_bind_decimal_by_name()
  CassError_ camelCase$312(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    Dartcass_int32_t scale,
  ) {
    return CassError_.fromValue(_camelCase$312(
      statement,
      name,
      name_length,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$312Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              cass_int32_t)>>('cass_statement_bind_decimal_by_name_n');
  late final _camelCase$312 = _camelCase$312Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int, int)>();

  /// Binds a "duration" to a query or bound statement at the specified index.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$313(
    ffi.Pointer<CassStatement> statement,
    int index,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$313(
      statement,
      index,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$313Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Size,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_statement_bind_duration');
  late final _camelCase$313 = _camelCase$313Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, int, int, int, int)>();

  /// Binds a "duration" to all the values with the specified name.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$314(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$314(
      statement,
      name,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$314Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_statement_bind_duration_by_name');
  late final _camelCase$314 = _camelCase$314Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int, int)>();

  /// Same as cass_statement_bind_duration_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return same as cass_statement_bind_duration_by_name()
  ///
  /// @see cass_statement_bind_duration_by_name()
  CassError_ camelCase$315(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$315(
      statement,
      name,
      name_length,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$315Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_statement_bind_duration_by_name_n');
  late final _camelCase$315 = _camelCase$315Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int, int,
          int, int)>();

  /// Bind a "list", "map" or "set" to a query or bound statement at the
  /// specified index.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] collection The collection can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$316(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<CassCollection> collection,
  ) {
    return CassError_.fromValue(_camelCase$316(
      statement,
      index,
      collection,
    ));
  }

  late final _camelCase$316Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              ffi.Pointer<CassCollection>)>>('cass_statement_bind_collection');
  late final _camelCase$316 = _camelCase$316Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, int, ffi.Pointer<CassCollection>)>();

  /// Bind a "list", "map" or "set" to all the values with the
  /// specified name.
  ///
  /// This can only be used with statements created by
  /// cass_prepared_bind() when using Cassandra 2.0 or earlier.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] collection The collection can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$317(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassCollection> collection,
  ) {
    return CassError_.fromValue(_camelCase$317(
      statement,
      name,
      collection,
    ));
  }

  late final _camelCase$317Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CassCollection>)>>(
      'cass_statement_bind_collection_by_name');
  late final _camelCase$317 = _camelCase$317Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassCollection>)>();

  /// Same as cass_statement_bind_collection_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] collection
  /// @return same as cass_statement_bind_collection_by_name()
  ///
  /// @see cass_statement_bind_collection_by_name()
  CassError_ camelCase$318(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassCollection> collection,
  ) {
    return CassError_.fromValue(_camelCase$318(
      statement,
      name,
      name_length,
      collection,
    ));
  }

  late final _camelCase$318Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassStatement>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<CassCollection>)>>(
      'cass_statement_bind_collection_by_name_n');
  late final _camelCase$318 = _camelCase$318Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassCollection>)>();

  /// Bind a "tuple" to a query or bound statement at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] tuple The tuple can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$319(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<CassTuple> tuple,
  ) {
    return CassError_.fromValue(_camelCase$319(
      statement,
      index,
      tuple,
    ));
  }

  late final _camelCase$319Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              ffi.Pointer<CassTuple>)>>('cass_statement_bind_tuple');
  late final _camelCase$319 = _camelCase$319Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, int, ffi.Pointer<CassTuple>)>();

  /// Bind a "tuple" to all the values with the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] tuple The tuple can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$320(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassTuple> tuple,
  ) {
    return CassError_.fromValue(_camelCase$320(
      statement,
      name,
      tuple,
    ));
  }

  late final _camelCase$320Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<CassTuple>)>>('cass_statement_bind_tuple_by_name');
  late final _camelCase$320 = _camelCase$320Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassTuple>)>();

  /// Same as cass_statement_bind_tuple_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] tuple
  /// @return same as cass_statement_bind_tuple_by_name()
  ///
  /// @see cass_statement_bind_tuple_by_name()
  CassError_ camelCase$321(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassTuple> tuple,
  ) {
    return CassError_.fromValue(_camelCase$321(
      statement,
      name,
      name_length,
      tuple,
    ));
  }

  late final _camelCase$321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassStatement>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<CassTuple>)>>('cass_statement_bind_tuple_by_name_n');
  late final _camelCase$321 = _camelCase$321Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassTuple>)>();

  /// Bind a user defined type to a query or bound statement at the
  /// specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] index
  /// @param[in] user_type The user type can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$322(
    ffi.Pointer<CassStatement> statement,
    int index,
    ffi.Pointer<CassUserType> user_type,
  ) {
    return CassError_.fromValue(_camelCase$322(
      statement,
      index,
      user_type,
    ));
  }

  late final _camelCase$322Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassStatement>, ffi.Size,
              ffi.Pointer<CassUserType>)>>('cass_statement_bind_user_type');
  late final _camelCase$322 = _camelCase$322Ptr.asFunction<
      int Function(
          ffi.Pointer<CassStatement>, int, ffi.Pointer<CassUserType>)>();

  /// Bind a user defined type to a query or bound statement with the
  /// specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] user_type The user type can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$323(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassUserType> user_type,
  ) {
    return CassError_.fromValue(_camelCase$323(
      statement,
      name,
      user_type,
    ));
  }

  late final _camelCase$323Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CassUserType>)>>(
      'cass_statement_bind_user_type_by_name');
  late final _camelCase$323 = _camelCase$323Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassUserType>)>();

  /// Same as cass_statement_bind_user_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] statement
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] user_type
  /// @return same as cass_statement_bind_user_type_by_name()
  ///
  /// @see cass_statement_bind_collection_by_name()
  CassError_ camelCase$324(
    ffi.Pointer<CassStatement> statement,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassUserType> user_type,
  ) {
    return CassError_.fromValue(_camelCase$324(
      statement,
      name,
      name_length,
      user_type,
    ));
  }

  late final _camelCase$324Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassStatement>,
                  ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<CassUserType>)>>(
      'cass_statement_bind_user_type_by_name_n');
  late final _camelCase$324 = _camelCase$324Ptr.asFunction<
      int Function(ffi.Pointer<CassStatement>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassUserType>)>();

  /// Frees a prepared instance.
  ///
  /// @public @memberof CassPrepared
  ///
  /// @param[in] prepared
  void camelCase$325(
    ffi.Pointer<CassPrepared> prepared,
  ) {
    return _camelCase$325(
      prepared,
    );
  }

  late final _camelCase$325Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassPrepared>)>>(
          'cass_prepared_free');
  late final _camelCase$325 =
      _camelCase$325Ptr.asFunction<void Function(ffi.Pointer<CassPrepared>)>();

  /// Creates a bound statement from a pre-prepared statement.
  ///
  /// @public @memberof CassPrepared
  ///
  /// @param[in] prepared
  /// @return Returns a bound statement that must be freed.
  ///
  /// @see cass_statement_free()
  ffi.Pointer<CassStatement> camelCase$326(
    ffi.Pointer<CassPrepared> prepared,
  ) {
    return _camelCase$326(
      prepared,
    );
  }

  late final _camelCase$326Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassStatement> Function(
              ffi.Pointer<CassPrepared>)>>('cass_prepared_bind');
  late final _camelCase$326 = _camelCase$326Ptr.asFunction<
      ffi.Pointer<CassStatement> Function(ffi.Pointer<CassPrepared>)>();

  /// Gets the name of a parameter at the specified index.
  ///
  /// @public @memberof CassPrepared
  ///
  /// @param[in] prepared
  /// @param[in] index
  /// @param[out] name
  /// @param[out] name_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$327(
    ffi.Pointer<CassPrepared> prepared,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return CassError_.fromValue(_camelCase$327(
      prepared,
      index,
      name,
      name_length,
    ));
  }

  late final _camelCase$327Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassPrepared>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_prepared_parameter_name');
  late final _camelCase$327 = _camelCase$327Ptr.asFunction<
      int Function(ffi.Pointer<CassPrepared>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the data type of a parameter at the specified index.
  ///
  /// @public @memberof CassPrepared
  ///
  /// @param[in] prepared
  /// @param[in] index
  /// @return Returns a reference to the data type of the parameter. Do not free
  /// this reference as it is bound to the lifetime of the prepared.
  ffi.Pointer<CassDataType> camelCase$328(
    ffi.Pointer<CassPrepared> prepared,
    int index,
  ) {
    return _camelCase$328(
      prepared,
      index,
    );
  }

  late final _camelCase$328Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(ffi.Pointer<CassPrepared>,
              ffi.Size)>>('cass_prepared_parameter_data_type');
  late final _camelCase$328 = _camelCase$328Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassPrepared>, int)>();

  /// Gets the data type of a parameter for the specified name.
  ///
  /// @public @memberof CassPrepared
  ///
  /// @param[in] prepared
  /// @param[in] name
  /// @return Returns a reference to the data type of the parameter. Do not free
  /// this reference as it is bound to the lifetime of the prepared.
  ffi.Pointer<CassDataType> camelCase$329(
    ffi.Pointer<CassPrepared> prepared,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$329(
      prepared,
      name,
    );
  }

  late final _camelCase$329Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassDataType> Function(
                  ffi.Pointer<CassPrepared>, ffi.Pointer<ffi.Char>)>>(
      'cass_prepared_parameter_data_type_by_name');
  late final _camelCase$329 = _camelCase$329Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassPrepared>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_prepared_parameter_data_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassPrepared
  ///
  /// @param[in] prepared
  /// @param[in] name
  /// @param[in] name_length
  /// @return Returns a reference to the data type of the parameter. Do not free
  /// this reference as it is bound to the lifetime of the prepared.
  ///
  /// @see cass_prepared_parameter_data_type_by_name()
  ffi.Pointer<CassDataType> camelCase$330(
    ffi.Pointer<CassPrepared> prepared,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$330(
      prepared,
      name,
      name_length,
    );
  }

  late final _camelCase$330Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassPrepared>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_prepared_parameter_data_type_by_name_n');
  late final _camelCase$330 = _camelCase$330Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassPrepared>, ffi.Pointer<ffi.Char>, int)>();

  /// Creates a new batch statement with batch type.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] type
  /// @return Returns a batch statement that must be freed.
  ///
  /// @see cass_batch_free()
  ffi.Pointer<CassBatch> camelCase$331(
    CassBatchType_ type,
  ) {
    return _camelCase$331(
      type.value,
    );
  }

  late final _camelCase$331Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CassBatch> Function(ffi.UnsignedInt)>>(
      'cass_batch_new');
  late final _camelCase$331 =
      _camelCase$331Ptr.asFunction<ffi.Pointer<CassBatch> Function(int)>();

  /// Frees a batch instance. Batches can be immediately freed after being
  /// executed.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  void camelCase$332(
    ffi.Pointer<CassBatch> batch,
  ) {
    return _camelCase$332(
      batch,
    );
  }

  late final _camelCase$332Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassBatch>)>>(
          'cass_batch_free');
  late final _camelCase$332 =
      _camelCase$332Ptr.asFunction<void Function(ffi.Pointer<CassBatch>)>();

  /// Sets the batch's keyspace. When using protocol v5 or greater it overrides
  /// the session's keyspace for the batch.
  ///
  /// <b>Note:</b> If not set explicitly then the batch will inherit the keyspace
  /// of the first child statement with a non-empty keyspace.
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] keyspace
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$333(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<ffi.Char> keyspace,
  ) {
    return CassError_.fromValue(_camelCase$333(
      batch,
      keyspace,
    ));
  }

  late final _camelCase$333Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.Pointer<ffi.Char>)>>('cass_batch_set_keyspace');
  late final _camelCase$333 = _camelCase$333Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_batch_set_keyspace(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] keyspace
  /// @param[in] keyspace_length
  /// @return same as cass_batch_set_keyspace()
  ///
  /// @see cass_batch_set_keyspace()
  CassError_ camelCase$334(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<ffi.Char> keyspace,
    int keyspace_length,
  ) {
    return CassError_.fromValue(_camelCase$334(
      batch,
      keyspace,
      keyspace_length,
    ));
  }

  late final _camelCase$334Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('cass_batch_set_keyspace_n');
  late final _camelCase$334 = _camelCase$334Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets the batch's consistency level
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] consistency The batch's write consistency.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$335(
    ffi.Pointer<CassBatch> batch,
    CassConsistency_ consistency,
  ) {
    return CassError_.fromValue(_camelCase$335(
      batch,
      consistency.value,
    ));
  }

  late final _camelCase$335Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.UnsignedInt)>>('cass_batch_set_consistency');
  late final _camelCase$335 =
      _camelCase$335Ptr.asFunction<int Function(ffi.Pointer<CassBatch>, int)>();

  /// Sets the batch's serial consistency level.
  ///
  /// @cassandra{2.0+}
  ///
  /// <b>Default:</b> Not set
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] serial_consistency
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$336(
    ffi.Pointer<CassBatch> batch,
    CassConsistency_ serial_consistency,
  ) {
    return CassError_.fromValue(_camelCase$336(
      batch,
      serial_consistency.value,
    ));
  }

  late final _camelCase$336Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.UnsignedInt)>>('cass_batch_set_serial_consistency');
  late final _camelCase$336 =
      _camelCase$336Ptr.asFunction<int Function(ffi.Pointer<CassBatch>, int)>();

  /// Sets the batch's timestamp.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] timestamp
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$337(
    ffi.Pointer<CassBatch> batch,
    Dartcass_int64_t timestamp,
  ) {
    return CassError_.fromValue(_camelCase$337(
      batch,
      timestamp,
    ));
  }

  late final _camelCase$337Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              cass_int64_t)>>('cass_batch_set_timestamp');
  late final _camelCase$337 =
      _camelCase$337Ptr.asFunction<int Function(ffi.Pointer<CassBatch>, int)>();

  /// Sets the batch's timeout for waiting for a response from a node.
  ///
  /// <b>Default:</b> Disabled (use the cluster-level request timeout)
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] timeout_ms Request timeout in milliseconds. Use 0 for no timeout
  /// or CASS_UINT64_MAX to disable (to use the cluster-level request timeout).
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_request_timeout()
  CassError_ camelCase$338(
    ffi.Pointer<CassBatch> batch,
    Dartcass_uint64_t timeout_ms,
  ) {
    return CassError_.fromValue(_camelCase$338(
      batch,
      timeout_ms,
    ));
  }

  late final _camelCase$338Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              cass_uint64_t)>>('cass_batch_set_request_timeout');
  late final _camelCase$338 =
      _camelCase$338Ptr.asFunction<int Function(ffi.Pointer<CassBatch>, int)>();

  /// Sets whether the statements in a batch are idempotent. Idempotent batches
  /// are able to be automatically retried after timeouts/errors and can be
  /// speculatively executed.
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] is_idempotent
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_constant_speculative_execution_policy()
  /// @see cass_execution_profile_set_constant_speculative_execution_policy()
  CassError_ camelCase$339(
    ffi.Pointer<CassBatch> batch,
    cass_bool_t is_idempotent,
  ) {
    return CassError_.fromValue(_camelCase$339(
      batch,
      is_idempotent.value,
    ));
  }

  late final _camelCase$339Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.UnsignedInt)>>('cass_batch_set_is_idempotent');
  late final _camelCase$339 =
      _camelCase$339Ptr.asFunction<int Function(ffi.Pointer<CassBatch>, int)>();

  /// Sets the batch's retry policy.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] retry_policy
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$340(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<CassRetryPolicy> retry_policy,
  ) {
    return CassError_.fromValue(_camelCase$340(
      batch,
      retry_policy,
    ));
  }

  late final _camelCase$340Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.Pointer<CassRetryPolicy>)>>('cass_batch_set_retry_policy');
  late final _camelCase$340 = _camelCase$340Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<CassRetryPolicy>)>();

  /// Sets the batch's custom payload.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] payload
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$341(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<CassCustomPayload> payload,
  ) {
    return CassError_.fromValue(_camelCase$341(
      batch,
      payload,
    ));
  }

  late final _camelCase$341Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassBatch>, ffi.Pointer<CassCustomPayload>)>>(
      'cass_batch_set_custom_payload');
  late final _camelCase$341 = _camelCase$341Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<CassCustomPayload>)>();

  /// Sets whether the batch should use tracing.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassStatement
  ///
  /// @param[in] batch
  /// @param[in] enabled
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$342(
    ffi.Pointer<CassBatch> batch,
    cass_bool_t enabled,
  ) {
    return CassError_.fromValue(_camelCase$342(
      batch,
      enabled.value,
    ));
  }

  late final _camelCase$342Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.UnsignedInt)>>('cass_batch_set_tracing');
  late final _camelCase$342 =
      _camelCase$342Ptr.asFunction<int Function(ffi.Pointer<CassBatch>, int)>();

  /// Adds a statement to a batch.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] statement
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$343(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<CassStatement> statement,
  ) {
    return CassError_.fromValue(_camelCase$343(
      batch,
      statement,
    ));
  }

  late final _camelCase$343Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.Pointer<CassStatement>)>>('cass_batch_add_statement');
  late final _camelCase$343 = _camelCase$343Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<CassStatement>)>();

  /// Sets the execution profile to execute the batch with.
  ///
  /// <b>Note:</b> NULL or empty string will clear execution profile from batch
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] name
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_cluster_set_execution_profile()
  CassError_ camelCase$344(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<ffi.Char> name,
  ) {
    return CassError_.fromValue(_camelCase$344(
      batch,
      name,
    ));
  }

  late final _camelCase$344Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassBatch>,
              ffi.Pointer<ffi.Char>)>>('cass_batch_set_execution_profile');
  late final _camelCase$344 = _camelCase$344Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_batch_set_execution_profile(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassBatch
  ///
  /// @param[in] batch
  /// @param[in] name
  /// @param[in] name_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  ///
  /// @see cass_batch_set_execution_profile()
  CassError_ camelCase$345(
    ffi.Pointer<CassBatch> batch,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return CassError_.fromValue(_camelCase$345(
      batch,
      name,
      name_length,
    ));
  }

  late final _camelCase$345Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassBatch>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_batch_set_execution_profile_n');
  late final _camelCase$345 = _camelCase$345Ptr.asFunction<
      int Function(ffi.Pointer<CassBatch>, ffi.Pointer<ffi.Char>, int)>();

  /// Creates a new data type with value type.
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] type
  /// @return Returns a data type that must be freed.
  ///
  /// @see cass_data_type_free()
  ffi.Pointer<CassDataType> camelCase$346(
    CassValueType_ type,
  ) {
    return _camelCase$346(
      type.value,
    );
  }

  late final _camelCase$346Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<CassDataType> Function(ffi.UnsignedInt)>>(
      'cass_data_type_new');
  late final _camelCase$346 =
      _camelCase$346Ptr.asFunction<ffi.Pointer<CassDataType> Function(int)>();

  /// Creates a new data type from an existing data type.
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] data_type
  /// @return Returns a data type that must be freed.
  ///
  /// @see cass_data_type_free()
  ffi.Pointer<CassDataType> camelCase$347(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return _camelCase$347(
      data_type,
    );
  }

  late final _camelCase$347Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassDataType>)>>('cass_data_type_new_from_existing');
  late final _camelCase$347 = _camelCase$347Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassDataType>)>();

  /// Creates a new tuple data type.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] item_count The number of items in the tuple
  /// @return Returns a data type that must be freed.
  ///
  /// @see cass_data_type_free()
  ffi.Pointer<CassDataType> camelCase$348(
    int item_count,
  ) {
    return _camelCase$348(
      item_count,
    );
  }

  late final _camelCase$348Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassDataType> Function(ffi.Size)>>(
          'cass_data_type_new_tuple');
  late final _camelCase$348 =
      _camelCase$348Ptr.asFunction<ffi.Pointer<CassDataType> Function(int)>();

  /// Creates a new UDT (user defined type) data type.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] field_count The number of fields in the UDT
  /// @return Returns a data type that must be freed.
  ///
  /// @see cass_data_type_free()
  ffi.Pointer<CassDataType> camelCase$349(
    int field_count,
  ) {
    return _camelCase$349(
      field_count,
    );
  }

  late final _camelCase$349Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassDataType> Function(ffi.Size)>>(
          'cass_data_type_new_udt');
  late final _camelCase$349 =
      _camelCase$349Ptr.asFunction<ffi.Pointer<CassDataType> Function(int)>();

  /// Frees a data type instance.
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] data_type
  void camelCase$350(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return _camelCase$350(
      data_type,
    );
  }

  late final _camelCase$350Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassDataType>)>>(
          'cass_data_type_free');
  late final _camelCase$350 =
      _camelCase$350Ptr.asFunction<void Function(ffi.Pointer<CassDataType>)>();

  /// Gets the value type of the specified data type.
  ///
  /// @param[in] data_type
  /// @return The value type
  CassValueType_ camelCase$351(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return CassValueType_.fromValue(_camelCase$351(
      data_type,
    ));
  }

  late final _camelCase$351Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassDataType>)>>(
      'cass_data_type_type');
  late final _camelCase$351 =
      _camelCase$351Ptr.asFunction<int Function(ffi.Pointer<CassDataType>)>();

  /// Gets whether a data type is frozen.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @return cass_true if the data type is frozen, otherwise cass_false.
  cass_bool_t camelCase$352(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return cass_bool_t.fromValue(_camelCase$352(
      data_type,
    ));
  }

  late final _camelCase$352Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassDataType>)>>(
      'cass_data_type_is_frozen');
  late final _camelCase$352 =
      _camelCase$352Ptr.asFunction<int Function(ffi.Pointer<CassDataType>)>();

  /// Gets the type name of a UDT data type.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @param[in] data_type
  /// @param[out] type_name
  /// @param[out] type_name_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$353(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Pointer<ffi.Char>> type_name,
    ffi.Pointer<ffi.Size> type_name_length,
  ) {
    return CassError_.fromValue(_camelCase$353(
      data_type,
      type_name,
      type_name_length,
    ));
  }

  late final _camelCase$353Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_data_type_type_name');
  late final _camelCase$353 = _camelCase$353Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Sets the type name of a UDT data type.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @param[in] data_type
  /// @param[in] type_name
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$354(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> type_name,
  ) {
    return CassError_.fromValue(_camelCase$354(
      data_type,
      type_name,
    ));
  }

  late final _camelCase$354Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>)>>('cass_data_type_set_type_name');
  late final _camelCase$354 = _camelCase$354Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_data_type_set_type_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] data_type
  /// @param[in] type_name
  /// @param[in] type_name_length
  /// @return Returns a data type that must be freed.
  CassError_ camelCase$355(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> type_name,
    int type_name_length,
  ) {
    return CassError_.fromValue(_camelCase$355(
      data_type,
      type_name,
      type_name_length,
    ));
  }

  late final _camelCase$355Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_data_type_set_type_name_n');
  late final _camelCase$355 = _camelCase$355Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the type name of a UDT data type.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[out] keyspace
  /// @param[out] keyspace_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$356(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keyspace,
    ffi.Pointer<ffi.Size> keyspace_length,
  ) {
    return CassError_.fromValue(_camelCase$356(
      data_type,
      keyspace,
      keyspace_length,
    ));
  }

  late final _camelCase$356Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_data_type_keyspace');
  late final _camelCase$356 = _camelCase$356Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Sets the keyspace of a UDT data type.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[in] keyspace
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$357(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> keyspace,
  ) {
    return CassError_.fromValue(_camelCase$357(
      data_type,
      keyspace,
    ));
  }

  late final _camelCase$357Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>)>>('cass_data_type_set_keyspace');
  late final _camelCase$357 = _camelCase$357Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_data_type_set_keyspace(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] data_type
  /// @param[in] keyspace
  /// @param[in] keyspace_length
  /// @return Returns a data type that must be freed.
  CassError_ camelCase$358(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> keyspace,
    int keyspace_length,
  ) {
    return CassError_.fromValue(_camelCase$358(
      data_type,
      keyspace,
      keyspace_length,
    ));
  }

  late final _camelCase$358Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_data_type_set_keyspace_n');
  late final _camelCase$358 = _camelCase$358Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the class name of a custom data type.
  ///
  /// <b>Note:</b> Only valid for custom data types.
  ///
  /// @param[in] data_type
  /// @param[out] class_name
  /// @param[out] class_name_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$359(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Pointer<ffi.Char>> class_name,
    ffi.Pointer<ffi.Size> class_name_length,
  ) {
    return CassError_.fromValue(_camelCase$359(
      data_type,
      class_name,
      class_name_length,
    ));
  }

  late final _camelCase$359Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_data_type_class_name');
  late final _camelCase$359 = _camelCase$359Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Sets the class name of a custom data type.
  ///
  /// <b>Note:</b> Only valid for custom data types.
  ///
  /// @param[in] data_type
  /// @param[in] class_name
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$360(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> class_name,
  ) {
    return CassError_.fromValue(_camelCase$360(
      data_type,
      class_name,
    ));
  }

  late final _camelCase$360Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>)>>('cass_data_type_set_class_name');
  late final _camelCase$360 = _camelCase$360Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_data_type_set_class_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] data_type
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @return Returns a data type that must be freed.
  CassError_ camelCase$361(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
  ) {
    return CassError_.fromValue(_camelCase$361(
      data_type,
      class_name,
      class_name_length,
    ));
  }

  late final _camelCase$361Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_data_type_set_class_name_n');
  late final _camelCase$361 = _camelCase$361Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the sub-data type count of a UDT (user defined type), tuple
  /// or collection.
  ///
  /// <b>Note:</b> Only valid for UDT, tuple and collection data types.
  ///
  /// @param[in] data_type
  /// @return Returns the number of sub-data types
  int camelCase$362(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return _camelCase$362(
      data_type,
    );
  }

  late final _camelCase$362Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassDataType>)>>(
          'cass_data_type_sub_type_count');
  late final _camelCase$362 =
      _camelCase$362Ptr.asFunction<int Function(ffi.Pointer<CassDataType>)>();

  /// @deprecated Use cass_data_type_sub_type_count()
  int camelCase$363(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return _camelCase$363(
      data_type,
    );
  }

  late final _camelCase$363Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassDataType>)>>(
          'cass_data_sub_type_count');
  late final _camelCase$363 =
      _camelCase$363Ptr.asFunction<int Function(ffi.Pointer<CassDataType>)>();

  /// Gets the sub-data type of a UDT (user defined type), tuple or collection at
  /// the specified index.
  ///
  /// <b>Note:</b> Only valid for UDT, tuple and collection data types.
  ///
  /// @param[in] data_type
  /// @param[in] index
  /// @return Returns a reference to a child data type. Do not free this
  /// reference as it is bound to the lifetime of the parent data type. NULL
  /// is returned if the index is out of range.
  ffi.Pointer<CassDataType> camelCase$364(
    ffi.Pointer<CassDataType> data_type,
    int index,
  ) {
    return _camelCase$364(
      data_type,
      index,
    );
  }

  late final _camelCase$364Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(ffi.Pointer<CassDataType>,
              ffi.Size)>>('cass_data_type_sub_data_type');
  late final _camelCase$364 = _camelCase$364Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassDataType>, int)>();

  /// Gets the sub-data type of a UDT (user defined type) at the specified index.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[in] name
  /// @return Returns a reference to a child data type. Do not free this
  /// reference as it is bound to the lifetime of the parent data type. NULL
  /// is returned if the name doesn't exist.
  ffi.Pointer<CassDataType> camelCase$365(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$365(
      data_type,
      name,
    );
  }

  late final _camelCase$365Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>)>>('cass_data_type_sub_data_type_by_name');
  late final _camelCase$365 = _camelCase$365Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_data_type_sub_data_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassDataType
  ///
  /// @param[in] data_type
  /// @param[in] name
  /// @param[in] name_length
  /// @return Returns a reference to a child data type. Do not free this
  /// reference as it is bound to the lifetime of the parent data type. NULL
  /// is returned if the name doesn't exist.
  ffi.Pointer<CassDataType> camelCase$366(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$366(
      data_type,
      name,
      name_length,
    );
  }

  late final _camelCase$366Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_data_type_sub_data_type_by_name_n');
  late final _camelCase$366 = _camelCase$366Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(
          ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the sub-type name of a UDT (user defined type) at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @param[in] data_type
  /// @param[in] index
  /// @param[out] name
  /// @param[out] name_length
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$367(
    ffi.Pointer<CassDataType> data_type,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return CassError_.fromValue(_camelCase$367(
      data_type,
      index,
      name,
      name_length,
    ));
  }

  late final _camelCase$367Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_data_type_sub_type_name');
  late final _camelCase$367 = _camelCase$367Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Adds a sub-data type to a tuple or collection.
  ///
  /// <b>Note:</b> Only valid for tuple and collection data types.
  ///
  /// @param[in] data_type
  /// @param[in] sub_data_type
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$368(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<CassDataType> sub_data_type,
  ) {
    return CassError_.fromValue(_camelCase$368(
      data_type,
      sub_data_type,
    ));
  }

  late final _camelCase$368Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
              ffi.Pointer<CassDataType>)>>('cass_data_type_add_sub_type');
  late final _camelCase$368 = _camelCase$368Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<CassDataType>)>();

  /// Adds a sub-data type to a UDT (user defined type).
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[in] name
  /// @param[in] sub_data_type
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$369(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassDataType> sub_data_type,
  ) {
    return CassError_.fromValue(_camelCase$369(
      data_type,
      name,
      sub_data_type,
    ));
  }

  late final _camelCase$369Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CassDataType>)>>(
      'cass_data_type_add_sub_type_by_name');
  late final _camelCase$369 = _camelCase$369Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassDataType>)>();

  /// Same as cass_data_type_add_sub_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] sub_data_type
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$370(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassDataType> sub_data_type,
  ) {
    return CassError_.fromValue(_camelCase$370(
      data_type,
      name,
      name_length,
      sub_data_type,
    ));
  }

  late final _camelCase$370Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
                  ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<CassDataType>)>>(
      'cass_data_type_add_sub_type_by_name_n');
  late final _camelCase$370 = _camelCase$370Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassDataType>)>();

  /// Adds a sub-data type to a tuple or collection using a value type.
  ///
  /// <b>Note:</b> Only valid for tuple and collection data types.
  ///
  /// @param[in] data_type
  /// @param[in] sub_value_type
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$371(
    ffi.Pointer<CassDataType> data_type,
    CassValueType_ sub_value_type,
  ) {
    return CassError_.fromValue(_camelCase$371(
      data_type,
      sub_value_type.value,
    ));
  }

  late final _camelCase$371Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassDataType>,
              ffi.UnsignedInt)>>('cass_data_type_add_sub_value_type');
  late final _camelCase$371 = _camelCase$371Ptr
      .asFunction<int Function(ffi.Pointer<CassDataType>, int)>();

  /// Adds a sub-data type to a UDT (user defined type) using a value type.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[in] name
  /// @param[in] sub_value_type
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$372(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> name,
    CassValueType_ sub_value_type,
  ) {
    return CassError_.fromValue(_camelCase$372(
      data_type,
      name,
      sub_value_type.value,
    ));
  }

  late final _camelCase$372Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('cass_data_type_add_sub_value_type_by_name');
  late final _camelCase$372 = _camelCase$372Ptr.asFunction<
      int Function(ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_data_type_add_sub_value_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// <b>Note:</b> Only valid for UDT data types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] data_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] sub_value_type
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$373(
    ffi.Pointer<CassDataType> data_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    CassValueType_ sub_value_type,
  ) {
    return CassError_.fromValue(_camelCase$373(
      data_type,
      name,
      name_length,
      sub_value_type.value,
    ));
  }

  late final _camelCase$373Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassDataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt)>>('cass_data_type_add_sub_value_type_by_name_n');
  late final _camelCase$373 = _camelCase$373Ptr.asFunction<
      int Function(
          ffi.Pointer<CassDataType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Creates a new collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] type
  /// @param[in] item_count The approximate number of items in the collection.
  /// @return Returns a collection that must be freed.
  ///
  /// @see cass_collection_free()
  ffi.Pointer<CassCollection> camelCase$374(
    CassCollectionType_ type,
    int item_count,
  ) {
    return _camelCase$374(
      type.value,
      item_count,
    );
  }

  late final _camelCase$374Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassCollection> Function(
              ffi.UnsignedInt, ffi.Size)>>('cass_collection_new');
  late final _camelCase$374 = _camelCase$374Ptr
      .asFunction<ffi.Pointer<CassCollection> Function(int, int)>();

  /// Creates a new collection from an existing data type.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] data_type
  /// @param[in] item_count The approximate number of items in the collection.
  /// @return Returns a collection that must be freed.
  ///
  /// @see cass_collection_free();
  ffi.Pointer<CassCollection> camelCase$375(
    ffi.Pointer<CassDataType> data_type,
    int item_count,
  ) {
    return _camelCase$375(
      data_type,
      item_count,
    );
  }

  late final _camelCase$375Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassCollection> Function(ffi.Pointer<CassDataType>,
              ffi.Size)>>('cass_collection_new_from_data_type');
  late final _camelCase$375 = _camelCase$375Ptr.asFunction<
      ffi.Pointer<CassCollection> Function(ffi.Pointer<CassDataType>, int)>();

  /// Frees a collection instance.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  void camelCase$376(
    ffi.Pointer<CassCollection> collection,
  ) {
    return _camelCase$376(
      collection,
    );
  }

  late final _camelCase$376Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassCollection>)>>(
      'cass_collection_free');
  late final _camelCase$376 = _camelCase$376Ptr
      .asFunction<void Function(ffi.Pointer<CassCollection>)>();

  /// Gets the data type of a collection.
  ///
  /// @param[in] collection
  /// @return Returns a reference to the data type of the collection. Do not free
  /// this reference as it is bound to the lifetime of the collection.
  ffi.Pointer<CassDataType> camelCase$377(
    ffi.Pointer<CassCollection> collection,
  ) {
    return _camelCase$377(
      collection,
    );
  }

  late final _camelCase$377Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassCollection>)>>('cass_collection_data_type');
  late final _camelCase$377 = _camelCase$377Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassCollection>)>();

  /// Appends a "tinyint" to the collection.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$378(
    ffi.Pointer<CassCollection> collection,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$378(
      collection,
      value,
    ));
  }

  late final _camelCase$378Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_int8_t)>>('cass_collection_append_int8');
  late final _camelCase$378 = _camelCase$378Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int)>();

  /// Appends an "smallint" to the collection.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$379(
    ffi.Pointer<CassCollection> collection,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$379(
      collection,
      value,
    ));
  }

  late final _camelCase$379Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_int16_t)>>('cass_collection_append_int16');
  late final _camelCase$379 = _camelCase$379Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int)>();

  /// Appends an "int" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$380(
    ffi.Pointer<CassCollection> collection,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$380(
      collection,
      value,
    ));
  }

  late final _camelCase$380Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_int32_t)>>('cass_collection_append_int32');
  late final _camelCase$380 = _camelCase$380Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int)>();

  /// Appends a "date" to the collection.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$381(
    ffi.Pointer<CassCollection> collection,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$381(
      collection,
      value,
    ));
  }

  late final _camelCase$381Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_uint32_t)>>('cass_collection_append_uint32');
  late final _camelCase$381 = _camelCase$381Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int)>();

  /// Appends a "bigint", "counter", "timestamp" or "time" to the
  /// collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$382(
    ffi.Pointer<CassCollection> collection,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$382(
      collection,
      value,
    ));
  }

  late final _camelCase$382Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_int64_t)>>('cass_collection_append_int64');
  late final _camelCase$382 = _camelCase$382Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int)>();

  /// Appends a "float" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$383(
    ffi.Pointer<CassCollection> collection,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$383(
      collection,
      value,
    ));
  }

  late final _camelCase$383Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_float_t)>>('cass_collection_append_float');
  late final _camelCase$383 = _camelCase$383Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, double)>();

  /// Appends a "double" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$384(
    ffi.Pointer<CassCollection> collection,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$384(
      collection,
      value,
    ));
  }

  late final _camelCase$384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              cass_double_t)>>('cass_collection_append_double');
  late final _camelCase$384 = _camelCase$384Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, double)>();

  /// Appends a "boolean" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$385(
    ffi.Pointer<CassCollection> collection,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$385(
      collection,
      value.value,
    ));
  }

  late final _camelCase$385Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              ffi.UnsignedInt)>>('cass_collection_append_bool');
  late final _camelCase$385 = _camelCase$385Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int)>();

  /// Appends an "ascii", "text" or "varchar" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value The value is copied into the collection object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$386(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<ffi.Char> value,
  ) {
    return CassError_.fromValue(_camelCase$386(
      collection,
      value,
    ));
  }

  late final _camelCase$386Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              ffi.Pointer<ffi.Char>)>>('cass_collection_append_string');
  late final _camelCase$386 = _camelCase$386Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_collection_append_string(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @param[in] value_length
  /// @return same as cass_collection_append_string()
  ///
  /// @see cass_collection_append_string();
  CassError_ camelCase$387(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<ffi.Char> value,
    int value_length,
  ) {
    return CassError_.fromValue(_camelCase$387(
      collection,
      value,
      value_length,
    ));
  }

  late final _camelCase$387Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCollection>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_collection_append_string_n');
  late final _camelCase$387 = _camelCase$387Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<ffi.Char>, int)>();

  /// Appends a "blob", "varint" or "custom" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value The value is copied into the collection object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$388(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$388(
      collection,
      value,
      value_size,
    ));
  }

  late final _camelCase$388Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCollection>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_collection_append_bytes');
  late final _camelCase$388 = _camelCase$388Ptr.asFunction<
      int Function(
          ffi.Pointer<CassCollection>, ffi.Pointer<cass_byte_t>, int)>();

  /// Appends a "custom" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] class_name
  /// @param[in] value The value is copied into the collection object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$389(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<ffi.Char> class_name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$389(
      collection,
      class_name,
      value,
      value_size,
    ));
  }

  late final _camelCase$389Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCollection>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_collection_append_custom');
  late final _camelCase$389 = _camelCase$389Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_collection_append_custom(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_collection_append_custom()
  ///
  /// @see cass_collection_append_custom()
  CassError_ camelCase$390(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$390(
      collection,
      class_name,
      class_name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$390Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCollection>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_collection_append_custom_n');
  late final _camelCase$390 = _camelCase$390Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Appends a "uuid" or "timeuuid"  to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$391(
    ffi.Pointer<CassCollection> collection,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$391(
      collection,
      value,
    ));
  }

  late final _camelCase$391Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              CassUuid)>>('cass_collection_append_uuid');
  late final _camelCase$391 = _camelCase$391Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, CassUuid)>();

  /// Appends an "inet" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$392(
    ffi.Pointer<CassCollection> collection,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$392(
      collection,
      value,
    ));
  }

  late final _camelCase$392Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              CassInet)>>('cass_collection_append_inet');
  late final _camelCase$392 = _camelCase$392Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, CassInet)>();

  /// Appends a "decimal" to the collection.
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] varint The value is copied into the collection object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$393(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    Dartcass_int32_t scale,
  ) {
    return CassError_.fromValue(_camelCase$393(
      collection,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$393Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassCollection>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              cass_int32_t)>>('cass_collection_append_decimal');
  late final _camelCase$393 = _camelCase$393Ptr.asFunction<
      int Function(
          ffi.Pointer<CassCollection>, ffi.Pointer<cass_byte_t>, int, int)>();

  /// Appends a "duration" to the collection.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$394(
    ffi.Pointer<CassCollection> collection,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$394(
      collection,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$394Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>, cass_int32_t,
              cass_int32_t, cass_int64_t)>>('cass_collection_append_duration');
  late final _camelCase$394 = _camelCase$394Ptr
      .asFunction<int Function(ffi.Pointer<CassCollection>, int, int, int)>();

  /// Appends a "list", "map" or "set" to the collection.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$395(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<CassCollection> value,
  ) {
    return CassError_.fromValue(_camelCase$395(
      collection,
      value,
    ));
  }

  late final _camelCase$395Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassCollection>, ffi.Pointer<CassCollection>)>>(
      'cass_collection_append_collection');
  late final _camelCase$395 = _camelCase$395Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<CassCollection>)>();

  /// Appends a "tuple" to the collection.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$396(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<CassTuple> value,
  ) {
    return CassError_.fromValue(_camelCase$396(
      collection,
      value,
    ));
  }

  late final _camelCase$396Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              ffi.Pointer<CassTuple>)>>('cass_collection_append_tuple');
  late final _camelCase$396 = _camelCase$396Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<CassTuple>)>();

  /// Appends a "udt" to the collection.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassCollection
  ///
  /// @param[in] collection
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$397(
    ffi.Pointer<CassCollection> collection,
    ffi.Pointer<CassUserType> value,
  ) {
    return CassError_.fromValue(_camelCase$397(
      collection,
      value,
    ));
  }

  late final _camelCase$397Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassCollection>,
              ffi.Pointer<CassUserType>)>>('cass_collection_append_user_type');
  late final _camelCase$397 = _camelCase$397Ptr.asFunction<
      int Function(ffi.Pointer<CassCollection>, ffi.Pointer<CassUserType>)>();

  /// Creates a new tuple.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] item_count The number of items in the tuple.
  /// @return Returns a tuple that must be freed.
  ///
  /// @see cass_tuple_free()
  ffi.Pointer<CassTuple> camelCase$398(
    int item_count,
  ) {
    return _camelCase$398(
      item_count,
    );
  }

  late final _camelCase$398Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassTuple> Function(ffi.Size)>>(
          'cass_tuple_new');
  late final _camelCase$398 =
      _camelCase$398Ptr.asFunction<ffi.Pointer<CassTuple> Function(int)>();

  /// Creates a new tuple from an existing data type.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] data_type
  /// @return Returns a tuple that must be freed.
  ///
  /// @see cass_tuple_free();
  ffi.Pointer<CassTuple> camelCase$399(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return _camelCase$399(
      data_type,
    );
  }

  late final _camelCase$399Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassTuple> Function(
              ffi.Pointer<CassDataType>)>>('cass_tuple_new_from_data_type');
  late final _camelCase$399 = _camelCase$399Ptr
      .asFunction<ffi.Pointer<CassTuple> Function(ffi.Pointer<CassDataType>)>();

  /// Frees a tuple instance.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  void camelCase$400(
    ffi.Pointer<CassTuple> tuple,
  ) {
    return _camelCase$400(
      tuple,
    );
  }

  late final _camelCase$400Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassTuple>)>>(
          'cass_tuple_free');
  late final _camelCase$400 =
      _camelCase$400Ptr.asFunction<void Function(ffi.Pointer<CassTuple>)>();

  /// Gets the data type of a tuple.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] tuple
  /// @return Returns a reference to the data type of the tuple. Do not free
  /// this reference as it is bound to the lifetime of the tuple.
  ffi.Pointer<CassDataType> camelCase$401(
    ffi.Pointer<CassTuple> tuple,
  ) {
    return _camelCase$401(
      tuple,
    );
  }

  late final _camelCase$401Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassTuple>)>>('cass_tuple_data_type');
  late final _camelCase$401 = _camelCase$401Ptr
      .asFunction<ffi.Pointer<CassDataType> Function(ffi.Pointer<CassTuple>)>();

  /// Sets an null in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$402(
    ffi.Pointer<CassTuple> tuple,
    int index,
  ) {
    return CassError_.fromValue(_camelCase$402(
      tuple,
      index,
    ));
  }

  late final _camelCase$402Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassTuple>, ffi.Size)>>('cass_tuple_set_null');
  late final _camelCase$402 =
      _camelCase$402Ptr.asFunction<int Function(ffi.Pointer<CassTuple>, int)>();

  /// Sets a "tinyint" in a tuple at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$403(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$403(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$403Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_int8_t)>>('cass_tuple_set_int8');
  late final _camelCase$403 = _camelCase$403Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int)>();

  /// Sets an "smallint" in a tuple at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$404(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$404(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$404Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_int16_t)>>('cass_tuple_set_int16');
  late final _camelCase$404 = _camelCase$404Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int)>();

  /// Sets an "int" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$405(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$405(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$405Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_int32_t)>>('cass_tuple_set_int32');
  late final _camelCase$405 = _camelCase$405Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int)>();

  /// Sets a "date" in a tuple at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$406(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$406(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$406Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_uint32_t)>>('cass_tuple_set_uint32');
  late final _camelCase$406 = _camelCase$406Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int)>();

  /// Sets a "bigint", "counter", "timestamp" or "time" in a tuple at the
  /// specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$407(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$407(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$407Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_int64_t)>>('cass_tuple_set_int64');
  late final _camelCase$407 = _camelCase$407Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int)>();

  /// Sets a "float" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$408(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$408(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$408Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_float_t)>>('cass_tuple_set_float');
  late final _camelCase$408 = _camelCase$408Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, double)>();

  /// Sets a "double" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$409(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$409(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$409Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              cass_double_t)>>('cass_tuple_set_double');
  late final _camelCase$409 = _camelCase$409Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, double)>();

  /// Sets a "boolean" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$410(
    ffi.Pointer<CassTuple> tuple,
    int index,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$410(
      tuple,
      index,
      value.value,
    ));
  }

  late final _camelCase$410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.UnsignedInt)>>('cass_tuple_set_bool');
  late final _camelCase$410 = _camelCase$410Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int)>();

  /// Sets an "ascii", "text" or "varchar" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value The value is copied into the tuple object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$411(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<ffi.Char> value,
  ) {
    return CassError_.fromValue(_camelCase$411(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$411Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('cass_tuple_set_string');
  late final _camelCase$411 = _camelCase$411Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_tuple_set_string(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @param[in] value_length
  /// @return same as cass_tuple_set_string()
  ///
  /// @see cass_tuple_set_string();
  CassError_ camelCase$412(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<ffi.Char> value,
    int value_length,
  ) {
    return CassError_.fromValue(_camelCase$412(
      tuple,
      index,
      value,
      value_length,
    ));
  }

  late final _camelCase$412Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('cass_tuple_set_string_n');
  late final _camelCase$412 = _camelCase$412Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Sets a "blob", "varint" or "custom" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value The value is copied into the tuple object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$413(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$413(
      tuple,
      index,
      value,
      value_size,
    ));
  }

  late final _camelCase$413Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.Pointer<cass_byte_t>, ffi.Size)>>('cass_tuple_set_bytes');
  late final _camelCase$413 = _camelCase$413Ptr.asFunction<
      int Function(
          ffi.Pointer<CassTuple>, int, ffi.Pointer<cass_byte_t>, int)>();

  /// Sets a "custom" in a tuple at the specified index.
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] class_name
  /// @param[in] value The value is copied into the tuple object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$414(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<ffi.Char> class_name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$414(
      tuple,
      index,
      class_name,
      value,
      value_size,
    ));
  }

  late final _camelCase$414Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassTuple>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_tuple_set_custom');
  late final _camelCase$414 = _camelCase$414Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_tuple_set_custom(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_tuple_set_custom()
  ///
  /// @see cass_tuple_set_custom()
  CassError_ camelCase$415(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$415(
      tuple,
      index,
      class_name,
      class_name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$415Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassTuple>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_tuple_set_custom_n');
  late final _camelCase$415 = _camelCase$415Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Sets a "uuid" or "timeuuid" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$416(
    ffi.Pointer<CassTuple> tuple,
    int index,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$416(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$416Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              CassUuid)>>('cass_tuple_set_uuid');
  late final _camelCase$416 = _camelCase$416Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, CassUuid)>();

  /// Sets an "inet" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$417(
    ffi.Pointer<CassTuple> tuple,
    int index,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$417(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$417Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              CassInet)>>('cass_tuple_set_inet');
  late final _camelCase$417 = _camelCase$417Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, CassInet)>();

  /// Sets a "decimal" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] varint The value is copied into the tuple object; the
  /// memory pointed to by this parameter can be freed after this call.
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$418(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    Dartcass_int32_t scale,
  ) {
    return CassError_.fromValue(_camelCase$418(
      tuple,
      index,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$418Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassTuple>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              cass_int32_t)>>('cass_tuple_set_decimal');
  late final _camelCase$418 = _camelCase$418Ptr.asFunction<
      int Function(
          ffi.Pointer<CassTuple>, int, ffi.Pointer<cass_byte_t>, int, int)>();

  /// Sets a "duration" in a tuple at the specified index.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$419(
    ffi.Pointer<CassTuple> tuple,
    int index,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$419(
      tuple,
      index,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$419Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassTuple>,
              ffi.Size,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_tuple_set_duration');
  late final _camelCase$419 = _camelCase$419Ptr
      .asFunction<int Function(ffi.Pointer<CassTuple>, int, int, int, int)>();

  /// Sets a "list", "map" or "set" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$420(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<CassCollection> value,
  ) {
    return CassError_.fromValue(_camelCase$420(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.Pointer<CassCollection>)>>('cass_tuple_set_collection');
  late final _camelCase$420 = _camelCase$420Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<CassCollection>)>();

  /// Sets a "tuple" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$421(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<CassTuple> value,
  ) {
    return CassError_.fromValue(_camelCase$421(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$421Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.Pointer<CassTuple>)>>('cass_tuple_set_tuple');
  late final _camelCase$421 = _camelCase$421Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<CassTuple>)>();

  /// Sets a "udt" in a tuple at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTuple
  ///
  /// @param[in] tuple
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$422(
    ffi.Pointer<CassTuple> tuple,
    int index,
    ffi.Pointer<CassUserType> value,
  ) {
    return CassError_.fromValue(_camelCase$422(
      tuple,
      index,
      value,
    ));
  }

  late final _camelCase$422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassTuple>, ffi.Size,
              ffi.Pointer<CassUserType>)>>('cass_tuple_set_user_type');
  late final _camelCase$422 = _camelCase$422Ptr.asFunction<
      int Function(ffi.Pointer<CassTuple>, int, ffi.Pointer<CassUserType>)>();

  /// Creates a new user defined type from existing data type;
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] data_type
  /// @return Returns a user defined type that must be freed. NULL is returned if
  /// the data type is not a user defined type.
  ///
  /// @see cass_user_type_free()
  ffi.Pointer<CassUserType> camelCase$423(
    ffi.Pointer<CassDataType> data_type,
  ) {
    return _camelCase$423(
      data_type,
    );
  }

  late final _camelCase$423Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassUserType> Function(
              ffi.Pointer<CassDataType>)>>('cass_user_type_new_from_data_type');
  late final _camelCase$423 = _camelCase$423Ptr.asFunction<
      ffi.Pointer<CassUserType> Function(ffi.Pointer<CassDataType>)>();

  /// Frees a user defined type instance.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  void camelCase$424(
    ffi.Pointer<CassUserType> user_type,
  ) {
    return _camelCase$424(
      user_type,
    );
  }

  late final _camelCase$424Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassUserType>)>>(
          'cass_user_type_free');
  late final _camelCase$424 =
      _camelCase$424Ptr.asFunction<void Function(ffi.Pointer<CassUserType>)>();

  /// Gets the data type of a user defined type.
  ///
  /// @cassandra{2.1+}
  ///
  /// @param[in] user_type
  /// @return Returns a reference to the data type of the user defined type.
  /// Do not free this reference as it is bound to the lifetime of the
  /// user defined type.
  ffi.Pointer<CassDataType> camelCase$425(
    ffi.Pointer<CassUserType> user_type,
  ) {
    return _camelCase$425(
      user_type,
    );
  }

  late final _camelCase$425Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassUserType>)>>('cass_user_type_data_type');
  late final _camelCase$425 = _camelCase$425Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassUserType>)>();

  /// Sets a null in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$426(
    ffi.Pointer<CassUserType> user_type,
    int index,
  ) {
    return CassError_.fromValue(_camelCase$426(
      user_type,
      index,
    ));
  }

  late final _camelCase$426Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>, ffi.Size)>>('cass_user_type_set_null');
  late final _camelCase$426 = _camelCase$426Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int)>();

  /// Sets a null in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$427(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
  ) {
    return CassError_.fromValue(_camelCase$427(
      user_type,
      name,
    ));
  }

  late final _camelCase$427Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>)>>('cass_user_type_set_null_by_name');
  late final _camelCase$427 = _camelCase$427Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_user_type_set_null_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_user_type_set_null_by_name()
  ///
  /// @see cass_user_type_set_null_by_name()
  CassError_ camelCase$428(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return CassError_.fromValue(_camelCase$428(
      user_type,
      name,
      name_length,
    ));
  }

  late final _camelCase$428Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_user_type_set_null_by_name_n');
  late final _camelCase$428 = _camelCase$428Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Sets a "tinyint" in a user defined type at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$429(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$429(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$429Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_int8_t)>>('cass_user_type_set_int8');
  late final _camelCase$429 = _camelCase$429Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, int)>();

  /// Sets a "tinyint" in a user defined type at the specified name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$430(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$430(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$430Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_int8_t)>>('cass_user_type_set_int8_by_name');
  late final _camelCase$430 = _camelCase$430Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_user_type_set_int8_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_int8_by_name()
  ///
  /// @see cass_user_type_set_int8_by_name()
  CassError_ camelCase$431(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int8_t value,
  ) {
    return CassError_.fromValue(_camelCase$431(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$431Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int8_t)>>('cass_user_type_set_int8_by_name_n');
  late final _camelCase$431 = _camelCase$431Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Sets an "smallint" in a user defined type at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$432(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$432(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$432Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_int16_t)>>('cass_user_type_set_int16');
  late final _camelCase$432 = _camelCase$432Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, int)>();

  /// Sets an "smallint" in a user defined type at the specified name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$433(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$433(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$433Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_int16_t)>>('cass_user_type_set_int16_by_name');
  late final _camelCase$433 = _camelCase$433Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_user_type_set_int16_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_int16_by_name()
  ///
  /// @see cass_user_type_set_int16_by_name()
  CassError_ camelCase$434(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int16_t value,
  ) {
    return CassError_.fromValue(_camelCase$434(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$434Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int16_t)>>('cass_user_type_set_int16_by_name_n');
  late final _camelCase$434 = _camelCase$434Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Sets an "int" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$435(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$435(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$435Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_int32_t)>>('cass_user_type_set_int32');
  late final _camelCase$435 = _camelCase$435Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, int)>();

  /// Sets an "int" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$436(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$436(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$436Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_int32_t)>>('cass_user_type_set_int32_by_name');
  late final _camelCase$436 = _camelCase$436Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_user_type_set_int32_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_int32_by_name()
  ///
  /// @see cass_user_type_set_int32_by_name()
  CassError_ camelCase$437(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int32_t value,
  ) {
    return CassError_.fromValue(_camelCase$437(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$437Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int32_t)>>('cass_user_type_set_int32_by_name_n');
  late final _camelCase$437 = _camelCase$437Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Sets a "date" in a user defined type at the specified index.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$438(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$438(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$438Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_uint32_t)>>('cass_user_type_set_uint32');
  late final _camelCase$438 = _camelCase$438Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, int)>();

  /// Sets a "date" in a user defined type at the specified name.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$439(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$439(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$439Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_uint32_t)>>('cass_user_type_set_uint32_by_name');
  late final _camelCase$439 = _camelCase$439Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_user_type_set_uint32_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_uint32_by_name()
  ///
  /// @see cass_user_type_set_uint32_by_name()
  CassError_ camelCase$440(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_uint32_t value,
  ) {
    return CassError_.fromValue(_camelCase$440(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$440Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_uint32_t)>>('cass_user_type_set_uint32_by_name_n');
  late final _camelCase$440 = _camelCase$440Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Sets an "bigint", "counter", "timestamp" or "time" in a
  /// user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$441(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$441(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$441Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_int64_t)>>('cass_user_type_set_int64');
  late final _camelCase$441 = _camelCase$441Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, int)>();

  /// Sets an "bigint", "counter", "timestamp" or "time" in a
  /// user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$442(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$442(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$442Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_int64_t)>>('cass_user_type_set_int64_by_name');
  late final _camelCase$442 = _camelCase$442Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_user_type_set_int64_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_int64_by_name()
  ///
  /// @see cass_user_type_set_int64_by_name()
  CassError_ camelCase$443(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int64_t value,
  ) {
    return CassError_.fromValue(_camelCase$443(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$443Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int64_t)>>('cass_user_type_set_int64_by_name_n');
  late final _camelCase$443 = _camelCase$443Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Sets a "float" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$444(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$444(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_float_t)>>('cass_user_type_set_float');
  late final _camelCase$444 = _camelCase$444Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, double)>();

  /// Sets a "float" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$445(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$445(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$445Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_float_t)>>('cass_user_type_set_float_by_name');
  late final _camelCase$445 = _camelCase$445Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, double)>();

  /// Same as cass_user_type_set_float_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_float_by_name()
  ///
  /// @see cass_user_type_set_float_by_name()
  CassError_ camelCase$446(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_float_t value,
  ) {
    return CassError_.fromValue(_camelCase$446(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$446Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_float_t)>>('cass_user_type_set_float_by_name_n');
  late final _camelCase$446 = _camelCase$446Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, double)>();

  /// Sets an "double" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$447(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$447(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$447Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              cass_double_t)>>('cass_user_type_set_double');
  late final _camelCase$447 = _camelCase$447Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, double)>();

  /// Sets an "double" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$448(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$448(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$448Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_double_t)>>('cass_user_type_set_double_by_name');
  late final _camelCase$448 = _camelCase$448Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, double)>();

  /// Same as cass_user_type_set_double_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_double_by_name()
  ///
  /// @see cass_user_type_set_double_by_name()
  CassError_ camelCase$449(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_double_t value,
  ) {
    return CassError_.fromValue(_camelCase$449(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$449Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_double_t)>>('cass_user_type_set_double_by_name_n');
  late final _camelCase$449 = _camelCase$449Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, double)>();

  /// Sets a "boolean" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$450(
    ffi.Pointer<CassUserType> user_type,
    int index,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$450(
      user_type,
      index,
      value.value,
    ));
  }

  late final _camelCase$450Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.UnsignedInt)>>('cass_user_type_set_bool');
  late final _camelCase$450 = _camelCase$450Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, int)>();

  /// Sets a "boolean" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$451(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$451(
      user_type,
      name,
      value.value,
    ));
  }

  late final _camelCase$451Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('cass_user_type_set_bool_by_name');
  late final _camelCase$451 = _camelCase$451Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int)>();

  /// Same as cass_user_type_set_double_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_double_by_name()
  ///
  /// @see cass_user_type_set_double_by_name()
  CassError_ camelCase$452(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    cass_bool_t value,
  ) {
    return CassError_.fromValue(_camelCase$452(
      user_type,
      name,
      name_length,
      value.value,
    ));
  }

  late final _camelCase$452Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt)>>('cass_user_type_set_bool_by_name_n');
  late final _camelCase$452 = _camelCase$452Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int)>();

  /// Sets an "ascii", "text" or "varchar" in a user defined type at the
  /// specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$453(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<ffi.Char> value,
  ) {
    return CassError_.fromValue(_camelCase$453(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$453Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('cass_user_type_set_string');
  late final _camelCase$453 = _camelCase$453Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, int, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_user_type_set_string(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @param[in] value_length
  /// @return same as cass_user_type_set_string()
  ///
  /// @see cass_user_type_set_string()
  CassError_ camelCase$454(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<ffi.Char> value,
    int value_length,
  ) {
    return CassError_.fromValue(_camelCase$454(
      user_type,
      index,
      value,
      value_length,
    ));
  }

  late final _camelCase$454Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('cass_user_type_set_string_n');
  late final _camelCase$454 = _camelCase$454Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Sets an "ascii", "text" or "varchar" in a user defined type at the
  /// specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$455(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return CassError_.fromValue(_camelCase$455(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$455Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('cass_user_type_set_string_by_name');
  late final _camelCase$455 = _camelCase$455Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Same as cass_user_type_set_string_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @param[in] value_length
  /// @return same as cass_user_type_set_string_by_name()
  ///
  /// @see cass_user_type_set_string_by_name()
  CassError_ camelCase$456(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<ffi.Char> value,
    int value_length,
  ) {
    return CassError_.fromValue(_camelCase$456(
      user_type,
      name,
      name_length,
      value,
      value_length,
    ));
  }

  late final _camelCase$456Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_user_type_set_string_by_name_n');
  late final _camelCase$456 = _camelCase$456Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int)>();

  /// Sets a "blob" "varint" or "custom" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$457(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$457(
      user_type,
      index,
      value,
      value_size,
    ));
  }

  late final _camelCase$457Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.Pointer<cass_byte_t>, ffi.Size)>>('cass_user_type_set_bytes');
  late final _camelCase$457 = _camelCase$457Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, int, ffi.Pointer<cass_byte_t>, int)>();

  /// Sets a "blob", "varint" or "custom" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$458(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$458(
      user_type,
      name,
      value,
      value_size,
    ));
  }

  late final _camelCase$458Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_user_type_set_bytes_by_name');
  late final _camelCase$458 = _camelCase$458Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_user_type_set_bytes_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_user_type_set_bytes_by_name()
  ///
  /// @see cass_user_type_set_bytes_by_name()
  CassError_ camelCase$459(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$459(
      user_type,
      name,
      name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$459Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_user_type_set_bytes_by_name_n');
  late final _camelCase$459 = _camelCase$459Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Sets a "custom" in a user defined type at the specified index.
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] class_name
  /// @param[in] value
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$460(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<ffi.Char> class_name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$460(
      user_type,
      index,
      class_name,
      value,
      value_size,
    ));
  }

  late final _camelCase$460Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_user_type_set_custom');
  late final _camelCase$460 = _camelCase$460Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_user_type_set_custom(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_user_type_set_custom()
  ///
  /// @see cass_user_type_set_custom()
  CassError_ camelCase$461(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$461(
      user_type,
      index,
      class_name,
      class_name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$461Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_user_type_set_custom_n');
  late final _camelCase$461 = _camelCase$461Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Sets a "custom" in a user defined type at the specified name.
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] class_name
  /// @param[in] value
  /// @param[in] value_size
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$462(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> class_name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$462(
      user_type,
      name,
      class_name,
      value,
      value_size,
    ));
  }

  late final _camelCase$462Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_user_type_set_custom_by_name');
  late final _camelCase$462 = _camelCase$462Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_user_type_set_custom_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] class_name
  /// @param[in] class_name_length
  /// @param[in] value
  /// @param[in] value_size
  /// @return same as cass_user_type_set_custom_by_name()
  ///
  /// @see cass_user_type_set_custom_by_name()
  CassError_ camelCase$463(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<ffi.Char> class_name,
    int class_name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return CassError_.fromValue(_camelCase$463(
      user_type,
      name,
      name_length,
      class_name,
      class_name_length,
      value,
      value_size,
    ));
  }

  late final _camelCase$463Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_user_type_set_custom_by_name_n');
  late final _camelCase$463 = _camelCase$463Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<cass_byte_t>, int)>();

  /// Sets a "uuid" or "timeuuid" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$464(
    ffi.Pointer<CassUserType> user_type,
    int index,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$464(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$464Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              CassUuid)>>('cass_user_type_set_uuid');
  late final _camelCase$464 = _camelCase$464Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, CassUuid)>();

  /// Sets a "uuid" or "timeuuid" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$465(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$465(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$465Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              CassUuid)>>('cass_user_type_set_uuid_by_name');
  late final _camelCase$465 = _camelCase$465Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, CassUuid)>();

  /// Same as cass_user_type_set_uuid_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_uuid_by_name()
  ///
  /// @see cass_user_type_set_uuid_by_name()
  CassError_ camelCase$466(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    CassUuid value,
  ) {
    return CassError_.fromValue(_camelCase$466(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$466Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CassUuid)>>('cass_user_type_set_uuid_by_name_n');
  late final _camelCase$466 = _camelCase$466Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, CassUuid)>();

  /// Sets a "inet" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$467(
    ffi.Pointer<CassUserType> user_type,
    int index,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$467(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$467Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              CassInet)>>('cass_user_type_set_inet');
  late final _camelCase$467 = _camelCase$467Ptr
      .asFunction<int Function(ffi.Pointer<CassUserType>, int, CassInet)>();

  /// Sets a "inet" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$468(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$468(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$468Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              CassInet)>>('cass_user_type_set_inet_by_name');
  late final _camelCase$468 = _camelCase$468Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, CassInet)>();

  /// Same as cass_user_type_set_inet_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_inet_by_name()
  ///
  /// @see cass_user_type_set_inet_by_name()
  CassError_ camelCase$469(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    CassInet value,
  ) {
    return CassError_.fromValue(_camelCase$469(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$469Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              CassInet)>>('cass_user_type_set_inet_by_name_n');
  late final _camelCase$469 = _camelCase$469Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, CassInet)>();

  /// Sets an "decimal" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] varint
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$470(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    int scale,
  ) {
    return CassError_.fromValue(_camelCase$470(
      user_type,
      index,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$470Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              ffi.Int)>>('cass_user_type_set_decimal');
  late final _camelCase$470 = _camelCase$470Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, int, ffi.Pointer<cass_byte_t>,
          int, int)>();

  /// Sets "decimal" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] varint
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$471(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    int scale,
  ) {
    return CassError_.fromValue(_camelCase$471(
      user_type,
      name,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$471Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              ffi.Int)>>('cass_user_type_set_decimal_by_name');
  late final _camelCase$471 = _camelCase$471Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int, int)>();

  /// Same as cass_user_type_set_decimal_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] varint
  /// @param[in] varint_size
  /// @param[in] scale
  /// @return same as cass_user_type_set_decimal_by_name()
  ///
  /// @see cass_user_type_set_decimal_by_name()
  CassError_ camelCase$472(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<cass_byte_t> varint,
    int varint_size,
    int scale,
  ) {
    return CassError_.fromValue(_camelCase$472(
      user_type,
      name,
      name_length,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$472Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size,
              ffi.Int)>>('cass_user_type_set_decimal_by_name_n');
  late final _camelCase$472 = _camelCase$472Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int, int)>();

  /// Sets a "duration" in a user defined type at the specified index.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$473(
    ffi.Pointer<CassUserType> user_type,
    int index,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$473(
      user_type,
      index,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$473Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Size,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_user_type_set_duration');
  late final _camelCase$473 = _camelCase$473Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, int, int, int, int)>();

  /// Sets "duration" in a user defined type at the specified name.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$474(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$474(
      user_type,
      name,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$474Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_user_type_set_duration_by_name');
  late final _camelCase$474 = _camelCase$474Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int, int)>();

  /// Same as cass_user_type_set_duration_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] months
  /// @param[in] days
  /// @param[in] nanos
  /// @return same as cass_user_type_set_duration_by_name()
  ///
  /// @see cass_user_type_set_duration_by_name()
  CassError_ camelCase$475(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    Dartcass_int32_t months,
    Dartcass_int32_t days,
    Dartcass_int64_t nanos,
  ) {
    return CassError_.fromValue(_camelCase$475(
      user_type,
      name,
      name_length,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$475Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              cass_int32_t,
              cass_int32_t,
              cass_int64_t)>>('cass_user_type_set_duration_by_name_n');
  late final _camelCase$475 = _camelCase$475Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int, int,
          int, int)>();

  /// Sets a "list", "map" or "set" in a user defined type at the
  /// specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$476(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<CassCollection> value,
  ) {
    return CassError_.fromValue(_camelCase$476(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$476Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.Pointer<CassCollection>)>>('cass_user_type_set_collection');
  late final _camelCase$476 = _camelCase$476Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, int, ffi.Pointer<CassCollection>)>();

  /// Sets a "list", "map" or "set" in a user defined type at the
  /// specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$477(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassCollection> value,
  ) {
    return CassError_.fromValue(_camelCase$477(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$477Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassUserType>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CassCollection>)>>(
      'cass_user_type_set_collection_by_name');
  late final _camelCase$477 = _camelCase$477Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassCollection>)>();

  /// Same as cass_user_type_set_collection_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_collection_by_name()
  ///
  /// @see cass_user_type_set_collection_by_name()
  CassError_ camelCase$478(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassCollection> value,
  ) {
    return CassError_.fromValue(_camelCase$478(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$478Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(
                  ffi.Pointer<CassUserType>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<CassCollection>)>>(
      'cass_user_type_set_collection_by_name_n');
  late final _camelCase$478 = _camelCase$478Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassCollection>)>();

  /// Sets a "tuple" in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$479(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<CassTuple> value,
  ) {
    return CassError_.fromValue(_camelCase$479(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$479Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.Pointer<CassTuple>)>>('cass_user_type_set_tuple');
  late final _camelCase$479 = _camelCase$479Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, int, ffi.Pointer<CassTuple>)>();

  /// Sets a "tuple" in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$480(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassTuple> value,
  ) {
    return CassError_.fromValue(_camelCase$480(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$480Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<CassTuple>)>>('cass_user_type_set_tuple_by_name');
  late final _camelCase$480 = _camelCase$480Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassTuple>)>();

  /// Same as cass_user_type_set_tuple_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_tuple_by_name()
  ///
  /// @see cass_user_type_set_tuple_by_name()
  CassError_ camelCase$481(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassTuple> value,
  ) {
    return CassError_.fromValue(_camelCase$481(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$481Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassUserType>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<CassTuple>)>>('cass_user_type_set_tuple_by_name_n');
  late final _camelCase$481 = _camelCase$481Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassTuple>)>();

  /// Sets a user defined type in a user defined type at the specified index.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] index
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$482(
    ffi.Pointer<CassUserType> user_type,
    int index,
    ffi.Pointer<CassUserType> value,
  ) {
    return CassError_.fromValue(_camelCase$482(
      user_type,
      index,
      value,
    ));
  }

  late final _camelCase$482Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassUserType>, ffi.Size,
              ffi.Pointer<CassUserType>)>>('cass_user_type_set_user_type');
  late final _camelCase$482 = _camelCase$482Ptr.asFunction<
      int Function(
          ffi.Pointer<CassUserType>, int, ffi.Pointer<CassUserType>)>();

  /// Sets a user defined type in a user defined type at the specified name.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] value
  /// @return CASS_OK if successful, otherwise an error occurred.
  CassError_ camelCase$483(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CassUserType> value,
  ) {
    return CassError_.fromValue(_camelCase$483(
      user_type,
      name,
      value,
    ));
  }

  late final _camelCase$483Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassUserType>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<CassUserType>)>>(
      'cass_user_type_set_user_type_by_name');
  late final _camelCase$483 = _camelCase$483Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<CassUserType>)>();

  /// Same as cass_user_type_set_user_type_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassUserType
  ///
  /// @param[in] user_type
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @return same as cass_user_type_set_user_type_by_name()
  ///
  /// @see cass_user_type_set_user_type_by_name()
  CassError_ camelCase$484(
    ffi.Pointer<CassUserType> user_type,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<CassUserType> value,
  ) {
    return CassError_.fromValue(_camelCase$484(
      user_type,
      name,
      name_length,
      value,
    ));
  }

  late final _camelCase$484Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassUserType>,
                  ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<CassUserType>)>>(
      'cass_user_type_set_user_type_by_name_n');
  late final _camelCase$484 = _camelCase$484Ptr.asFunction<
      int Function(ffi.Pointer<CassUserType>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<CassUserType>)>();

  /// Frees a result instance.
  ///
  /// This method invalidates all values, rows, and
  /// iterators that were derived from this result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  void camelCase$485(
    ffi.Pointer<CassResult> result,
  ) {
    return _camelCase$485(
      result,
    );
  }

  late final _camelCase$485Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassResult>)>>(
          'cass_result_free');
  late final _camelCase$485 =
      _camelCase$485Ptr.asFunction<void Function(ffi.Pointer<CassResult>)>();

  /// Gets the number of rows for the specified result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @return The number of rows in the result.
  int camelCase$486(
    ffi.Pointer<CassResult> result,
  ) {
    return _camelCase$486(
      result,
    );
  }

  late final _camelCase$486Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassResult>)>>(
          'cass_result_row_count');
  late final _camelCase$486 =
      _camelCase$486Ptr.asFunction<int Function(ffi.Pointer<CassResult>)>();

  /// Gets the number of columns per row for the specified result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @return The number of columns per row in the result.
  int camelCase$487(
    ffi.Pointer<CassResult> result,
  ) {
    return _camelCase$487(
      result,
    );
  }

  late final _camelCase$487Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassResult>)>>(
          'cass_result_column_count');
  late final _camelCase$487 =
      _camelCase$487Ptr.asFunction<int Function(ffi.Pointer<CassResult>)>();

  /// Gets the column name at index for the specified result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @param[in] index
  /// @param[out] name The column name at the specified index.
  /// @param[out] name_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$488(
    ffi.Pointer<CassResult> result,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return CassError_.fromValue(_camelCase$488(
      result,
      index,
      name,
      name_length,
    ));
  }

  late final _camelCase$488Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassResult>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_result_column_name');
  late final _camelCase$488 = _camelCase$488Ptr.asFunction<
      int Function(ffi.Pointer<CassResult>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the column type at index for the specified result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @param[in] index
  /// @return The column type at the specified index. CASS_VALUE_TYPE_UNKNOWN
  /// is returned if the index is out of bounds.
  CassValueType_ camelCase$489(
    ffi.Pointer<CassResult> result,
    int index,
  ) {
    return CassValueType_.fromValue(_camelCase$489(
      result,
      index,
    ));
  }

  late final _camelCase$489Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassResult>, ffi.Size)>>('cass_result_column_type');
  late final _camelCase$489 = _camelCase$489Ptr
      .asFunction<int Function(ffi.Pointer<CassResult>, int)>();

  /// Gets the column data type at index for the specified result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @param[in] index
  /// @return The column type at the specified index. NULL is returned if the
  /// index is out of bounds.
  ffi.Pointer<CassDataType> camelCase$490(
    ffi.Pointer<CassResult> result,
    int index,
  ) {
    return _camelCase$490(
      result,
      index,
    );
  }

  late final _camelCase$490Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(ffi.Pointer<CassResult>,
              ffi.Size)>>('cass_result_column_data_type');
  late final _camelCase$490 = _camelCase$490Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassResult>, int)>();

  /// Gets the first row of the result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @return The first row of the result. NULL if there are no rows.
  ffi.Pointer<CassRow> camelCase$491(
    ffi.Pointer<CassResult> result,
  ) {
    return _camelCase$491(
      result,
    );
  }

  late final _camelCase$491Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassRow> Function(
              ffi.Pointer<CassResult>)>>('cass_result_first_row');
  late final _camelCase$491 = _camelCase$491Ptr
      .asFunction<ffi.Pointer<CassRow> Function(ffi.Pointer<CassResult>)>();

  /// Returns true if there are more pages.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @return cass_true if there are more pages
  cass_bool_t camelCase$492(
    ffi.Pointer<CassResult> result,
  ) {
    return cass_bool_t.fromValue(_camelCase$492(
      result,
    ));
  }

  late final _camelCase$492Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassResult>)>>(
      'cass_result_has_more_pages');
  late final _camelCase$492 =
      _camelCase$492Ptr.asFunction<int Function(ffi.Pointer<CassResult>)>();

  /// Gets the raw paging state from the result. The paging state is bound to the
  /// lifetime of the result object. If paging state needs to live beyond the
  /// lifetime of the result object it must be copied.
  ///
  /// <b>Warning:</b> The paging state should not be exposed to or come from
  /// untrusted environments. The paging state could be spoofed and potentially
  /// used to gain access to other data.
  ///
  /// @cassandra{2.0+}
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @param[out] paging_state
  /// @param[out] paging_state_size
  /// @return CASS_OK if successful, otherwise error occurred
  ///
  /// @see cass_statement_set_paging_state_token()
  CassError_ camelCase$493(
    ffi.Pointer<CassResult> result,
    ffi.Pointer<ffi.Pointer<ffi.Char>> paging_state,
    ffi.Pointer<ffi.Size> paging_state_size,
  ) {
    return CassError_.fromValue(_camelCase$493(
      result,
      paging_state,
      paging_state_size,
    ));
  }

  late final _camelCase$493Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_result_paging_state_token');
  late final _camelCase$493 = _camelCase$493Ptr.asFunction<
      int Function(ffi.Pointer<CassResult>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>)>();

  /// Frees an error result instance.
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  void camelCase$494(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return _camelCase$494(
      error_result,
    );
  }

  late final _camelCase$494Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassErrorResult>)>>(
      'cass_error_result_free');
  late final _camelCase$494 = _camelCase$494Ptr
      .asFunction<void Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets error code for the error result. This error code will always
  /// have an server error source.
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The server error code
  CassError_ camelCase$495(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return CassError_.fromValue(_camelCase$495(
      error_result,
    ));
  }

  late final _camelCase$495Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>)>>('cass_error_result_code');
  late final _camelCase$495 = _camelCase$495Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets consistency that triggered the error result of the
  /// following types:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_READ_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_WRITE_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_READ_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_WRITE_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_UNAVAILABLE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The consistency that triggered the error for a read timeout,
  /// write timeout or an unavailable error result. Undefined for other
  /// error result types.
  CassConsistency_ camelCase$496(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return CassConsistency_.fromValue(_camelCase$496(
      error_result,
    ));
  }

  late final _camelCase$496Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>)>>('cass_error_result_consistency');
  late final _camelCase$496 = _camelCase$496Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets the actual number of received responses, received acknowledgments
  /// or alive nodes for following error result types, respectively:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_READ_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_WRITE_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_READ_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_WRITE_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_UNAVAILABLE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The actual received responses for a read timeout, actual received
  /// acknowledgments for a write timeout or actual alive nodes for a unavailable
  /// error. Undefined for other error result types.
  int camelCase$497(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return _camelCase$497(
      error_result,
    );
  }

  late final _camelCase$497Ptr = _lookup<
          ffi
          .NativeFunction<cass_int32_t Function(ffi.Pointer<CassErrorResult>)>>(
      'cass_error_result_responses_received');
  late final _camelCase$497 = _camelCase$497Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets required responses, required acknowledgments or required alive nodes
  /// needed to successfully complete the request for following error result types,
  /// respectively:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_READ_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_WRITE_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_READ_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_WRITE_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_UNAVAILABLE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The required responses for a read time, required acknowledgments
  /// for a write timeout or required alive nodes for an unavailable error result.
  /// Undefined for other error result types.
  int camelCase$498(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return _camelCase$498(
      error_result,
    );
  }

  late final _camelCase$498Ptr = _lookup<
          ffi
          .NativeFunction<cass_int32_t Function(ffi.Pointer<CassErrorResult>)>>(
      'cass_error_result_responses_required');
  late final _camelCase$498 = _camelCase$498Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets the number of nodes that experienced failures for the following error types:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_READ_FAILURE</li>
  /// <li>CASS_ERROR_SERVER_WRITE_FAILURE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The number of nodes that failed during a read or write request.
  int camelCase$499(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return _camelCase$499(
      error_result,
    );
  }

  late final _camelCase$499Ptr = _lookup<
          ffi
          .NativeFunction<cass_int32_t Function(ffi.Pointer<CassErrorResult>)>>(
      'cass_error_result_num_failures');
  late final _camelCase$499 = _camelCase$499Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Determines whether the actual data was present in the responses from the
  /// replicas for the following error result types:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_READ_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_READ_FAILURE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return cass_true if the data was present in the received responses when the
  /// read timeout occurred. Undefined for other error result types.
  cass_bool_t camelCase$500(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return cass_bool_t.fromValue(_camelCase$500(
      error_result,
    ));
  }

  late final _camelCase$500Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>)>>('cass_error_result_data_present');
  late final _camelCase$500 = _camelCase$500Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets the write type of a request for the following error result types:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_WRITE_TIMEOUT</li>
  /// <li>CASS_ERROR_SERVER_WRITE_FAILURE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The type of the write that timed out. Undefined for
  /// other error result types.
  CassWriteType_ camelCase$501(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return CassWriteType_.fromValue(_camelCase$501(
      error_result,
    ));
  }

  late final _camelCase$501Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>)>>('cass_error_result_write_type');
  late final _camelCase$501 = _camelCase$501Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets the affected keyspace for the following error result types:
  ///
  /// <ul>
  /// <li>CASS_ERROR_SERVER_ALREADY_EXISTS</li>
  /// <li>CASS_ERROR_SERVER_FUNCTION_FAILURE</li>
  /// </ul>
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @param[out] keyspace
  /// @param[out] keyspace_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$502(
    ffi.Pointer<CassErrorResult> error_result,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keyspace,
    ffi.Pointer<ffi.Size> keyspace_length,
  ) {
    return CassError_.fromValue(_camelCase$502(
      error_result,
      keyspace,
      keyspace_length,
    ));
  }

  late final _camelCase$502Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_error_result_keyspace');
  late final _camelCase$502 = _camelCase$502Ptr.asFunction<
      int Function(ffi.Pointer<CassErrorResult>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the affected table for the already exists error
  /// (CASS_ERROR_SERVER_ALREADY_EXISTS) result type.
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @param[out] table
  /// @param[out] table_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$503(
    ffi.Pointer<CassErrorResult> error_result,
    ffi.Pointer<ffi.Pointer<ffi.Char>> table,
    ffi.Pointer<ffi.Size> table_length,
  ) {
    return CassError_.fromValue(_camelCase$503(
      error_result,
      table,
      table_length,
    ));
  }

  late final _camelCase$503Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_error_result_table');
  late final _camelCase$503 = _camelCase$503Ptr.asFunction<
      int Function(ffi.Pointer<CassErrorResult>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the affected function for the function failure error
  /// (CASS_ERROR_SERVER_FUNCTION_FAILURE) result type.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @param[out] function
  /// @param[out] function_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$504(
    ffi.Pointer<CassErrorResult> error_result,
    ffi.Pointer<ffi.Pointer<ffi.Char>> function,
    ffi.Pointer<ffi.Size> function_length,
  ) {
    return CassError_.fromValue(_camelCase$504(
      error_result,
      function,
      function_length,
    ));
  }

  late final _camelCase$504Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_error_result_function');
  late final _camelCase$504 = _camelCase$504Ptr.asFunction<
      int Function(ffi.Pointer<CassErrorResult>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the number of argument types for the function failure error
  /// (CASS_ERROR_SERVER_FUNCTION_FAILURE) result type.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @return The number of arguments for the affected function.
  int camelCase$505(
    ffi.Pointer<CassErrorResult> error_result,
  ) {
    return _camelCase$505(
      error_result,
    );
  }

  late final _camelCase$505Ptr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassErrorResult>)>>(
      'cass_error_num_arg_types');
  late final _camelCase$505 = _camelCase$505Ptr
      .asFunction<int Function(ffi.Pointer<CassErrorResult>)>();

  /// Gets the argument type at the specified index for the function failure
  /// error (CASS_ERROR_SERVER_FUNCTION_FAILURE) result type.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassErrorResult
  ///
  /// @param[in] error_result
  /// @param[in] index
  /// @param[out] arg_type
  /// @param[out] arg_type_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$506(
    ffi.Pointer<CassErrorResult> error_result,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg_type,
    ffi.Pointer<ffi.Size> arg_type_length,
  ) {
    return CassError_.fromValue(_camelCase$506(
      error_result,
      index,
      arg_type,
      arg_type_length,
    ));
  }

  late final _camelCase$506Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassErrorResult>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_error_result_arg_type');
  late final _camelCase$506 = _camelCase$506Ptr.asFunction<
      int Function(ffi.Pointer<CassErrorResult>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Frees an iterator instance.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  void camelCase$507(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$507(
      iterator,
    );
  }

  late final _camelCase$507Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassIterator>)>>(
          'cass_iterator_free');
  late final _camelCase$507 =
      _camelCase$507Ptr.asFunction<void Function(ffi.Pointer<CassIterator>)>();

  /// Gets the type of the specified iterator.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return The type of the iterator.
  CassIteratorType_ camelCase$508(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return CassIteratorType_.fromValue(_camelCase$508(
      iterator,
    ));
  }

  late final _camelCase$508Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassIterator>)>>(
      'cass_iterator_type');
  late final _camelCase$508 =
      _camelCase$508Ptr.asFunction<int Function(ffi.Pointer<CassIterator>)>();

  /// Creates a new iterator for the specified result. This can be
  /// used to iterate over rows in the result.
  ///
  /// @public @memberof CassResult
  ///
  /// @param[in] result
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$509(
    ffi.Pointer<CassResult> result,
  ) {
    return _camelCase$509(
      result,
    );
  }

  late final _camelCase$509Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIterator> Function(
              ffi.Pointer<CassResult>)>>('cass_iterator_from_result');
  late final _camelCase$509 = _camelCase$509Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassResult>)>();

  /// Creates a new iterator for the specified row. This can be
  /// used to iterate over columns in a row.
  ///
  /// @public @memberof CassRow
  ///
  /// @param[in] row
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$510(
    ffi.Pointer<CassRow> row,
  ) {
    return _camelCase$510(
      row,
    );
  }

  late final _camelCase$510Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIterator> Function(
              ffi.Pointer<CassRow>)>>('cass_iterator_from_row');
  late final _camelCase$510 = _camelCase$510Ptr
      .asFunction<ffi.Pointer<CassIterator> Function(ffi.Pointer<CassRow>)>();

  /// Creates a new iterator for the specified collection. This can be
  /// used to iterate over values in a collection.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return A new iterator that must be freed. NULL returned if the
  /// value is not a collection.
  ///
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$511(
    ffi.Pointer<CassValue> value,
  ) {
    return _camelCase$511(
      value,
    );
  }

  late final _camelCase$511Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIterator> Function(
              ffi.Pointer<CassValue>)>>('cass_iterator_from_collection');
  late final _camelCase$511 = _camelCase$511Ptr
      .asFunction<ffi.Pointer<CassIterator> Function(ffi.Pointer<CassValue>)>();

  /// Creates a new iterator for the specified map. This can be
  /// used to iterate over key/value pairs in a map.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return A new iterator that must be freed. NULL returned if the
  /// value is not a map.
  ///
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$512(
    ffi.Pointer<CassValue> value,
  ) {
    return _camelCase$512(
      value,
    );
  }

  late final _camelCase$512Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIterator> Function(
              ffi.Pointer<CassValue>)>>('cass_iterator_from_map');
  late final _camelCase$512 = _camelCase$512Ptr
      .asFunction<ffi.Pointer<CassIterator> Function(ffi.Pointer<CassValue>)>();

  /// Creates a new iterator for the specified tuple. This can be
  /// used to iterate over values in a tuple.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return A new iterator that must be freed. NULL returned if the
  /// value is not a tuple.
  ///
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$513(
    ffi.Pointer<CassValue> value,
  ) {
    return _camelCase$513(
      value,
    );
  }

  late final _camelCase$513Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIterator> Function(
              ffi.Pointer<CassValue>)>>('cass_iterator_from_tuple');
  late final _camelCase$513 = _camelCase$513Ptr
      .asFunction<ffi.Pointer<CassIterator> Function(ffi.Pointer<CassValue>)>();

  /// Creates a new iterator for the specified user defined type. This can be
  /// used to iterate over fields in a user defined type.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return A new iterator that must be freed. NULL returned if the
  /// value is not a user defined type.
  ///
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$514(
    ffi.Pointer<CassValue> value,
  ) {
    return _camelCase$514(
      value,
    );
  }

  late final _camelCase$514Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIterator> Function(
              ffi.Pointer<CassValue>)>>('cass_iterator_fields_from_user_type');
  late final _camelCase$514 = _camelCase$514Ptr
      .asFunction<ffi.Pointer<CassIterator> Function(ffi.Pointer<CassValue>)>();

  /// Creates a new iterator for the specified schema metadata.
  /// This can be used to iterate over keyspace.
  ///
  /// @public @memberof CassSchemaMeta
  ///
  /// @param[in] schema_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_keyspace_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$515(
    ffi.Pointer<CassSchemaMeta> schema_meta,
  ) {
    return _camelCase$515(
      schema_meta,
    );
  }

  late final _camelCase$515Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassSchemaMeta>)>>(
      'cass_iterator_keyspaces_from_schema_meta');
  late final _camelCase$515 = _camelCase$515Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassSchemaMeta>)>();

  /// Creates a new iterator for the specified keyspace metadata.
  /// This can be used to iterate over tables.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_table_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$516(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return _camelCase$516(
      keyspace_meta,
    );
  }

  late final _camelCase$516Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassKeyspaceMeta>)>>(
      'cass_iterator_tables_from_keyspace_meta');
  late final _camelCase$516 = _camelCase$516Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Creates a new iterator for the specified keyspace metadata.
  /// This can be used to iterate over views.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_materialized_view_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$517(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return _camelCase$517(
      keyspace_meta,
    );
  }

  late final _camelCase$517Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassKeyspaceMeta>)>>(
      'cass_iterator_materialized_views_from_keyspace_meta');
  late final _camelCase$517 = _camelCase$517Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Creates a new iterator for the specified keyspace metadata.
  /// This can be used to iterate over types.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_user_type()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$518(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return _camelCase$518(
      keyspace_meta,
    );
  }

  late final _camelCase$518Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassKeyspaceMeta>)>>(
      'cass_iterator_user_types_from_keyspace_meta');
  late final _camelCase$518 = _camelCase$518Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Creates a new iterator for the specified keyspace metadata.
  /// This can be used to iterate over functions.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_function_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$519(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return _camelCase$519(
      keyspace_meta,
    );
  }

  late final _camelCase$519Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassKeyspaceMeta>)>>(
      'cass_iterator_functions_from_keyspace_meta');
  late final _camelCase$519 = _camelCase$519Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Creates a new iterator for the specified keyspace metadata.
  /// This can be used to iterate over aggregates.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_aggregate_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$520(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return _camelCase$520(
      keyspace_meta,
    );
  }

  late final _camelCase$520Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassKeyspaceMeta>)>>(
      'cass_iterator_aggregates_from_keyspace_meta');
  late final _camelCase$520 = _camelCase$520Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Creates a new fields iterator for the specified keyspace metadata. Metadata
  /// fields allow direct access to the column data found in the underlying
  /// "keyspaces" metadata table. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @public @memberof CassKeyspaceMeta
  ///
  /// @param[in] keyspace_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field_name()
  /// @see cass_iterator_get_meta_field_value()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$521(
    ffi.Pointer<CassKeyspaceMeta> keyspace_meta,
  ) {
    return _camelCase$521(
      keyspace_meta,
    );
  }

  late final _camelCase$521Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassKeyspaceMeta>)>>(
      'cass_iterator_fields_from_keyspace_meta');
  late final _camelCase$521 = _camelCase$521Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassKeyspaceMeta>)>();

  /// Creates a new iterator for the specified table metadata.
  /// This can be used to iterate over columns.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_column_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$522(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$522(
      table_meta,
    );
  }

  late final _camelCase$522Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_iterator_columns_from_table_meta');
  late final _camelCase$522 = _camelCase$522Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>();

  /// Creates a new iterator for the specified table metadata.
  /// This can be used to iterate over indexes.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_index_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$523(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$523(
      table_meta,
    );
  }

  late final _camelCase$523Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_iterator_indexes_from_table_meta');
  late final _camelCase$523 = _camelCase$523Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>();

  /// Creates a new iterator for the specified materialized view metadata.
  /// This can be used to iterate over columns.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_materialized_view_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$524(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$524(
      table_meta,
    );
  }

  late final _camelCase$524Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_iterator_materialized_views_from_table_meta');
  late final _camelCase$524 = _camelCase$524Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>();

  /// Creates a new fields iterator for the specified table metadata. Metadata
  /// fields allow direct access to the column data found in the underlying
  /// "tables" metadata table. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @public @memberof CassTableMeta
  ///
  /// @param[in] table_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field_name()
  /// @see cass_iterator_get_meta_field_value()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$525(
    ffi.Pointer<CassTableMeta> table_meta,
  ) {
    return _camelCase$525(
      table_meta,
    );
  }

  late final _camelCase$525Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>>(
      'cass_iterator_fields_from_table_meta');
  late final _camelCase$525 = _camelCase$525Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassTableMeta>)>();

  /// Creates a new iterator for the specified materialized view metadata.
  /// This can be used to iterate over columns.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_column_meta()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$526(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
  ) {
    return _camelCase$526(
      view_meta,
    );
  }

  late final _camelCase$526Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassMaterializedViewMeta>)>>(
      'cass_iterator_columns_from_materialized_view_meta');
  late final _camelCase$526 = _camelCase$526Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(
          ffi.Pointer<CassMaterializedViewMeta>)>();

  /// Creates a new fields iterator for the specified materialized view metadata.
  /// Metadata fields allow direct access to the column data found in the
  /// underlying "views" metadata view. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassMaterializedViewMeta
  ///
  /// @param[in] view_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field_name()
  /// @see cass_iterator_get_meta_field_value()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$527(
    ffi.Pointer<CassMaterializedViewMeta> view_meta,
  ) {
    return _camelCase$527(
      view_meta,
    );
  }

  late final _camelCase$527Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassMaterializedViewMeta>)>>(
      'cass_iterator_fields_from_materialized_view_meta');
  late final _camelCase$527 = _camelCase$527Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(
          ffi.Pointer<CassMaterializedViewMeta>)>();

  /// Creates a new fields iterator for the specified column metadata. Metadata
  /// fields allow direct access to the column data found in the underlying
  /// "columns" metadata table. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @public @memberof CassColumnMeta
  ///
  /// @param[in] column_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field_name()
  /// @see cass_iterator_get_meta_field_value()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$528(
    ffi.Pointer<CassColumnMeta> column_meta,
  ) {
    return _camelCase$528(
      column_meta,
    );
  }

  late final _camelCase$528Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassColumnMeta>)>>(
      'cass_iterator_fields_from_column_meta');
  late final _camelCase$528 = _camelCase$528Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassColumnMeta>)>();

  /// Creates a new fields iterator for the specified index metadata. Metadata
  /// fields allow direct access to the index data found in the underlying
  /// "indexes" metadata table. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @public @memberof CassIndexMeta
  ///
  /// @param[in] index_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field_name()
  /// @see cass_iterator_get_meta_field_value()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$529(
    ffi.Pointer<CassIndexMeta> index_meta,
  ) {
    return _camelCase$529(
      index_meta,
    );
  }

  late final _camelCase$529Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(ffi.Pointer<CassIndexMeta>)>>(
      'cass_iterator_fields_from_index_meta');
  late final _camelCase$529 = _camelCase$529Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassIndexMeta>)>();

  /// Creates a new fields iterator for the specified function metadata. Metadata
  /// fields allow direct access to the column data found in the underlying
  /// "functions" metadata table. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassFunctionMeta
  ///
  /// @param[in] function_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$530(
    ffi.Pointer<CassFunctionMeta> function_meta,
  ) {
    return _camelCase$530(
      function_meta,
    );
  }

  late final _camelCase$530Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassFunctionMeta>)>>(
      'cass_iterator_fields_from_function_meta');
  late final _camelCase$530 = _camelCase$530Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassFunctionMeta>)>();

  /// Creates a new fields iterator for the specified aggregate metadata. Metadata
  /// fields allow direct access to the column data found in the underlying
  /// "aggregates" metadata table. This can be used to iterate those metadata
  /// field entries.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassAggregateMeta
  ///
  /// @param[in] aggregate_meta
  /// @return A new iterator that must be freed.
  ///
  /// @see cass_iterator_get_meta_field()
  /// @see cass_iterator_free()
  ffi.Pointer<CassIterator> camelCase$531(
    ffi.Pointer<CassAggregateMeta> aggregate_meta,
  ) {
    return _camelCase$531(
      aggregate_meta,
    );
  }

  late final _camelCase$531Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassIterator> Function(
                  ffi.Pointer<CassAggregateMeta>)>>(
      'cass_iterator_fields_from_aggregate_meta');
  late final _camelCase$531 = _camelCase$531Ptr.asFunction<
      ffi.Pointer<CassIterator> Function(ffi.Pointer<CassAggregateMeta>)>();

  /// Advance the iterator to the next row, column or collection item.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return false if no more rows, columns or items, otherwise true
  cass_bool_t camelCase$532(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return cass_bool_t.fromValue(_camelCase$532(
      iterator,
    ));
  }

  late final _camelCase$532Ptr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassIterator>)>>(
      'cass_iterator_next');
  late final _camelCase$532 =
      _camelCase$532Ptr.asFunction<int Function(ffi.Pointer<CassIterator>)>();

  /// Gets the row at the result iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// row returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A row
  ffi.Pointer<CassRow> camelCase$533(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$533(
      iterator,
    );
  }

  late final _camelCase$533Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassRow> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_row');
  late final _camelCase$533 = _camelCase$533Ptr
      .asFunction<ffi.Pointer<CassRow> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the column value at the row iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// column returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A value
  ffi.Pointer<CassValue> camelCase$534(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$534(
      iterator,
    );
  }

  late final _camelCase$534Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_column');
  late final _camelCase$534 = _camelCase$534Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the value at a collection or tuple iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A value
  ffi.Pointer<CassValue> camelCase$535(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$535(
      iterator,
    );
  }

  late final _camelCase$535Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_value');
  late final _camelCase$535 = _camelCase$535Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the key at the map iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A value
  ffi.Pointer<CassValue> camelCase$536(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$536(
      iterator,
    );
  }

  late final _camelCase$536Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_map_key');
  late final _camelCase$536 = _camelCase$536Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the value at the map iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A value
  ffi.Pointer<CassValue> camelCase$537(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$537(
      iterator,
    );
  }

  late final _camelCase$537Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_map_value');
  late final _camelCase$537 = _camelCase$537Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the field name at the user type defined iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// name returned by this method.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @param[out] name
  /// @param[out] name_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$538(
    ffi.Pointer<CassIterator> iterator,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return CassError_.fromValue(_camelCase$538(
      iterator,
      name,
      name_length,
    ));
  }

  late final _camelCase$538Ptr = _lookup<
          ffi.NativeFunction<
              ffi.UnsignedInt Function(ffi.Pointer<CassIterator>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>>(
      'cass_iterator_get_user_type_field_name');
  late final _camelCase$538 = _camelCase$538Ptr.asFunction<
      int Function(ffi.Pointer<CassIterator>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the field value at the user type defined iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A value
  ffi.Pointer<CassValue> camelCase$539(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$539(
      iterator,
    );
  }

  late final _camelCase$539Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>>(
      'cass_iterator_get_user_type_field_value');
  late final _camelCase$539 = _camelCase$539Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the keyspace metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A keyspace metadata entry
  ffi.Pointer<CassKeyspaceMeta> camelCase$540(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$540(
      iterator,
    );
  }

  late final _camelCase$540Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassKeyspaceMeta> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_keyspace_meta');
  late final _camelCase$540 = _camelCase$540Ptr.asFunction<
      ffi.Pointer<CassKeyspaceMeta> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the table metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A table metadata entry
  ffi.Pointer<CassTableMeta> camelCase$541(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$541(
      iterator,
    );
  }

  late final _camelCase$541Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassTableMeta> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_table_meta');
  late final _camelCase$541 = _camelCase$541Ptr.asFunction<
      ffi.Pointer<CassTableMeta> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the materialized view metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @cassandra{3.0+}
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A materialized view metadata entry
  ffi.Pointer<CassMaterializedViewMeta> camelCase$542(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$542(
      iterator,
    );
  }

  late final _camelCase$542Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassMaterializedViewMeta> Function(
                  ffi.Pointer<CassIterator>)>>(
      'cass_iterator_get_materialized_view_meta');
  late final _camelCase$542 = _camelCase$542Ptr.asFunction<
      ffi.Pointer<CassMaterializedViewMeta> Function(
          ffi.Pointer<CassIterator>)>();

  /// Gets the type metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A type metadata entry
  ffi.Pointer<CassDataType> camelCase$543(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$543(
      iterator,
    );
  }

  late final _camelCase$543Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_user_type');
  late final _camelCase$543 = _camelCase$543Ptr.asFunction<
      ffi.Pointer<CassDataType> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the function metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A function metadata entry
  ffi.Pointer<CassFunctionMeta> camelCase$544(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$544(
      iterator,
    );
  }

  late final _camelCase$544Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassFunctionMeta> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_function_meta');
  late final _camelCase$544 = _camelCase$544Ptr.asFunction<
      ffi.Pointer<CassFunctionMeta> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the aggregate metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A aggregate metadata entry
  ffi.Pointer<CassAggregateMeta> camelCase$545(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$545(
      iterator,
    );
  }

  late final _camelCase$545Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassAggregateMeta> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_aggregate_meta');
  late final _camelCase$545 = _camelCase$545Ptr.asFunction<
      ffi.Pointer<CassAggregateMeta> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the column metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A column metadata entry
  ffi.Pointer<CassColumnMeta> camelCase$546(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$546(
      iterator,
    );
  }

  late final _camelCase$546Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassColumnMeta> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_column_meta');
  late final _camelCase$546 = _camelCase$546Ptr.asFunction<
      ffi.Pointer<CassColumnMeta> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the index metadata entry at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A index metadata entry
  ffi.Pointer<CassIndexMeta> camelCase$547(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$547(
      iterator,
    );
  }

  late final _camelCase$547Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassIndexMeta> Function(
              ffi.Pointer<CassIterator>)>>('cass_iterator_get_index_meta');
  late final _camelCase$547 = _camelCase$547Ptr.asFunction<
      ffi.Pointer<CassIndexMeta> Function(ffi.Pointer<CassIterator>)>();

  /// Gets the metadata field name at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @param[out] name
  /// @param[out] name_length
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$548(
    ffi.Pointer<CassIterator> iterator,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
    ffi.Pointer<ffi.Size> name_length,
  ) {
    return CassError_.fromValue(_camelCase$548(
      iterator,
      name,
      name_length,
    ));
  }

  late final _camelCase$548Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassIterator>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_iterator_get_meta_field_name');
  late final _camelCase$548 = _camelCase$548Ptr.asFunction<
      int Function(ffi.Pointer<CassIterator>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  /// Gets the metadata field value at the iterator's current position.
  ///
  /// Calling cass_iterator_next() will invalidate the previous
  /// value returned by this method.
  ///
  /// @public @memberof CassIterator
  ///
  /// @param[in] iterator
  /// @return A metadata field value
  ffi.Pointer<CassValue> camelCase$549(
    ffi.Pointer<CassIterator> iterator,
  ) {
    return _camelCase$549(
      iterator,
    );
  }

  late final _camelCase$549Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>>(
      'cass_iterator_get_meta_field_value');
  late final _camelCase$549 = _camelCase$549Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassIterator>)>();

  /// Get the column value at index for the specified row.
  ///
  /// @public @memberof CassRow
  ///
  /// @param[in] row
  /// @param[in] index
  /// @return The column value at the specified index. NULL is
  /// returned if the index is out of bounds.
  ffi.Pointer<CassValue> camelCase$550(
    ffi.Pointer<CassRow> row,
    int index,
  ) {
    return _camelCase$550(
      row,
      index,
    );
  }

  late final _camelCase$550Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassRow>, ffi.Size)>>('cass_row_get_column');
  late final _camelCase$550 = _camelCase$550Ptr
      .asFunction<ffi.Pointer<CassValue> Function(ffi.Pointer<CassRow>, int)>();

  /// Get the column value by name for the specified row.
  ///
  /// @public @memberof CassRow
  ///
  /// @param[in] row
  /// @param[in] name
  /// @return The column value for the specified name. NULL is
  /// returned if the column does not exist.
  ffi.Pointer<CassValue> camelCase$551(
    ffi.Pointer<CassRow> row,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$551(
      row,
      name,
    );
  }

  late final _camelCase$551Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(ffi.Pointer<CassRow>,
              ffi.Pointer<ffi.Char>)>>('cass_row_get_column_by_name');
  late final _camelCase$551 = _camelCase$551Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassRow>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_row_get_column_by_name(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassRow
  ///
  /// @param[in] row
  /// @param[in] name
  /// @param[in] name_length
  /// @return same as cass_row_get_column_by_name()
  ///
  /// @see cass_row_get_column_by_name()
  ffi.Pointer<CassValue> camelCase$552(
    ffi.Pointer<CassRow> row,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$552(
      row,
      name,
      name_length,
    );
  }

  late final _camelCase$552Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassValue> Function(
              ffi.Pointer<CassRow>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_row_get_column_by_name_n');
  late final _camelCase$552 = _camelCase$552Ptr.asFunction<
      ffi.Pointer<CassValue> Function(
          ffi.Pointer<CassRow>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the data type of a value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return Returns a reference to the data type of the value.
  /// Do not free this reference as it is bound to the lifetime of the value.
  ffi.Pointer<CassDataType> camelCase$553(
    ffi.Pointer<CassValue> value,
  ) {
    return _camelCase$553(
      value,
    );
  }

  late final _camelCase$553Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassDataType> Function(
              ffi.Pointer<CassValue>)>>('cass_value_data_type');
  late final _camelCase$553 = _camelCase$553Ptr
      .asFunction<ffi.Pointer<CassDataType> Function(ffi.Pointer<CassValue>)>();

  /// Gets an int8 for the specified value.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$554(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_int8_t> output,
  ) {
    return CassError_.fromValue(_camelCase$554(
      value,
      output,
    ));
  }

  late final _camelCase$554Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_int8_t>)>>('cass_value_get_int8');
  late final _camelCase$554 = _camelCase$554Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_int8_t>)>();

  /// Gets an int16 for the specified value.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$555(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_int16_t> output,
  ) {
    return CassError_.fromValue(_camelCase$555(
      value,
      output,
    ));
  }

  late final _camelCase$555Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_int16_t>)>>('cass_value_get_int16');
  late final _camelCase$555 = _camelCase$555Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_int16_t>)>();

  /// Gets an int32 for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$556(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_int32_t> output,
  ) {
    return CassError_.fromValue(_camelCase$556(
      value,
      output,
    ));
  }

  late final _camelCase$556Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_int32_t>)>>('cass_value_get_int32');
  late final _camelCase$556 = _camelCase$556Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_int32_t>)>();

  /// Gets an uint32 for the specified value.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$557(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_uint32_t> output,
  ) {
    return CassError_.fromValue(_camelCase$557(
      value,
      output,
    ));
  }

  late final _camelCase$557Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_uint32_t>)>>('cass_value_get_uint32');
  late final _camelCase$557 = _camelCase$557Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_uint32_t>)>();

  /// Gets an int64 for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$558(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_int64_t> output,
  ) {
    return CassError_.fromValue(_camelCase$558(
      value,
      output,
    ));
  }

  late final _camelCase$558Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_int64_t>)>>('cass_value_get_int64');
  late final _camelCase$558 = _camelCase$558Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_int64_t>)>();

  /// Gets a float for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$559(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_float_t> output,
  ) {
    return CassError_.fromValue(_camelCase$559(
      value,
      output,
    ));
  }

  late final _camelCase$559Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_float_t>)>>('cass_value_get_float');
  late final _camelCase$559 = _camelCase$559Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_float_t>)>();

  /// Gets a double for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$560(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_double_t> output,
  ) {
    return CassError_.fromValue(_camelCase$560(
      value,
      output,
    ));
  }

  late final _camelCase$560Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<cass_double_t>)>>('cass_value_get_double');
  late final _camelCase$560 = _camelCase$560Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_double_t>)>();

  /// Gets a bool for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$561(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<ffi.UnsignedInt> output,
  ) {
    return CassError_.fromValue(_camelCase$561(
      value,
      output,
    ));
  }

  late final _camelCase$561Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<ffi.UnsignedInt>)>>('cass_value_get_bool');
  late final _camelCase$561 = _camelCase$561Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// Gets a UUID for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$562(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<CassUuid> output,
  ) {
    return CassError_.fromValue(_camelCase$562(
      value,
      output,
    ));
  }

  late final _camelCase$562Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<CassUuid>)>>('cass_value_get_uuid');
  late final _camelCase$562 = _camelCase$562Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<CassUuid>)>();

  /// Gets an INET for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$563(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<CassInet> output,
  ) {
    return CassError_.fromValue(_camelCase$563(
      value,
      output,
    ));
  }

  late final _camelCase$563Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<CassValue>,
              ffi.Pointer<CassInet>)>>('cass_value_get_inet');
  late final _camelCase$563 = _camelCase$563Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<CassInet>)>();

  /// Gets a string for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @param[out] output_size
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$564(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<ffi.Pointer<ffi.Char>> output,
    ffi.Pointer<ffi.Size> output_size,
  ) {
    return CassError_.fromValue(_camelCase$564(
      value,
      output,
      output_size,
    ));
  }

  late final _camelCase$564Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassValue>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('cass_value_get_string');
  late final _camelCase$564 = _camelCase$564Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Size>)>();

  /// Gets the bytes of the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] output
  /// @param[out] output_size
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$565(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<ffi.Pointer<cass_byte_t>> output,
    ffi.Pointer<ffi.Size> output_size,
  ) {
    return CassError_.fromValue(_camelCase$565(
      value,
      output,
      output_size,
    ));
  }

  late final _camelCase$565Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassValue>,
              ffi.Pointer<ffi.Pointer<cass_byte_t>>,
              ffi.Pointer<ffi.Size>)>>('cass_value_get_bytes');
  late final _camelCase$565 = _camelCase$565Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>,
          ffi.Pointer<ffi.Pointer<cass_byte_t>>, ffi.Pointer<ffi.Size>)>();

  /// Gets a decimal for the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] varint
  /// @param[out] varint_size
  /// @param[out] scale
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$566(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<ffi.Pointer<cass_byte_t>> varint,
    ffi.Pointer<ffi.Size> varint_size,
    ffi.Pointer<cass_int32_t> scale,
  ) {
    return CassError_.fromValue(_camelCase$566(
      value,
      varint,
      varint_size,
      scale,
    ));
  }

  late final _camelCase$566Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassValue>,
              ffi.Pointer<ffi.Pointer<cass_byte_t>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<cass_int32_t>)>>('cass_value_get_decimal');
  late final _camelCase$566 = _camelCase$566Ptr.asFunction<
      int Function(
          ffi.Pointer<CassValue>,
          ffi.Pointer<ffi.Pointer<cass_byte_t>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<cass_int32_t>)>();

  /// Gets a duration for the specified value.
  ///
  /// @cassandra{3.10+}
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @param[out] months
  /// @param[out] days
  /// @param[out] nanos
  /// @return CASS_OK if successful, otherwise error occurred
  CassError_ camelCase$567(
    ffi.Pointer<CassValue> value,
    ffi.Pointer<cass_int32_t> months,
    ffi.Pointer<cass_int32_t> days,
    ffi.Pointer<cass_int64_t> nanos,
  ) {
    return CassError_.fromValue(_camelCase$567(
      value,
      months,
      days,
      nanos,
    ));
  }

  late final _camelCase$567Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<CassValue>,
              ffi.Pointer<cass_int32_t>,
              ffi.Pointer<cass_int32_t>,
              ffi.Pointer<cass_int64_t>)>>('cass_value_get_duration');
  late final _camelCase$567 = _camelCase$567Ptr.asFunction<
      int Function(ffi.Pointer<CassValue>, ffi.Pointer<cass_int32_t>,
          ffi.Pointer<cass_int32_t>, ffi.Pointer<cass_int64_t>)>();

  /// Gets the type of the specified value.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return The type of the specified value.
  CassValueType_ camelCase$568(
    ffi.Pointer<CassValue> value,
  ) {
    return CassValueType_.fromValue(_camelCase$568(
      value,
    ));
  }

  late final _camelCase$568Ptr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassValue>)>>(
      'cass_value_type');
  late final _camelCase$568 =
      _camelCase$568Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Returns true if a specified value is null.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return true if the value is null, otherwise false.
  cass_bool_t camelCase$569(
    ffi.Pointer<CassValue> value,
  ) {
    return cass_bool_t.fromValue(_camelCase$569(
      value,
    ));
  }

  late final _camelCase$569Ptr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassValue>)>>(
      'cass_value_is_null');
  late final _camelCase$569 =
      _camelCase$569Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Returns true if a specified value is a collection.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return true if the value is a collection, otherwise false.
  cass_bool_t camelCase$570(
    ffi.Pointer<CassValue> value,
  ) {
    return cass_bool_t.fromValue(_camelCase$570(
      value,
    ));
  }

  late final _camelCase$570Ptr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassValue>)>>(
      'cass_value_is_collection');
  late final _camelCase$570 =
      _camelCase$570Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Returns true if a specified value is a duration.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] value
  /// @return true if the value is a duration, otherwise false.
  cass_bool_t camelCase$571(
    ffi.Pointer<CassValue> value,
  ) {
    return cass_bool_t.fromValue(_camelCase$571(
      value,
    ));
  }

  late final _camelCase$571Ptr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassValue>)>>(
      'cass_value_is_duration');
  late final _camelCase$571 =
      _camelCase$571Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Get the number of items in a collection. Works for all collection types.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] collection
  /// @return Count of items in a collection. 0 if not a collection.
  int camelCase$572(
    ffi.Pointer<CassValue> collection,
  ) {
    return _camelCase$572(
      collection,
    );
  }

  late final _camelCase$572Ptr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<CassValue>)>>(
          'cass_value_item_count');
  late final _camelCase$572 =
      _camelCase$572Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Get the primary sub-type for a collection. This returns the sub-type for a
  /// list or set and the key type for a map.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] collection
  /// @return The type of the primary sub-type. CASS_VALUE_TYPE_UNKNOWN
  /// returned if not a collection.
  CassValueType_ camelCase$573(
    ffi.Pointer<CassValue> collection,
  ) {
    return CassValueType_.fromValue(_camelCase$573(
      collection,
    ));
  }

  late final _camelCase$573Ptr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassValue>)>>(
      'cass_value_primary_sub_type');
  late final _camelCase$573 =
      _camelCase$573Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Get the secondary sub-type for a collection. This returns the value type for a
  /// map.
  ///
  /// @public @memberof CassValue
  ///
  /// @param[in] collection
  /// @return The type of the primary sub-type. CASS_VALUE_TYPE_UNKNOWN
  /// returned if not a collection or not a map.
  CassValueType_ camelCase$574(
    ffi.Pointer<CassValue> collection,
  ) {
    return CassValueType_.fromValue(_camelCase$574(
      collection,
    ));
  }

  late final _camelCase$574Ptr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<CassValue>)>>(
      'cass_value_secondary_sub_type');
  late final _camelCase$574 =
      _camelCase$574Ptr.asFunction<int Function(ffi.Pointer<CassValue>)>();

  /// Creates a new UUID generator.
  ///
  /// <b>Note:</b> This object is thread-safe. It is best practice to create and reuse
  /// a single object per application.
  ///
  /// <b>Note:</b> If unique node information (IP address) is unable to be determined
  /// then random node information will be generated.
  ///
  /// @public @memberof CassUuidGen
  ///
  /// @return Returns a UUID generator that must be freed.
  ///
  /// @see cass_uuid_gen_free()
  /// @see cass_uuid_gen_new_with_node()
  ffi.Pointer<CassUuidGen> camelCase$575() {
    return _camelCase$575();
  }

  late final _camelCase$575Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassUuidGen> Function()>>(
          'cass_uuid_gen_new');
  late final _camelCase$575 =
      _camelCase$575Ptr.asFunction<ffi.Pointer<CassUuidGen> Function()>();

  /// Creates a new UUID generator with custom node information.
  ///
  /// <b>Note:</b> This object is thread-safe. It is best practice to create and reuse
  /// a single object per application.
  ///
  /// @public @memberof CassUuidGen
  ///
  /// @return Returns a UUID generator that must be freed.
  ///
  /// @see cass_uuid_gen_free()
  ffi.Pointer<CassUuidGen> camelCase$576(
    int node,
  ) {
    return _camelCase$576(
      node,
    );
  }

  late final _camelCase$576Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CassUuidGen> Function(cass_uint64_t)>>(
      'cass_uuid_gen_new_with_node');
  late final _camelCase$576 =
      _camelCase$576Ptr.asFunction<ffi.Pointer<CassUuidGen> Function(int)>();

  /// Frees a UUID generator instance.
  ///
  /// @public @memberof CassUuidGen
  ///
  /// @param[in] uuid_gen
  void camelCase$577(
    ffi.Pointer<CassUuidGen> uuid_gen,
  ) {
    return _camelCase$577(
      uuid_gen,
    );
  }

  late final _camelCase$577Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassUuidGen>)>>(
          'cass_uuid_gen_free');
  late final _camelCase$577 =
      _camelCase$577Ptr.asFunction<void Function(ffi.Pointer<CassUuidGen>)>();

  /// Generates a V1 (time) UUID.
  ///
  /// <b>Note:</b> This method is thread-safe
  ///
  /// @public @memberof CassUuidGen
  ///
  /// @param[in] uuid_gen
  /// @param[out] output A V1 UUID for the current time.
  void camelCase$578(
    ffi.Pointer<CassUuidGen> uuid_gen,
    ffi.Pointer<CassUuid> output,
  ) {
    return _camelCase$578(
      uuid_gen,
      output,
    );
  }

  late final _camelCase$578Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassUuidGen>,
              ffi.Pointer<CassUuid>)>>('cass_uuid_gen_time');
  late final _camelCase$578 = _camelCase$578Ptr.asFunction<
      void Function(ffi.Pointer<CassUuidGen>, ffi.Pointer<CassUuid>)>();

  /// Generates a new V4 (random) UUID
  ///
  /// <b>Note:</b>: This method is thread-safe
  ///
  /// @public @memberof CassUuidGen
  ///
  /// @param[in] uuid_gen
  /// @param output A randomly generated V4 UUID.
  void camelCase$579(
    ffi.Pointer<CassUuidGen> uuid_gen,
    ffi.Pointer<CassUuid> output,
  ) {
    return _camelCase$579(
      uuid_gen,
      output,
    );
  }

  late final _camelCase$579Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassUuidGen>,
              ffi.Pointer<CassUuid>)>>('cass_uuid_gen_random');
  late final _camelCase$579 = _camelCase$579Ptr.asFunction<
      void Function(ffi.Pointer<CassUuidGen>, ffi.Pointer<CassUuid>)>();

  /// Generates a V1 (time) UUID for the specified time.
  ///
  /// <b>Note:</b>: This method is thread-safe
  ///
  /// @public @memberof CassUuidGen
  ///
  /// @param[in] uuid_gen
  /// @param[in] timestamp
  /// @param[out] output A V1 UUID for the specified time.
  void camelCase$580(
    ffi.Pointer<CassUuidGen> uuid_gen,
    int timestamp,
    ffi.Pointer<CassUuid> output,
  ) {
    return _camelCase$580(
      uuid_gen,
      timestamp,
      output,
    );
  }

  late final _camelCase$580Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassUuidGen>, cass_uint64_t,
              ffi.Pointer<CassUuid>)>>('cass_uuid_gen_from_time');
  late final _camelCase$580 = _camelCase$580Ptr.asFunction<
      void Function(ffi.Pointer<CassUuidGen>, int, ffi.Pointer<CassUuid>)>();

  /// Sets the UUID to the minimum V1 (time) value for the specified time.
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] time
  /// @param[out] output A minimum V1 UUID for the specified time.
  void camelCase$581(
    int time,
    ffi.Pointer<CassUuid> output,
  ) {
    return _camelCase$581(
      time,
      output,
    );
  }

  late final _camelCase$581Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(cass_uint64_t,
              ffi.Pointer<CassUuid>)>>('cass_uuid_min_from_time');
  late final _camelCase$581 =
      _camelCase$581Ptr.asFunction<void Function(int, ffi.Pointer<CassUuid>)>();

  /// Sets the UUID to the maximum V1 (time) value for the specified time.
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] time
  /// @param[out] output A maximum V1 UUID for the specified time.
  void camelCase$582(
    int time,
    ffi.Pointer<CassUuid> output,
  ) {
    return _camelCase$582(
      time,
      output,
    );
  }

  late final _camelCase$582Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(cass_uint64_t,
              ffi.Pointer<CassUuid>)>>('cass_uuid_max_from_time');
  late final _camelCase$582 =
      _camelCase$582Ptr.asFunction<void Function(int, ffi.Pointer<CassUuid>)>();

  /// Gets the timestamp for a V1 UUID
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] uuid
  /// @return The timestamp in milliseconds since the Epoch
  /// (00:00:00 UTC on 1 January 1970). 0 returned if the UUID
  /// is not V1.
  int camelCase$583(
    CassUuid uuid,
  ) {
    return _camelCase$583(
      uuid,
    );
  }

  late final _camelCase$583Ptr =
      _lookup<ffi.NativeFunction<cass_uint64_t Function(CassUuid)>>(
          'cass_uuid_timestamp');
  late final _camelCase$583 =
      _camelCase$583Ptr.asFunction<int Function(CassUuid)>();

  /// Gets the version for a UUID
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] uuid
  /// @return The version of the UUID (1 or 4)
  int camelCase$584(
    CassUuid uuid,
  ) {
    return _camelCase$584(
      uuid,
    );
  }

  late final _camelCase$584Ptr =
      _lookup<ffi.NativeFunction<cass_uint8_t Function(CassUuid)>>(
          'cass_uuid_version');
  late final _camelCase$584 =
      _camelCase$584Ptr.asFunction<int Function(CassUuid)>();

  /// Returns a null-terminated string for the specified UUID.
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] uuid
  /// @param[out] output A null-terminated string of length CASS_UUID_STRING_LENGTH.
  void camelCase$585(
    CassUuid uuid,
    ffi.Pointer<ffi.Char> output,
  ) {
    return _camelCase$585(
      uuid,
      output,
    );
  }

  late final _camelCase$585Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CassUuid, ffi.Pointer<ffi.Char>)>>(
      'cass_uuid_string');
  late final _camelCase$585 = _camelCase$585Ptr
      .asFunction<void Function(CassUuid, ffi.Pointer<ffi.Char>)>();

  /// Returns a UUID for the specified string.
  ///
  /// Example: "550e8400-e29b-41d4-a716-446655440000"
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] str
  /// @param[out] output
  CassError_ camelCase$586(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<CassUuid> output,
  ) {
    return CassError_.fromValue(_camelCase$586(
      str,
      output,
    ));
  }

  late final _camelCase$586Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<CassUuid>)>>('cass_uuid_from_string');
  late final _camelCase$586 = _camelCase$586Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CassUuid>)>();

  /// Same as cass_uuid_from_string(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassUuid
  ///
  /// @param[in] str
  /// @param[in] str_length
  /// @param[out] output
  /// @return same as cass_uuid_from_string()
  ///
  /// @see cass_uuid_from_string()
  CassError_ camelCase$587(
    ffi.Pointer<ffi.Char> str,
    int str_length,
    ffi.Pointer<CassUuid> output,
  ) {
    return CassError_.fromValue(_camelCase$587(
      str,
      str_length,
      output,
    ));
  }

  late final _camelCase$587Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<CassUuid>)>>('cass_uuid_from_string_n');
  late final _camelCase$587 = _camelCase$587Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<CassUuid>)>();

  /// Creates a new server-side timestamp generator. This generator allows Cassandra
  /// to assign timestamps server-side.
  ///
  /// <b>Note:</b> This is the default timestamp generator.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTimestampGen
  ///
  /// @return Returns a timestamp generator that must be freed.
  ///
  /// @see cass_timestamp_gen_free()
  ffi.Pointer<CassTimestampGen> camelCase$588() {
    return _camelCase$588();
  }

  late final _camelCase$588Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassTimestampGen> Function()>>(
          'cass_timestamp_gen_server_side_new');
  late final _camelCase$588 =
      _camelCase$588Ptr.asFunction<ffi.Pointer<CassTimestampGen> Function()>();

  /// Creates a new monotonically increasing timestamp generator with microsecond
  /// precision.
  ///
  /// This implementation guarantees a monotonically increasing timestamp. If the
  /// timestamp generation rate exceeds one per microsecond or if the clock skews
  /// into the past the generator will artificially increment the previously
  /// generated timestamp until the request rate decreases or the clock skew
  /// is corrected.
  ///
  /// By default, this timestamp generator will generate warnings if more than
  /// 1 second of clock skew is detected. It will print an error every second until
  /// the clock skew is resolved. These settings can be changed by using
  /// `cass_timestamp_gen_monotonic_new_with_settings()` to create the generator
  /// instance.
  ///
  /// <b>Note:</b> This generator is thread-safe and can be shared by multiple
  /// sessions.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTimestampGen
  ///
  /// @return Returns a timestamp generator that must be freed.
  ///
  /// @see cass_timestamp_gen_monotonic_new_with_settings();
  /// @see cass_timestamp_gen_free()
  ffi.Pointer<CassTimestampGen> camelCase$589() {
    return _camelCase$589();
  }

  late final _camelCase$589Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassTimestampGen> Function()>>(
          'cass_timestamp_gen_monotonic_new');
  late final _camelCase$589 =
      _camelCase$589Ptr.asFunction<ffi.Pointer<CassTimestampGen> Function()>();

  /// Same as cass_timestamp_gen_monotonic_new(), but with settings for controlling
  /// warnings about clock skew.
  ///
  /// @param warning_threshold_us The amount of clock skew, in microseconds, that
  /// must be detected before a warning is triggered. A threshold less than 0 can
  /// be used to disable warnings.
  /// @param warning_interval_ms The amount of time, in milliseconds, to wait before
  /// warning again about clock skew. An interval value less than or equal to 0 allows
  /// the warning to be triggered every millisecond.
  /// @return Returns a timestamp generator that must be freed.
  ffi.Pointer<CassTimestampGen> camelCase$590(
    int warning_threshold_us,
    int warning_interval_ms,
  ) {
    return _camelCase$590(
      warning_threshold_us,
      warning_interval_ms,
    );
  }

  late final _camelCase$590Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassTimestampGen> Function(cass_int64_t,
              cass_int64_t)>>('cass_timestamp_gen_monotonic_new_with_settings');
  late final _camelCase$590 = _camelCase$590Ptr
      .asFunction<ffi.Pointer<CassTimestampGen> Function(int, int)>();

  /// Frees a timestamp generator instance.
  ///
  /// @cassandra{2.1+}
  ///
  /// @public @memberof CassTimestampGen
  ///
  /// @param[in] timestamp_gen
  void camelCase$591(
    ffi.Pointer<CassTimestampGen> timestamp_gen,
  ) {
    return _camelCase$591(
      timestamp_gen,
    );
  }

  late final _camelCase$591Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassTimestampGen>)>>(
      'cass_timestamp_gen_free');
  late final _camelCase$591 = _camelCase$591Ptr
      .asFunction<void Function(ffi.Pointer<CassTimestampGen>)>();

  /// Creates a new default retry policy.
  ///
  /// This policy retries queries in the following cases:
  /// <ul>
  /// <li>On a read timeout, if enough replicas replied but data was not received.</li>
  /// <li>On a write timeout, if a timeout occurs while writing the distributed batch log</li>
  /// <li>On unavailable, it will move to the next host</li>
  /// </ul>
  ///
  /// In all other cases the error will be returned.
  ///
  /// This policy always uses the query's original consistency level.
  ///
  /// @public @memberof CassRetryPolicy
  ///
  /// @return Returns a retry policy that must be freed.
  ///
  /// @see cass_retry_policy_free()
  ffi.Pointer<CassRetryPolicy> camelCase$592() {
    return _camelCase$592();
  }

  late final _camelCase$592Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassRetryPolicy> Function()>>(
          'cass_retry_policy_default_new');
  late final _camelCase$592 =
      _camelCase$592Ptr.asFunction<ffi.Pointer<CassRetryPolicy> Function()>();

  /// Creates a new downgrading consistency retry policy.
  ///
  /// <b>Important:</b> This policy may attempt to retry requests with a lower
  /// consistency level. Using this policy can break consistency guarantees.
  ///
  /// This policy will retry in the same scenarios as the default policy, but
  /// it will also retry in the following cases:
  /// <ul>
  /// <li>On a read timeout, if some replicas responded but is lower than
  /// required by the current consistency level then retry with a lower
  /// consistency level.</li>
  /// <li>On a write timeout, Retry unlogged batches at a lower consistency level
  /// if at least one replica responded. For single queries and batch if any
  /// replicas responded then consider the request successful and swallow the
  /// error.</li>
  /// <li>On unavailable, retry at a lower consistency if at lease one replica
  /// responded.</li>
  /// </ul>
  ///
  /// This goal of this policy is to attempt to save a request if there's any
  /// chance of success. A writes succeeds as long as there's a single copy
  /// persisted and a read will succeed if there's some data available even
  /// if it increases the risk of reading stale data.
  ///
  /// @deprecated This still works, but should not be used in new applications. It
  /// can lead to unexpected behavior when the cluster is in a degraded state.
  /// Instead, applications should prefer using the lowest consistency level on
  /// statements that can be tolerated by a specific use case.
  ///
  /// @public @memberof CassRetryPolicy
  ///
  /// @return Returns a retry policy that must be freed.
  ///
  /// @see cass_retry_policy_free()
  ffi.Pointer<CassRetryPolicy> camelCase$593() {
    return _camelCase$593();
  }

  late final _camelCase$593Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassRetryPolicy> Function()>>(
          'cass_retry_policy_downgrading_consistency_new');
  late final _camelCase$593 =
      _camelCase$593Ptr.asFunction<ffi.Pointer<CassRetryPolicy> Function()>();

  /// Creates a new fallthrough retry policy.
  ///
  /// This policy never retries or ignores a server-side failure. The error
  /// is always returned.
  ///
  /// @public @memberof CassRetryPolicy
  ///
  /// @return Returns a retry policy that must be freed.
  ///
  /// @see cass_retry_policy_free()
  ffi.Pointer<CassRetryPolicy> camelCase$594() {
    return _camelCase$594();
  }

  late final _camelCase$594Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassRetryPolicy> Function()>>(
          'cass_retry_policy_fallthrough_new');
  late final _camelCase$594 =
      _camelCase$594Ptr.asFunction<ffi.Pointer<CassRetryPolicy> Function()>();

  /// Creates a new logging retry policy.
  ///
  /// This policy logs the retry decision of its child policy. Logging is
  /// done using CASS_LOG_INFO.
  ///
  /// @public @memberof CassRetryPolicy
  ///
  /// @param[in] child_retry_policy
  /// @return Returns a retry policy that must be freed. NULL is returned if
  /// the child_policy is a logging retry policy.
  ///
  /// @see cass_retry_policy_free()
  ffi.Pointer<CassRetryPolicy> camelCase$595(
    ffi.Pointer<CassRetryPolicy> child_retry_policy,
  ) {
    return _camelCase$595(
      child_retry_policy,
    );
  }

  late final _camelCase$595Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CassRetryPolicy> Function(
              ffi.Pointer<CassRetryPolicy>)>>('cass_retry_policy_logging_new');
  late final _camelCase$595 = _camelCase$595Ptr.asFunction<
      ffi.Pointer<CassRetryPolicy> Function(ffi.Pointer<CassRetryPolicy>)>();

  /// Frees a retry policy instance.
  ///
  /// @public @memberof CassRetryPolicy
  ///
  /// @param[in] policy
  void camelCase$596(
    ffi.Pointer<CassRetryPolicy> policy,
  ) {
    return _camelCase$596(
      policy,
    );
  }

  late final _camelCase$596Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CassRetryPolicy>)>>(
      'cass_retry_policy_free');
  late final _camelCase$596 = _camelCase$596Ptr
      .asFunction<void Function(ffi.Pointer<CassRetryPolicy>)>();

  /// Creates a new custom payload.
  ///
  /// @public @memberof CassCustomPayload
  ///
  /// @cassandra{2.2+}
  ///
  /// @return Returns a custom payload that must be freed.
  ///
  /// @see cass_custom_payload_free()
  ffi.Pointer<CassCustomPayload> camelCase$597() {
    return _camelCase$597();
  }

  late final _camelCase$597Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CassCustomPayload> Function()>>(
          'cass_custom_payload_new');
  late final _camelCase$597 =
      _camelCase$597Ptr.asFunction<ffi.Pointer<CassCustomPayload> Function()>();

  /// Frees a custom payload instance.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCustomPayload
  ///
  /// @param[in] payload
  void camelCase$598(
    ffi.Pointer<CassCustomPayload> payload,
  ) {
    return _camelCase$598(
      payload,
    );
  }

  late final _camelCase$598Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<CassCustomPayload>)>>(
      'cass_custom_payload_free');
  late final _camelCase$598 = _camelCase$598Ptr
      .asFunction<void Function(ffi.Pointer<CassCustomPayload>)>();

  /// Sets an item to the custom payload.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCustomPayload
  ///
  /// @param[in] payload
  /// @param[in] name
  /// @param[in] value
  /// @param[in] value_size
  void camelCase$599(
    ffi.Pointer<CassCustomPayload> payload,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return _camelCase$599(
      payload,
      name,
      value,
      value_size,
    );
  }

  late final _camelCase$599Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassCustomPayload>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_custom_payload_set');
  late final _camelCase$599 = _camelCase$599Ptr.asFunction<
      void Function(ffi.Pointer<CassCustomPayload>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Same as cass_custom_payload_set(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCustomPayload
  ///
  /// @param[in] payload
  /// @param[in] name
  /// @param[in] name_length
  /// @param[in] value
  /// @param[in] value_size
  void camelCase$600(
    ffi.Pointer<CassCustomPayload> payload,
    ffi.Pointer<ffi.Char> name,
    int name_length,
    ffi.Pointer<cass_byte_t> value,
    int value_size,
  ) {
    return _camelCase$600(
      payload,
      name,
      name_length,
      value,
      value_size,
    );
  }

  late final _camelCase$600Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassCustomPayload>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<cass_byte_t>,
              ffi.Size)>>('cass_custom_payload_set_n');
  late final _camelCase$600 = _camelCase$600Ptr.asFunction<
      void Function(ffi.Pointer<CassCustomPayload>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<cass_byte_t>, int)>();

  /// Removes an item from the custom payload.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCustomPayload
  ///
  /// @param[in] payload
  /// @param[in] name
  void camelCase$601(
    ffi.Pointer<CassCustomPayload> payload,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _camelCase$601(
      payload,
      name,
    );
  }

  late final _camelCase$601Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CassCustomPayload>,
              ffi.Pointer<ffi.Char>)>>('cass_custom_payload_remove');
  late final _camelCase$601 = _camelCase$601Ptr.asFunction<
      void Function(ffi.Pointer<CassCustomPayload>, ffi.Pointer<ffi.Char>)>();

  /// Same as cass_custom_payload_set(), but with lengths for string
  /// parameters.
  ///
  /// @cassandra{2.2+}
  ///
  /// @public @memberof CassCustomPayload
  ///
  /// @param[in] payload
  /// @param[in] name
  /// @param[in] name_length
  void camelCase$602(
    ffi.Pointer<CassCustomPayload> payload,
    ffi.Pointer<ffi.Char> name,
    int name_length,
  ) {
    return _camelCase$602(
      payload,
      name,
      name_length,
    );
  }

  late final _camelCase$602Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<CassCustomPayload>,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('cass_custom_payload_remove_n');
  late final _camelCase$602 = _camelCase$602Ptr.asFunction<
      void Function(
          ffi.Pointer<CassCustomPayload>, ffi.Pointer<ffi.Char>, int)>();

  /// Gets the string for a consistency.
  ///
  /// @param[in] consistency
  /// @return A null-terminated string for the consistency.
  /// Example: "ALL", "ONE", "QUORUM", etc.
  ffi.Pointer<ffi.Char> camelCase$603(
    CassConsistency_ consistency,
  ) {
    return _camelCase$603(
      consistency.value,
    );
  }

  late final _camelCase$603Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'cass_consistency_string');
  late final _camelCase$603 =
      _camelCase$603Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Write type
  ///
  /// /
  /// /**
  /// Gets the string for a write type.
  ///
  /// @param[in] write_type
  /// @return A null-terminated string for the write type.
  /// Example: "BATCH", "SIMPLE", "COUNTER", etc.
  ffi.Pointer<ffi.Char> camelCase$604(
    CassWriteType_ write_type,
  ) {
    return _camelCase$604(
      write_type.value,
    );
  }

  late final _camelCase$604Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'cass_write_type_string');
  late final _camelCase$604 =
      _camelCase$604Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Gets a description for an error code.
  ///
  /// @param[in] error
  /// @return A null-terminated string describing the error.
  ffi.Pointer<ffi.Char> camelCase$605(
    CassError_ error,
  ) {
    return _camelCase$605(
      error.value,
    );
  }

  late final _camelCase$605Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'cass_error_desc');
  late final _camelCase$605 =
      _camelCase$605Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Explicitly wait for the log to flush and deallocate resources.
  /// This *MUST* be the last call using the library. It is an error
  /// to call any cass_*() functions after this call.
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  void camelCase$606() {
    return _camelCase$606();
  }

  late final _camelCase$606Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('cass_log_cleanup');
  late final _camelCase$606 = _camelCase$606Ptr.asFunction<void Function()>();

  /// Sets the log level.
  ///
  /// <b>Note:</b> This needs to be done before any call that might log, such as
  /// any of the cass_cluster_*() or cass_ssl_*() functions.
  ///
  /// <b>Default:</b> CASS_LOG_WARN
  ///
  /// @param[in] log_level
  void camelCase$607(
    CassLogLevel_ log_level,
  ) {
    return _camelCase$607(
      log_level.value,
    );
  }

  late final _camelCase$607Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'cass_log_set_level');
  late final _camelCase$607 =
      _camelCase$607Ptr.asFunction<void Function(int)>();

  /// Sets a callback for handling logging events.
  ///
  /// <b>Note:</b> This needs to be done before any call that might log, such as
  /// any of the cass_cluster_*() or cass_ssl_*() functions.
  ///
  /// <b>Default:</b> An internal callback that prints to stderr
  ///
  /// @param[in] data An opaque data object passed to the callback.
  /// @param[in] callback A callback that handles logging events. This is
  /// called in a separate thread so access to shared data must be synchronized.
  void camelCase$608(
    CassLogCallback callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _camelCase$608(
      callback,
      data,
    );
  }

  late final _camelCase$608Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CassLogCallback,
              ffi.Pointer<ffi.Void>)>>('cass_log_set_callback');
  late final _camelCase$608 = _camelCase$608Ptr
      .asFunction<void Function(CassLogCallback, ffi.Pointer<ffi.Void>)>();

  /// Sets the log queue size.
  ///
  /// <b>Note:</b> This needs to be done before any call that might log, such as
  /// any of the cass_cluster_*() or cass_ssl_*() functions.
  ///
  /// <b>Default:</b> 2048
  ///
  /// @deprecated This is no longer useful and does nothing. Expect this to be
  /// removed in a future release.
  ///
  /// @param[in] queue_size
  void camelCase$609(
    int queue_size,
  ) {
    return _camelCase$609(
      queue_size,
    );
  }

  late final _camelCase$609Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Size)>>(
          'cass_log_set_queue_size');
  late final _camelCase$609 =
      _camelCase$609Ptr.asFunction<void Function(int)>();

  /// Gets the string for a log level.
  ///
  /// @param[in] log_level
  /// @return A null-terminated string for the log level.
  /// Example: "ERROR", "WARN", "INFO", etc.
  ffi.Pointer<ffi.Char> camelCase$610(
    CassLogLevel_ log_level,
  ) {
    return _camelCase$610(
      log_level.value,
    );
  }

  late final _camelCase$610Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'cass_log_level_string');
  late final _camelCase$610 =
      _camelCase$610Ptr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Constructs an inet v4 object.
  ///
  /// @public @memberof CassInet
  ///
  /// @param[in] address An address of size CASS_INET_V4_LENGTH
  /// @return An inet object.
  CassInet camelCase$611(
    ffi.Pointer<cass_uint8_t> address,
  ) {
    return _camelCase$611(
      address,
    );
  }

  late final _camelCase$611Ptr =
      _lookup<ffi.NativeFunction<CassInet Function(ffi.Pointer<cass_uint8_t>)>>(
          'cass_inet_init_v4');
  late final _camelCase$611 = _camelCase$611Ptr
      .asFunction<CassInet Function(ffi.Pointer<cass_uint8_t>)>();

  /// Constructs an inet v6 object.
  ///
  /// @public @memberof CassInet
  ///
  /// @param[in] address An address of size CASS_INET_V6_LENGTH
  /// @return An inet object.
  CassInet camelCase$612(
    ffi.Pointer<cass_uint8_t> address,
  ) {
    return _camelCase$612(
      address,
    );
  }

  late final _camelCase$612Ptr =
      _lookup<ffi.NativeFunction<CassInet Function(ffi.Pointer<cass_uint8_t>)>>(
          'cass_inet_init_v6');
  late final _camelCase$612 = _camelCase$612Ptr
      .asFunction<CassInet Function(ffi.Pointer<cass_uint8_t>)>();

  /// Returns a null-terminated string for the specified inet.
  ///
  /// @public @memberof CassInet
  ///
  /// @param[in] inet
  /// @param[out] output A null-terminated string of length CASS_INET_STRING_LENGTH.
  void camelCase$613(
    CassInet inet,
    ffi.Pointer<ffi.Char> output,
  ) {
    return _camelCase$613(
      inet,
      output,
    );
  }

  late final _camelCase$613Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(CassInet, ffi.Pointer<ffi.Char>)>>(
      'cass_inet_string');
  late final _camelCase$613 = _camelCase$613Ptr
      .asFunction<void Function(CassInet, ffi.Pointer<ffi.Char>)>();

  /// Returns an inet for the specified string.
  ///
  /// Examples: "127.0.0.1" or "::1"
  ///
  /// @public @memberof CassInet
  ///
  /// @param[in] str
  /// @param[out] output
  CassError_ camelCase$614(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<CassInet> output,
  ) {
    return CassError_.fromValue(_camelCase$614(
      str,
      output,
    ));
  }

  late final _camelCase$614Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<CassInet>)>>('cass_inet_from_string');
  late final _camelCase$614 = _camelCase$614Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<CassInet>)>();

  /// Same as cass_inet_from_string(), but with lengths for string
  /// parameters.
  ///
  /// @public @memberof CassInet
  ///
  /// @param[in] str
  /// @param[in] str_length
  /// @param[out] output
  /// @return same as cass_inet_from_string()
  ///
  /// @see cass_inet_from_string()
  CassError_ camelCase$615(
    ffi.Pointer<ffi.Char> str,
    int str_length,
    ffi.Pointer<CassInet> output,
  ) {
    return CassError_.fromValue(_camelCase$615(
      str,
      str_length,
      output,
    ));
  }

  late final _camelCase$615Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<CassInet>)>>('cass_inet_from_string_n');
  late final _camelCase$615 = _camelCase$615Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<CassInet>)>();

  /// Converts a unix timestamp (in seconds) to the Cassandra "date" type. The "date" type
  /// represents the number of days since the Epoch (1970-01-01) with the Epoch centered at
  /// the value 2^31.
  ///
  /// @cassandra{2.2+}
  ///
  /// @param[in] epoch_secs
  /// @return the number of days since the date -5877641-06-23
  int camelCase$616(
    int epoch_secs,
  ) {
    return _camelCase$616(
      epoch_secs,
    );
  }

  late final _camelCase$616Ptr =
      _lookup<ffi.NativeFunction<cass_uint32_t Function(cass_int64_t)>>(
          'cass_date_from_epoch');
  late final _camelCase$616 = _camelCase$616Ptr.asFunction<int Function(int)>();

  /// Converts a unix timestamp (in seconds) to the Cassandra "time" type. The "time" type
  /// represents the number of nanoseconds since midnight (range 0 to 86399999999999).
  ///
  /// @cassandra{2.2+}
  ///
  /// @param[in] epoch_secs
  /// @return nanoseconds since midnight
  int camelCase$617(
    int epoch_secs,
  ) {
    return _camelCase$617(
      epoch_secs,
    );
  }

  late final _camelCase$617Ptr =
      _lookup<ffi.NativeFunction<cass_int64_t Function(cass_int64_t)>>(
          'cass_time_from_epoch');
  late final _camelCase$617 = _camelCase$617Ptr.asFunction<int Function(int)>();

  /// Combines the Cassandra "date" and "time" types to Epoch time in seconds.
  ///
  /// @cassandra{2.2+}
  ///
  /// @param[in] date
  /// @param[in] time
  /// @return Epoch time in seconds. Negative times are possible if the date
  /// occurs before the Epoch (1970-1-1).
  int camelCase$618(
    int date,
    int time,
  ) {
    return _camelCase$618(
      date,
      time,
    );
  }

  late final _camelCase$618Ptr = _lookup<
          ffi
          .NativeFunction<cass_int64_t Function(cass_uint32_t, cass_int64_t)>>(
      'cass_date_time_to_epoch');
  late final _camelCase$618 =
      _camelCase$618Ptr.asFunction<int Function(int, int)>();

  /// Set custom allocation functions.
  ///
  /// <b>Note:</b> This is not thread-safe. The allocation functions must be set
  /// before any other library function is called.
  ///
  /// <b>Default:</b> The C runtime's malloc(), realloc() and free()
  ///
  /// <b>Important:</b> The C runtime's malloc(), realloc() and free() will be
  /// used by libuv when using versions 1.5 or earlier.
  ///
  /// @param[in] malloc_func
  /// @param[in] realloc_func
  /// @param[in] free_func
  void camelCase$619(
    CassMallocFunction malloc_func,
    CassReallocFunction realloc_func,
    CassFreeFunction free_func,
  ) {
    return _camelCase$619(
      malloc_func,
      realloc_func,
      free_func,
    );
  }

  late final _camelCase$619Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CassMallocFunction, CassReallocFunction,
              CassFreeFunction)>>('cass_alloc_set_functions');
  late final _camelCase$619 = _camelCase$619Ptr.asFunction<
      void Function(
          CassMallocFunction, CassReallocFunction, CassFreeFunction)>();
}

typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.LongLong;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLongLong;
typedef Dart__uint64_t = int;
typedef __darwin_intptr_t = ffi.Long;
typedef Dart__darwin_intptr_t = int;
typedef __darwin_natural_t = ffi.UnsignedInt;
typedef Dart__darwin_natural_t = int;

/// The rune type below is declared to be an ``int'' instead of the more natural
/// ``unsigned long'' or ``long''.  Two things are happening here.  It is not
/// unsigned so that EOF (-1) can be naturally assigned to it and used.  Also,
/// it looks like 10646 will be a 31 bit standard.  This means that if your
/// ints cannot hold 32 bits, you will be in trouble.  The reason an int was
/// chosen over a long is that the is*() and to*() routines take ints (says
/// ANSI C), but they use __darwin_ct_rune_t instead of int.  By changing it
/// here, you lose a bit of ANSI conformance, but your programs will still
/// work.
///
/// NOTE: rune_t is not covered by ANSI nor other standards, and should not
/// be instantiated outside of lib/libc/locale.  Use wchar_t.  wchar_t and
/// rune_t must be the same type.  Also wint_t must be no narrower than
/// wchar_t, and should also be able to hold all members of the largest
/// character set plus one extra value (WEOF). wint_t must be at least 16 bits.
typedef __darwin_ct_rune_t = ffi.Int;
typedef Dart__darwin_ct_rune_t = int;

/// mbstate_t is an opaque object to keep conversion state, during multibyte
/// stream conversions.  The content must not be referenced by user programs.
final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> camelCase;

  /// for alignment
  @ffi.LongLong()
  external int camelCase$1;
}

typedef __darwin_mbstate_t = __mbstate_t;
typedef __darwin_ptrdiff_t = ffi.Long;
typedef Dart__darwin_ptrdiff_t = int;
typedef __darwin_size_t = ffi.UnsignedLong;
typedef Dart__darwin_size_t = int;
typedef __builtin_va_list = ffi.Pointer<ffi.Char>;
typedef __darwin_va_list = __builtin_va_list;
typedef __darwin_wchar_t = ffi.Int;
typedef Dart__darwin_wchar_t = int;
typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wint_t = ffi.Int;
typedef Dart__darwin_wint_t = int;
typedef __darwin_clock_t = ffi.UnsignedLong;
typedef Dart__darwin_clock_t = int;
typedef __darwin_socklen_t = __uint32_t;
typedef __darwin_ssize_t = ffi.Long;
typedef Dart__darwin_ssize_t = int;
typedef __darwin_time_t = ffi.Long;
typedef Dart__darwin_time_t = int;
typedef __darwin_blkcnt_t = __int64_t;
typedef __darwin_blksize_t = __int32_t;
typedef __darwin_dev_t = __int32_t;
typedef __darwin_fsblkcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsblkcnt_t = int;
typedef __darwin_fsfilcnt_t = ffi.UnsignedInt;
typedef Dart__darwin_fsfilcnt_t = int;
typedef __darwin_gid_t = __uint32_t;
typedef __darwin_id_t = __uint32_t;
typedef __darwin_ino64_t = __uint64_t;
typedef __darwin_ino_t = __darwin_ino64_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mode_t = __uint16_t;
typedef __darwin_off_t = __int64_t;
typedef __darwin_pid_t = __int32_t;
typedef __darwin_sigset_t = __uint32_t;
typedef __darwin_suseconds_t = __int32_t;
typedef __darwin_uid_t = __uint32_t;
typedef __darwin_useconds_t = __uint32_t;

final class __darwin_pthread_handler_rec extends ffi.Struct {
  /// Routine to call
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      camelCase;

  /// Argument to pass
  external ffi.Pointer<ffi.Void> camelCase$1;

  external ffi.Pointer<__darwin_pthread_handler_rec> camelCase$2;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> camelCase$1;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int camelCase;

  external ffi.Pointer<__darwin_pthread_handler_rec> camelCase$1;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> camelCase$2;
}

typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;
typedef __darwin_pthread_cond_t = _opaque_pthread_cond_t;
typedef __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Dart__darwin_pthread_key_t = int;
typedef __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
typedef __darwin_pthread_once_t = _opaque_pthread_once_t;
typedef __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef __darwin_nl_item = ffi.Int;
typedef Dart__darwin_nl_item = int;
typedef __darwin_wctrans_t = ffi.Int;
typedef Dart__darwin_wctrans_t = int;
typedef __darwin_wctype_t = __uint32_t;
typedef u_int8_t = ffi.UnsignedChar;
typedef Dartu_int8_t = int;
typedef u_int16_t = ffi.UnsignedShort;
typedef Dartu_int16_t = int;
typedef u_int32_t = ffi.UnsignedInt;
typedef Dartu_int32_t = int;
typedef u_int64_t = ffi.UnsignedLongLong;
typedef Dartu_int64_t = int;
typedef register_t = ffi.Int64;
typedef Dartregister_t = int;
typedef user_addr_t = u_int64_t;
typedef user_size_t = u_int64_t;
typedef user_ssize_t = ffi.Int64;
typedef Dartuser_ssize_t = int;
typedef user_long_t = ffi.Int64;
typedef Dartuser_long_t = int;
typedef user_ulong_t = u_int64_t;
typedef user_time_t = ffi.Int64;
typedef Dartuser_time_t = int;
typedef user_off_t = ffi.Int64;
typedef Dartuser_off_t = int;
typedef syscall_arg_t = u_int64_t;
typedef ptrdiff_t = __darwin_ptrdiff_t;
typedef rsize_t = __darwin_size_t;
typedef wint_t = __darwin_wint_t;

/// 7.18.1.2 Minimum-width integer types
typedef int_least8_t = ffi.Int8;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Int16;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int32;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.Int64;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.Uint8;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.Uint16;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.Uint32;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.Uint64;
typedef Dartuint_least64_t = int;

/// 7.18.1.3 Fastest-width integer types
typedef int_fast8_t = ffi.Int8;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int16;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int32;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Int64;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.Uint8;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.Uint16;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.Uint32;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.Uint64;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.Long;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLong;
typedef Dartuintmax_t = int;

enum cass_bool_t {
  cass_false(0),
  cass_true(1);

  final int value;
  const cass_bool_t(this.value);

  static cass_bool_t fromValue(int value) => switch (value) {
        0 => cass_false,
        1 => cass_true,
        _ => throw ArgumentError('Unknown value for cass_bool_t: $value'),
      };
}

typedef cass_float_t = ffi.Float;
typedef Dartcass_float_t = double;
typedef cass_double_t = ffi.Double;
typedef Dartcass_double_t = double;
typedef cass_int8_t = ffi.Int8;
typedef Dartcass_int8_t = int;
typedef cass_uint8_t = ffi.Uint8;
typedef Dartcass_uint8_t = int;
typedef cass_int16_t = ffi.Int16;
typedef Dartcass_int16_t = int;
typedef cass_uint16_t = ffi.Uint16;
typedef Dartcass_uint16_t = int;
typedef cass_int32_t = ffi.Int32;
typedef Dartcass_int32_t = int;
typedef cass_uint32_t = ffi.Uint32;
typedef Dartcass_uint32_t = int;
typedef cass_int64_t = ffi.Int64;
typedef Dartcass_int64_t = int;
typedef cass_uint64_t = ffi.Uint64;
typedef Dartcass_uint64_t = int;
typedef cass_byte_t = cass_uint8_t;
typedef cass_duration_t = cass_uint64_t;

/// IP address for either IPv4 or IPv6.
///
/// @struct CassInet
final class CassInet_ extends ffi.Struct {
  /// Big-endian, binary representation of a IPv4 or IPv6 address
  @ffi.Array.multi([16])
  external ffi.Array<cass_uint8_t> camelCase;

  /// Number of address bytes. 4 bytes for IPv4 and 16 bytes for IPv6.
  @cass_uint8_t()
  external int camelCase$1;
}

/// IP address for either IPv4 or IPv6.
///
/// @struct CassInet
typedef CassInet = CassInet_;

/// Version 1 (time-based) or version 4 (random) UUID.
///
/// @struct CassUuid
final class CassUuid_ extends ffi.Struct {
  /// Represents the time and version part of a UUID. The most significant
  /// 4 bits represent the version and the bottom 60 bits representing the
  /// time part. For version 1 the time part represents the number of
  /// 100 nanosecond periods since 00:00:00 UTC, January 1, 1970 (the Epoch).
  /// For version 4 the time part is randomly generated.
  @cass_uint64_t()
  external int camelCase;

  /// Represents the clock sequence and the node part of a UUID. The most
  /// significant 16 bits represent the clock sequence (except for the most
  /// significant bit which is always set) and the bottom 48 bits represent
  /// the node part. For version 1 (time-based) the clock sequence part is randomly
  /// generated and the node part can be explicitly set, otherwise, it's generated
  /// from node unique information. For version 4 both the clock sequence and the node
  /// parts are randomly generated.
  @cass_uint64_t()
  external int camelCase$1;
}

/// Version 1 (time-based) or version 4 (random) UUID.
///
/// @struct CassUuid
typedef CassUuid = CassUuid_;

final class CassCluster_ extends ffi.Opaque {}

/// A cluster object describes the configuration of the Cassandra cluster and is used
/// to construct a session instance. Unlike other DataStax drivers the cluster object
/// does not maintain the control connection.
///
/// @struct CassCluster
typedef CassCluster = CassCluster_;

final class CassSession_ extends ffi.Opaque {}

/// A session object is used to execute queries and maintains cluster state through
/// the control connection. The control connection is used to auto-discover nodes and
/// monitor cluster changes (topology and schema). Each session also maintains multiple
/// pools of connections to cluster nodes which are used to query the cluster.
///
/// Instances of the session object are thread-safe to execute queries.
///
/// @struct CassSession
typedef CassSession = CassSession_;

final class CassStatement_ extends ffi.Opaque {}

/// A statement object is an executable query. It represents either a regular
/// (adhoc) statement or a prepared statement. It maintains the queries' parameter
/// values along with query options (consistency level, paging state, etc.)
///
/// <b>Note:</b> Parameters for regular queries are not supported by the binary protocol
/// version 1.
///
/// @struct CassStatement
typedef CassStatement = CassStatement_;

final class CassBatch_ extends ffi.Opaque {}

/// A group of statements that are executed as a single batch.
///
/// <b>Note:</b> Batches are not supported by the binary protocol version 1.
///
/// @cassandra{2.0+}
///
/// @struct CassBatch
typedef CassBatch = CassBatch_;

final class CassFuture_ extends ffi.Opaque {}

/// The future result of an operation.
///
/// It can represent a result if the operation completed successfully or an
/// error if the operation failed. It can be waited on, polled or a callback
/// can be attached.
///
/// @struct CassFuture
typedef CassFuture = CassFuture_;

final class CassPrepared_ extends ffi.Opaque {}

/// A statement that has been prepared cluster-side (It has been pre-parsed
/// and cached).
///
/// A prepared statement is read-only and it is thread-safe to concurrently
/// bind new statements.
///
/// @struct CassPrepared
typedef CassPrepared = CassPrepared_;

final class CassResult_ extends ffi.Opaque {}

/// The result of a query.
///
/// A result object is read-only and is thread-safe to read or iterate over
/// concurrently.
///
/// @struct CassResult
typedef CassResult = CassResult_;

final class CassErrorResult_ extends ffi.Opaque {}

/// A error result of a request
///
/// @struct CassErrorResult
typedef CassErrorResult = CassErrorResult_;

final class CassNode_ extends ffi.Opaque {}

/// An object that represents a cluster node.
///
/// @struct CassNode
typedef CassNode = CassNode_;

final class CassIterator_ extends ffi.Opaque {}

/// An object used to iterate over a group of rows, columns or collection values.
///
/// @struct CassIterator
typedef CassIterator = CassIterator_;

final class CassRow_ extends ffi.Opaque {}

/// A collection of column values.
///
/// @struct CassRow
typedef CassRow = CassRow_;

final class CassValue_ extends ffi.Opaque {}

/// A single primitive value or a collection of values.
///
/// @struct CassValue
typedef CassValue = CassValue_;

final class CassDataType_ extends ffi.Opaque {}

/// A data type used to describe a value, collection or
/// user defined type.
///
/// @struct CassDataType
typedef CassDataType = CassDataType_;

final class CassFunctionMeta_ extends ffi.Opaque {}

/// @struct CassFunctionMeta
///
/// @cassandra{2.2+}
typedef CassFunctionMeta = CassFunctionMeta_;

final class CassAggregateMeta_ extends ffi.Opaque {}

/// @struct CassAggregateMeta
///
/// @cassandra{2.2+}
typedef CassAggregateMeta = CassAggregateMeta_;

final class CassCollection_ extends ffi.Opaque {}

/// A collection of values.
///
/// @struct CassCollection
typedef CassCollection = CassCollection_;

final class CassTuple_ extends ffi.Opaque {}

/// A tuple of values.
///
/// @struct CassTuple
///
/// @cassandra{2.1+}
typedef CassTuple = CassTuple_;

final class CassUserType_ extends ffi.Opaque {}

/// A user defined type.
///
/// @struct CassUserType
///
/// @cassandra{2.1+}
typedef CassUserType = CassUserType_;

final class CassSsl_ extends ffi.Opaque {}

/// Describes the SSL configuration of a cluster.
///
/// @struct CassSsl
typedef CassSsl = CassSsl_;

/// Describes the version of the connected Cassandra cluster.
///
/// @struct CassVersion
final class CassVersion_ extends ffi.Struct {
  @ffi.Int()
  external int camelCase;

  @ffi.Int()
  external int camelCase$1;

  @ffi.Int()
  external int camelCase$2;
}

/// Describes the version of the connected Cassandra cluster.
///
/// @struct CassVersion
typedef CassVersion = CassVersion_;

final class CassSchemaMeta_ extends ffi.Opaque {}

/// A snapshot of the schema's metadata.
///
/// @struct CassSchemaMeta
typedef CassSchemaMeta = CassSchemaMeta_;

final class CassKeyspaceMeta_ extends ffi.Opaque {}

/// Keyspace metadata
///
/// @struct CassKeyspaceMeta
typedef CassKeyspaceMeta = CassKeyspaceMeta_;

final class CassTableMeta_ extends ffi.Opaque {}

/// Table metadata
///
/// @struct CassTableMeta
typedef CassTableMeta = CassTableMeta_;

final class CassMaterializedViewMeta_ extends ffi.Opaque {}

/// MaterializedView metadata
///
/// @struct CassMaterializedViewMeta
///
/// @cassandra{3.0+}
typedef CassMaterializedViewMeta = CassMaterializedViewMeta_;

final class CassColumnMeta_ extends ffi.Opaque {}

/// Column metadata
///
/// @struct CassColumnMeta
typedef CassColumnMeta = CassColumnMeta_;

final class CassIndexMeta_ extends ffi.Opaque {}

/// Index metadata
///
/// @struct CassIndexMeta
typedef CassIndexMeta = CassIndexMeta_;

final class CassUuidGen_ extends ffi.Opaque {}

/// A UUID generator object.
///
/// Instances of the UUID generator object are thread-safe to generate UUIDs.
///
/// @struct CassUuidGen
typedef CassUuidGen = CassUuidGen_;

final class CassTimestampGen_ extends ffi.Opaque {}

/// Policies that defined the behavior of a request when a server-side
/// read/write timeout or unavailable error occurs.
///
/// Generators of client-side, microsecond-precision timestamps.
///
/// @struct CassTimestampGen
///
/// @cassandra{2.1+}
typedef CassTimestampGen = CassTimestampGen_;

final class CassRetryPolicy_ extends ffi.Opaque {}

/// @struct CassRetryPolicy
typedef CassRetryPolicy = CassRetryPolicy_;

final class CassCustomPayload_ extends ffi.Opaque {}

/// @struct CassCustomPayload
///
/// @cassandra{2.2+}
typedef CassCustomPayload = CassCustomPayload_;

final class UnnamedStruct1 extends ffi.Struct {
  /// < Minimum in microseconds
  @cass_uint64_t()
  external int camelCase;

  /// < Maximum in microseconds
  @cass_uint64_t()
  external int camelCase$1;

  /// < Mean in microseconds
  @cass_uint64_t()
  external int camelCase$2;

  /// < Standard deviation in microseconds
  @cass_uint64_t()
  external int camelCase$3;

  /// < Median in microseconds
  @cass_uint64_t()
  external int camelCase$4;

  /// < 75th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$5;

  /// < 95th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$6;

  /// < 98th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$7;

  /// < 99the percentile in microseconds
  @cass_uint64_t()
  external int camelCase$8;

  /// < 99.9th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$9;

  /// <  Mean rate in requests per second
  @cass_double_t()
  external double camelCase$10;

  /// < 1 minute rate in requests per second
  @cass_double_t()
  external double camelCase$11;

  /// <  5 minute rate in requests per second
  @cass_double_t()
  external double camelCase$12;

  /// < 15 minute rate in requests per second
  @cass_double_t()
  external double camelCase$13;
}

final class UnnamedStruct2 extends ffi.Struct {
  /// < The total number of connections
  @cass_uint64_t()
  external int camelCase;

  /// < Deprecated
  @cass_uint64_t()
  external int camelCase$1;

  /// < Deprecated
  @cass_uint64_t()
  external int camelCase$2;

  /// < Deprecated
  @cass_uint64_t()
  external int camelCase$3;
}

final class UnnamedStruct3 extends ffi.Struct {
  /// < Occurrences of a connection timeout
  @cass_uint64_t()
  external int camelCase;

  /// < Deprecated
  @cass_uint64_t()
  external int camelCase$1;

  /// < Occurrences of requests that timed out waiting for a request to finish
  @cass_uint64_t()
  external int camelCase$2;
}

/// A snapshot of the session's performance/diagnostic metrics.
///
/// @struct CassMetrics
final class CassMetrics_ extends ffi.Struct {
  /// < Performance request metrics
  external UnnamedStruct1 camelCase;

  /// < Diagnostic metrics
  external UnnamedStruct2 camelCase$1;

  /// < Error metrics
  external UnnamedStruct3 camelCase$2;
}

/// A snapshot of the session's performance/diagnostic metrics.
///
/// @struct CassMetrics
typedef CassMetrics = CassMetrics_;

final class CassSpeculativeExecutionMetrics_ extends ffi.Struct {
  /// < Minimum in microseconds
  @cass_uint64_t()
  external int camelCase;

  /// < Maximum in microseconds
  @cass_uint64_t()
  external int camelCase$1;

  /// < Mean in microseconds
  @cass_uint64_t()
  external int camelCase$2;

  /// < Standard deviation in microseconds
  @cass_uint64_t()
  external int camelCase$3;

  /// < Median in microseconds
  @cass_uint64_t()
  external int camelCase$4;

  /// < 75th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$5;

  /// < 95th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$6;

  /// < 98th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$7;

  /// < 99the percentile in microseconds
  @cass_uint64_t()
  external int camelCase$8;

  /// < 99.9th percentile in microseconds
  @cass_uint64_t()
  external int camelCase$9;

  /// < The number of aborted speculative retries
  @cass_uint64_t()
  external int camelCase$10;

  /// < Fraction of requests that are aborted speculative retries
  @cass_double_t()
  external double camelCase$11;
}

typedef CassSpeculativeExecutionMetrics = CassSpeculativeExecutionMetrics_;

enum CassConsistency_ {
  CASS_CONSISTENCY_UNKNOWN(65535),
  CASS_CONSISTENCY_ANY(0),
  CASS_CONSISTENCY_ONE(1),
  CASS_CONSISTENCY_TWO(2),
  CASS_CONSISTENCY_THREE(3),
  CASS_CONSISTENCY_QUORUM(4),
  CASS_CONSISTENCY_ALL(5),
  CASS_CONSISTENCY_LOCAL_QUORUM(6),
  CASS_CONSISTENCY_EACH_QUORUM(7),
  CASS_CONSISTENCY_SERIAL(8),
  CASS_CONSISTENCY_LOCAL_SERIAL(9),
  CASS_CONSISTENCY_LOCAL_ONE(10);

  final int value;
  const CassConsistency_(this.value);

  static CassConsistency_ fromValue(int value) => switch (value) {
        65535 => CASS_CONSISTENCY_UNKNOWN,
        0 => CASS_CONSISTENCY_ANY,
        1 => CASS_CONSISTENCY_ONE,
        2 => CASS_CONSISTENCY_TWO,
        3 => CASS_CONSISTENCY_THREE,
        4 => CASS_CONSISTENCY_QUORUM,
        5 => CASS_CONSISTENCY_ALL,
        6 => CASS_CONSISTENCY_LOCAL_QUORUM,
        7 => CASS_CONSISTENCY_EACH_QUORUM,
        8 => CASS_CONSISTENCY_SERIAL,
        9 => CASS_CONSISTENCY_LOCAL_SERIAL,
        10 => CASS_CONSISTENCY_LOCAL_ONE,
        _ => throw ArgumentError('Unknown value for CassConsistency_: $value'),
      };
}

/// @endcond
enum CassWriteType_ {
  CASS_WRITE_TYPE_UNKNOWN(0),
  CASS_WRITE_TYPE_SIMPLE(1),
  CASS_WRITE_TYPE_BATCH(2),
  CASS_WRITE_TYPE_UNLOGGED_BATCH(3),
  CASS_WRITE_TYPE_COUNTER(4),
  CASS_WRITE_TYPE_BATCH_LOG(5),
  CASS_WRITE_TYPE_CAS(6),
  CASS_WRITE_TYPE_VIEW(7),
  CASS_WRITE_TYPE_CDC(8);

  final int value;
  const CassWriteType_(this.value);

  static CassWriteType_ fromValue(int value) => switch (value) {
        0 => CASS_WRITE_TYPE_UNKNOWN,
        1 => CASS_WRITE_TYPE_SIMPLE,
        2 => CASS_WRITE_TYPE_BATCH,
        3 => CASS_WRITE_TYPE_UNLOGGED_BATCH,
        4 => CASS_WRITE_TYPE_COUNTER,
        5 => CASS_WRITE_TYPE_BATCH_LOG,
        6 => CASS_WRITE_TYPE_CAS,
        7 => CASS_WRITE_TYPE_VIEW,
        8 => CASS_WRITE_TYPE_CDC,
        _ => throw ArgumentError('Unknown value for CassWriteType_: $value'),
      };
}

/// @endcond
enum CassColumnType_ {
  CASS_COLUMN_TYPE_REGULAR(0),
  CASS_COLUMN_TYPE_PARTITION_KEY(1),
  CASS_COLUMN_TYPE_CLUSTERING_KEY(2),
  CASS_COLUMN_TYPE_STATIC(3),
  CASS_COLUMN_TYPE_COMPACT_VALUE(4);

  final int value;
  const CassColumnType_(this.value);

  static CassColumnType_ fromValue(int value) => switch (value) {
        0 => CASS_COLUMN_TYPE_REGULAR,
        1 => CASS_COLUMN_TYPE_PARTITION_KEY,
        2 => CASS_COLUMN_TYPE_CLUSTERING_KEY,
        3 => CASS_COLUMN_TYPE_STATIC,
        4 => CASS_COLUMN_TYPE_COMPACT_VALUE,
        _ => throw ArgumentError('Unknown value for CassColumnType_: $value'),
      };
}

enum CassIndexType_ {
  CASS_INDEX_TYPE_UNKNOWN(0),
  CASS_INDEX_TYPE_KEYS(1),
  CASS_INDEX_TYPE_CUSTOM(2),
  CASS_INDEX_TYPE_COMPOSITES(3);

  final int value;
  const CassIndexType_(this.value);

  static CassIndexType_ fromValue(int value) => switch (value) {
        0 => CASS_INDEX_TYPE_UNKNOWN,
        1 => CASS_INDEX_TYPE_KEYS,
        2 => CASS_INDEX_TYPE_CUSTOM,
        3 => CASS_INDEX_TYPE_COMPOSITES,
        _ => throw ArgumentError('Unknown value for CassIndexType_: $value'),
      };
}

enum CassValueType_ {
  CASS_VALUE_TYPE_UNKNOWN(65535),
  CASS_VALUE_TYPE_CUSTOM(0),
  CASS_VALUE_TYPE_ASCII(1),
  CASS_VALUE_TYPE_BIGINT(2),
  CASS_VALUE_TYPE_BLOB(3),
  CASS_VALUE_TYPE_BOOLEAN(4),
  CASS_VALUE_TYPE_COUNTER(5),
  CASS_VALUE_TYPE_DECIMAL(6),
  CASS_VALUE_TYPE_DOUBLE(7),
  CASS_VALUE_TYPE_FLOAT(8),
  CASS_VALUE_TYPE_INT(9),
  CASS_VALUE_TYPE_TEXT(10),
  CASS_VALUE_TYPE_TIMESTAMP(11),
  CASS_VALUE_TYPE_UUID(12),
  CASS_VALUE_TYPE_VARCHAR(13),
  CASS_VALUE_TYPE_VARINT(14),
  CASS_VALUE_TYPE_TIMEUUID(15),
  CASS_VALUE_TYPE_INET(16),
  CASS_VALUE_TYPE_DATE(17),
  CASS_VALUE_TYPE_TIME(18),
  CASS_VALUE_TYPE_SMALL_INT(19),
  CASS_VALUE_TYPE_TINY_INT(20),
  CASS_VALUE_TYPE_DURATION(21),
  CASS_VALUE_TYPE_LIST(32),
  CASS_VALUE_TYPE_MAP(33),
  CASS_VALUE_TYPE_SET(34),
  CASS_VALUE_TYPE_UDT(48),
  CASS_VALUE_TYPE_TUPLE(49),

  /// @cond IGNORE
  CASS_VALUE_TYPE_LAST_ENTRY(50);

  final int value;
  const CassValueType_(this.value);

  static CassValueType_ fromValue(int value) => switch (value) {
        65535 => CASS_VALUE_TYPE_UNKNOWN,
        0 => CASS_VALUE_TYPE_CUSTOM,
        1 => CASS_VALUE_TYPE_ASCII,
        2 => CASS_VALUE_TYPE_BIGINT,
        3 => CASS_VALUE_TYPE_BLOB,
        4 => CASS_VALUE_TYPE_BOOLEAN,
        5 => CASS_VALUE_TYPE_COUNTER,
        6 => CASS_VALUE_TYPE_DECIMAL,
        7 => CASS_VALUE_TYPE_DOUBLE,
        8 => CASS_VALUE_TYPE_FLOAT,
        9 => CASS_VALUE_TYPE_INT,
        10 => CASS_VALUE_TYPE_TEXT,
        11 => CASS_VALUE_TYPE_TIMESTAMP,
        12 => CASS_VALUE_TYPE_UUID,
        13 => CASS_VALUE_TYPE_VARCHAR,
        14 => CASS_VALUE_TYPE_VARINT,
        15 => CASS_VALUE_TYPE_TIMEUUID,
        16 => CASS_VALUE_TYPE_INET,
        17 => CASS_VALUE_TYPE_DATE,
        18 => CASS_VALUE_TYPE_TIME,
        19 => CASS_VALUE_TYPE_SMALL_INT,
        20 => CASS_VALUE_TYPE_TINY_INT,
        21 => CASS_VALUE_TYPE_DURATION,
        32 => CASS_VALUE_TYPE_LIST,
        33 => CASS_VALUE_TYPE_MAP,
        34 => CASS_VALUE_TYPE_SET,
        48 => CASS_VALUE_TYPE_UDT,
        49 => CASS_VALUE_TYPE_TUPLE,
        50 => CASS_VALUE_TYPE_LAST_ENTRY,
        _ => throw ArgumentError('Unknown value for CassValueType_: $value'),
      };
}

enum CassClusteringOrder_ {
  CASS_CLUSTERING_ORDER_NONE(0),
  CASS_CLUSTERING_ORDER_ASC(1),
  CASS_CLUSTERING_ORDER_DESC(2);

  final int value;
  const CassClusteringOrder_(this.value);

  static CassClusteringOrder_ fromValue(int value) => switch (value) {
        0 => CASS_CLUSTERING_ORDER_NONE,
        1 => CASS_CLUSTERING_ORDER_ASC,
        2 => CASS_CLUSTERING_ORDER_DESC,
        _ =>
          throw ArgumentError('Unknown value for CassClusteringOrder_: $value'),
      };
}

enum CassCollectionType_ {
  CASS_COLLECTION_TYPE_LIST(32),
  CASS_COLLECTION_TYPE_MAP(33),
  CASS_COLLECTION_TYPE_SET(34);

  final int value;
  const CassCollectionType_(this.value);

  static CassCollectionType_ fromValue(int value) => switch (value) {
        32 => CASS_COLLECTION_TYPE_LIST,
        33 => CASS_COLLECTION_TYPE_MAP,
        34 => CASS_COLLECTION_TYPE_SET,
        _ =>
          throw ArgumentError('Unknown value for CassCollectionType_: $value'),
      };
}

enum CassBatchType_ {
  CASS_BATCH_TYPE_LOGGED(0),
  CASS_BATCH_TYPE_UNLOGGED(1),
  CASS_BATCH_TYPE_COUNTER(2);

  final int value;
  const CassBatchType_(this.value);

  static CassBatchType_ fromValue(int value) => switch (value) {
        0 => CASS_BATCH_TYPE_LOGGED,
        1 => CASS_BATCH_TYPE_UNLOGGED,
        2 => CASS_BATCH_TYPE_COUNTER,
        _ => throw ArgumentError('Unknown value for CassBatchType_: $value'),
      };
}

enum CassIteratorType_ {
  CASS_ITERATOR_TYPE_RESULT(0),
  CASS_ITERATOR_TYPE_ROW(1),
  CASS_ITERATOR_TYPE_COLLECTION(2),
  CASS_ITERATOR_TYPE_MAP(3),
  CASS_ITERATOR_TYPE_TUPLE(4),
  CASS_ITERATOR_TYPE_USER_TYPE_FIELD(5),
  CASS_ITERATOR_TYPE_META_FIELD(6),
  CASS_ITERATOR_TYPE_KEYSPACE_META(7),
  CASS_ITERATOR_TYPE_TABLE_META(8),
  CASS_ITERATOR_TYPE_TYPE_META(9),
  CASS_ITERATOR_TYPE_FUNCTION_META(10),
  CASS_ITERATOR_TYPE_AGGREGATE_META(11),
  CASS_ITERATOR_TYPE_COLUMN_META(12),
  CASS_ITERATOR_TYPE_INDEX_META(13),
  CASS_ITERATOR_TYPE_MATERIALIZED_VIEW_META(14);

  final int value;
  const CassIteratorType_(this.value);

  static CassIteratorType_ fromValue(int value) => switch (value) {
        0 => CASS_ITERATOR_TYPE_RESULT,
        1 => CASS_ITERATOR_TYPE_ROW,
        2 => CASS_ITERATOR_TYPE_COLLECTION,
        3 => CASS_ITERATOR_TYPE_MAP,
        4 => CASS_ITERATOR_TYPE_TUPLE,
        5 => CASS_ITERATOR_TYPE_USER_TYPE_FIELD,
        6 => CASS_ITERATOR_TYPE_META_FIELD,
        7 => CASS_ITERATOR_TYPE_KEYSPACE_META,
        8 => CASS_ITERATOR_TYPE_TABLE_META,
        9 => CASS_ITERATOR_TYPE_TYPE_META,
        10 => CASS_ITERATOR_TYPE_FUNCTION_META,
        11 => CASS_ITERATOR_TYPE_AGGREGATE_META,
        12 => CASS_ITERATOR_TYPE_COLUMN_META,
        13 => CASS_ITERATOR_TYPE_INDEX_META,
        14 => CASS_ITERATOR_TYPE_MATERIALIZED_VIEW_META,
        _ => throw ArgumentError('Unknown value for CassIteratorType_: $value'),
      };
}

/// @endcond
enum CassLogLevel_ {
  CASS_LOG_DISABLED(0),
  CASS_LOG_CRITICAL(1),
  CASS_LOG_ERROR(2),
  CASS_LOG_WARN(3),
  CASS_LOG_INFO(4),
  CASS_LOG_DEBUG(5),
  CASS_LOG_TRACE(6),

  /// @cond IGNORE
  CASS_LOG_LAST_ENTRY(7);

  final int value;
  const CassLogLevel_(this.value);

  static CassLogLevel_ fromValue(int value) => switch (value) {
        0 => CASS_LOG_DISABLED,
        1 => CASS_LOG_CRITICAL,
        2 => CASS_LOG_ERROR,
        3 => CASS_LOG_WARN,
        4 => CASS_LOG_INFO,
        5 => CASS_LOG_DEBUG,
        6 => CASS_LOG_TRACE,
        7 => CASS_LOG_LAST_ENTRY,
        _ => throw ArgumentError('Unknown value for CassLogLevel_: $value'),
      };
}

enum CassSslVerifyFlags_ {
  CASS_SSL_VERIFY_NONE(0),
  CASS_SSL_VERIFY_PEER_CERT(1),
  CASS_SSL_VERIFY_PEER_IDENTITY(2),
  CASS_SSL_VERIFY_PEER_IDENTITY_DNS(4);

  final int value;
  const CassSslVerifyFlags_(this.value);

  static CassSslVerifyFlags_ fromValue(int value) => switch (value) {
        0 => CASS_SSL_VERIFY_NONE,
        1 => CASS_SSL_VERIFY_PEER_CERT,
        2 => CASS_SSL_VERIFY_PEER_IDENTITY,
        4 => CASS_SSL_VERIFY_PEER_IDENTITY_DNS,
        _ =>
          throw ArgumentError('Unknown value for CassSslVerifyFlags_: $value'),
      };
}

enum CassSslTlsVersion_ {
  CASS_SSL_VERSION_TLS1(0),
  CASS_SSL_VERSION_TLS1_1(1),
  CASS_SSL_VERSION_TLS1_2(2);

  final int value;
  const CassSslTlsVersion_(this.value);

  static CassSslTlsVersion_ fromValue(int value) => switch (value) {
        0 => CASS_SSL_VERSION_TLS1,
        1 => CASS_SSL_VERSION_TLS1_1,
        2 => CASS_SSL_VERSION_TLS1_2,
        _ =>
          throw ArgumentError('Unknown value for CassSslTlsVersion_: $value'),
      };
}

enum CassProtocolVersion_ {
  /// < Deprecated
  CASS_PROTOCOL_VERSION_V1(1),

  /// < Deprecated
  CASS_PROTOCOL_VERSION_V2(2),
  CASS_PROTOCOL_VERSION_V3(3),
  CASS_PROTOCOL_VERSION_V4(4),
  CASS_PROTOCOL_VERSION_V5(5),

  /// < Only supported when using the DSE
  /// driver with DataStax Enterprise
  CASS_PROTOCOL_VERSION_DSEV1(65),

  /// < Only supported when using the DSE
  /// driver with DataStax Enterprise
  CASS_PROTOCOL_VERSION_DSEV2(66);

  final int value;
  const CassProtocolVersion_(this.value);

  static CassProtocolVersion_ fromValue(int value) => switch (value) {
        1 => CASS_PROTOCOL_VERSION_V1,
        2 => CASS_PROTOCOL_VERSION_V2,
        3 => CASS_PROTOCOL_VERSION_V3,
        4 => CASS_PROTOCOL_VERSION_V4,
        5 => CASS_PROTOCOL_VERSION_V5,
        65 => CASS_PROTOCOL_VERSION_DSEV1,
        66 => CASS_PROTOCOL_VERSION_DSEV2,
        _ =>
          throw ArgumentError('Unknown value for CassProtocolVersion_: $value'),
      };
}

enum CassErrorSource_ {
  CASS_ERROR_SOURCE_NONE(0),
  CASS_ERROR_SOURCE_LIB(1),
  CASS_ERROR_SOURCE_SERVER(2),
  CASS_ERROR_SOURCE_SSL(3),
  CASS_ERROR_SOURCE_COMPRESSION(4);

  final int value;
  const CassErrorSource_(this.value);

  static CassErrorSource_ fromValue(int value) => switch (value) {
        0 => CASS_ERROR_SOURCE_NONE,
        1 => CASS_ERROR_SOURCE_LIB,
        2 => CASS_ERROR_SOURCE_SERVER,
        3 => CASS_ERROR_SOURCE_SSL,
        4 => CASS_ERROR_SOURCE_COMPRESSION,
        _ => throw ArgumentError('Unknown value for CassErrorSource_: $value'),
      };
}

enum CassError_ {
  CASS_OK(0),
  CASS_ERROR_LIB_BAD_PARAMS(16777217),
  CASS_ERROR_LIB_NO_STREAMS(16777218),
  CASS_ERROR_LIB_UNABLE_TO_INIT(16777219),
  CASS_ERROR_LIB_MESSAGE_ENCODE(16777220),
  CASS_ERROR_LIB_HOST_RESOLUTION(16777221),
  CASS_ERROR_LIB_UNEXPECTED_RESPONSE(16777222),
  CASS_ERROR_LIB_REQUEST_QUEUE_FULL(16777223),
  CASS_ERROR_LIB_NO_AVAILABLE_IO_THREAD(16777224),
  CASS_ERROR_LIB_WRITE_ERROR(16777225),
  CASS_ERROR_LIB_NO_HOSTS_AVAILABLE(16777226),
  CASS_ERROR_LIB_INDEX_OUT_OF_BOUNDS(16777227),
  CASS_ERROR_LIB_INVALID_ITEM_COUNT(16777228),
  CASS_ERROR_LIB_INVALID_VALUE_TYPE(16777229),
  CASS_ERROR_LIB_REQUEST_TIMED_OUT(16777230),
  CASS_ERROR_LIB_UNABLE_TO_SET_KEYSPACE(16777231),
  CASS_ERROR_LIB_CALLBACK_ALREADY_SET(16777232),
  CASS_ERROR_LIB_INVALID_STATEMENT_TYPE(16777233),
  CASS_ERROR_LIB_NAME_DOES_NOT_EXIST(16777234),
  CASS_ERROR_LIB_UNABLE_TO_DETERMINE_PROTOCOL(16777235),
  CASS_ERROR_LIB_NULL_VALUE(16777236),
  CASS_ERROR_LIB_NOT_IMPLEMENTED(16777237),
  CASS_ERROR_LIB_UNABLE_TO_CONNECT(16777238),
  CASS_ERROR_LIB_UNABLE_TO_CLOSE(16777239),
  CASS_ERROR_LIB_NO_PAGING_STATE(16777240),
  CASS_ERROR_LIB_PARAMETER_UNSET(16777241),
  CASS_ERROR_LIB_INVALID_ERROR_RESULT_TYPE(16777242),
  CASS_ERROR_LIB_INVALID_FUTURE_TYPE(16777243),
  CASS_ERROR_LIB_INTERNAL_ERROR(16777244),
  CASS_ERROR_LIB_INVALID_CUSTOM_TYPE(16777245),
  CASS_ERROR_LIB_INVALID_DATA(16777246),
  CASS_ERROR_LIB_NOT_ENOUGH_DATA(16777247),
  CASS_ERROR_LIB_INVALID_STATE(16777248),
  CASS_ERROR_LIB_NO_CUSTOM_PAYLOAD(16777249),
  CASS_ERROR_LIB_EXECUTION_PROFILE_INVALID(16777250),
  CASS_ERROR_LIB_NO_TRACING_ID(16777251),
  CASS_ERROR_SERVER_SERVER_ERROR(33554432),
  CASS_ERROR_SERVER_PROTOCOL_ERROR(33554442),
  CASS_ERROR_SERVER_BAD_CREDENTIALS(33554688),
  CASS_ERROR_SERVER_UNAVAILABLE(33558528),
  CASS_ERROR_SERVER_OVERLOADED(33558529),
  CASS_ERROR_SERVER_IS_BOOTSTRAPPING(33558530),
  CASS_ERROR_SERVER_TRUNCATE_ERROR(33558531),
  CASS_ERROR_SERVER_WRITE_TIMEOUT(33558784),
  CASS_ERROR_SERVER_READ_TIMEOUT(33559040),
  CASS_ERROR_SERVER_READ_FAILURE(33559296),
  CASS_ERROR_SERVER_FUNCTION_FAILURE(33559552),
  CASS_ERROR_SERVER_WRITE_FAILURE(33559808),
  CASS_ERROR_SERVER_SYNTAX_ERROR(33562624),
  CASS_ERROR_SERVER_UNAUTHORIZED(33562880),
  CASS_ERROR_SERVER_INVALID_QUERY(33563136),
  CASS_ERROR_SERVER_CONFIG_ERROR(33563392),
  CASS_ERROR_SERVER_ALREADY_EXISTS(33563648),
  CASS_ERROR_SERVER_UNPREPARED(33563904),
  CASS_ERROR_SSL_INVALID_CERT(50331649),
  CASS_ERROR_SSL_INVALID_PRIVATE_KEY(50331650),
  CASS_ERROR_SSL_NO_PEER_CERT(50331651),
  CASS_ERROR_SSL_INVALID_PEER_CERT(50331652),
  CASS_ERROR_SSL_IDENTITY_MISMATCH(50331653),
  CASS_ERROR_SSL_PROTOCOL_ERROR(50331654),
  CASS_ERROR_SSL_CLOSED(50331655),

  /// @cond IGNORE
  CASS_ERROR_LAST_ENTRY(50331656);

  final int value;
  const CassError_(this.value);

  static CassError_ fromValue(int value) => switch (value) {
        0 => CASS_OK,
        16777217 => CASS_ERROR_LIB_BAD_PARAMS,
        16777218 => CASS_ERROR_LIB_NO_STREAMS,
        16777219 => CASS_ERROR_LIB_UNABLE_TO_INIT,
        16777220 => CASS_ERROR_LIB_MESSAGE_ENCODE,
        16777221 => CASS_ERROR_LIB_HOST_RESOLUTION,
        16777222 => CASS_ERROR_LIB_UNEXPECTED_RESPONSE,
        16777223 => CASS_ERROR_LIB_REQUEST_QUEUE_FULL,
        16777224 => CASS_ERROR_LIB_NO_AVAILABLE_IO_THREAD,
        16777225 => CASS_ERROR_LIB_WRITE_ERROR,
        16777226 => CASS_ERROR_LIB_NO_HOSTS_AVAILABLE,
        16777227 => CASS_ERROR_LIB_INDEX_OUT_OF_BOUNDS,
        16777228 => CASS_ERROR_LIB_INVALID_ITEM_COUNT,
        16777229 => CASS_ERROR_LIB_INVALID_VALUE_TYPE,
        16777230 => CASS_ERROR_LIB_REQUEST_TIMED_OUT,
        16777231 => CASS_ERROR_LIB_UNABLE_TO_SET_KEYSPACE,
        16777232 => CASS_ERROR_LIB_CALLBACK_ALREADY_SET,
        16777233 => CASS_ERROR_LIB_INVALID_STATEMENT_TYPE,
        16777234 => CASS_ERROR_LIB_NAME_DOES_NOT_EXIST,
        16777235 => CASS_ERROR_LIB_UNABLE_TO_DETERMINE_PROTOCOL,
        16777236 => CASS_ERROR_LIB_NULL_VALUE,
        16777237 => CASS_ERROR_LIB_NOT_IMPLEMENTED,
        16777238 => CASS_ERROR_LIB_UNABLE_TO_CONNECT,
        16777239 => CASS_ERROR_LIB_UNABLE_TO_CLOSE,
        16777240 => CASS_ERROR_LIB_NO_PAGING_STATE,
        16777241 => CASS_ERROR_LIB_PARAMETER_UNSET,
        16777242 => CASS_ERROR_LIB_INVALID_ERROR_RESULT_TYPE,
        16777243 => CASS_ERROR_LIB_INVALID_FUTURE_TYPE,
        16777244 => CASS_ERROR_LIB_INTERNAL_ERROR,
        16777245 => CASS_ERROR_LIB_INVALID_CUSTOM_TYPE,
        16777246 => CASS_ERROR_LIB_INVALID_DATA,
        16777247 => CASS_ERROR_LIB_NOT_ENOUGH_DATA,
        16777248 => CASS_ERROR_LIB_INVALID_STATE,
        16777249 => CASS_ERROR_LIB_NO_CUSTOM_PAYLOAD,
        16777250 => CASS_ERROR_LIB_EXECUTION_PROFILE_INVALID,
        16777251 => CASS_ERROR_LIB_NO_TRACING_ID,
        33554432 => CASS_ERROR_SERVER_SERVER_ERROR,
        33554442 => CASS_ERROR_SERVER_PROTOCOL_ERROR,
        33554688 => CASS_ERROR_SERVER_BAD_CREDENTIALS,
        33558528 => CASS_ERROR_SERVER_UNAVAILABLE,
        33558529 => CASS_ERROR_SERVER_OVERLOADED,
        33558530 => CASS_ERROR_SERVER_IS_BOOTSTRAPPING,
        33558531 => CASS_ERROR_SERVER_TRUNCATE_ERROR,
        33558784 => CASS_ERROR_SERVER_WRITE_TIMEOUT,
        33559040 => CASS_ERROR_SERVER_READ_TIMEOUT,
        33559296 => CASS_ERROR_SERVER_READ_FAILURE,
        33559552 => CASS_ERROR_SERVER_FUNCTION_FAILURE,
        33559808 => CASS_ERROR_SERVER_WRITE_FAILURE,
        33562624 => CASS_ERROR_SERVER_SYNTAX_ERROR,
        33562880 => CASS_ERROR_SERVER_UNAUTHORIZED,
        33563136 => CASS_ERROR_SERVER_INVALID_QUERY,
        33563392 => CASS_ERROR_SERVER_CONFIG_ERROR,
        33563648 => CASS_ERROR_SERVER_ALREADY_EXISTS,
        33563904 => CASS_ERROR_SERVER_UNPREPARED,
        50331649 => CASS_ERROR_SSL_INVALID_CERT,
        50331650 => CASS_ERROR_SSL_INVALID_PRIVATE_KEY,
        50331651 => CASS_ERROR_SSL_NO_PEER_CERT,
        50331652 => CASS_ERROR_SSL_INVALID_PEER_CERT,
        50331653 => CASS_ERROR_SSL_IDENTITY_MISMATCH,
        50331654 => CASS_ERROR_SSL_PROTOCOL_ERROR,
        50331655 => CASS_ERROR_SSL_CLOSED,
        50331656 => CASS_ERROR_LAST_ENTRY,
        _ => throw ArgumentError('Unknown value for CassError_: $value'),
      };
}

typedef CassFutureCallbackFunction = ffi.Void Function(
    ffi.Pointer<CassFuture> future, ffi.Pointer<ffi.Void> data);
typedef DartCassFutureCallbackFunction = void Function(
    ffi.Pointer<CassFuture> future, ffi.Pointer<ffi.Void> data);

/// A callback that's notified when the future is set.
///
/// @param[in] message
/// @param[in] data user defined data provided when the callback
/// was registered.
///
/// @see cass_future_set_callback()
typedef CassFutureCallback
    = ffi.Pointer<ffi.NativeFunction<CassFutureCallbackFunction>>;

/// A log message.
final class CassLogMessage_ extends ffi.Struct {
  /// The millisecond timestamp (since the Epoch) when the message was logged
  @cass_uint64_t()
  external int camelCase;

  /// < The severity of the log message
  @ffi.UnsignedInt()
  external int camelCase$1AsInt;

  CassLogLevel_ get camelCase$1 => CassLogLevel_.fromValue(camelCase$1AsInt);

  /// < The file where the message was logged
  external ffi.Pointer<ffi.Char> camelCase$2;

  /// < The line in the file where the message was logged
  @ffi.Int()
  external int camelCase$3;

  /// < The function where the message was logged
  external ffi.Pointer<ffi.Char> camelCase$4;

  /// < The message
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> camelCase$5;
}

/// A log message.
typedef CassLogMessage = CassLogMessage_;
typedef CassLogCallbackFunction = ffi.Void Function(
    ffi.Pointer<CassLogMessage> message, ffi.Pointer<ffi.Void> data);
typedef DartCassLogCallbackFunction = void Function(
    ffi.Pointer<CassLogMessage> message, ffi.Pointer<ffi.Void> data);

/// A callback that's used to handle logging.
///
/// @param[in] message
/// @param[in] data user defined data provided when the callback
/// was registered.
///
/// @see cass_log_set_callback()
typedef CassLogCallback
    = ffi.Pointer<ffi.NativeFunction<CassLogCallbackFunction>>;
typedef CassMallocFunctionFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Size size);
typedef DartCassMallocFunctionFunction = ffi.Pointer<ffi.Void> Function(
    int size);

/// A custom malloc function. This function should allocate "size" bytes and
/// return a pointer to that memory
///
/// @param[in] size The size of the memory to allocate
///
/// @see CassFreeFunction
/// @see cass_alloc_set_functions()
typedef CassMallocFunction
    = ffi.Pointer<ffi.NativeFunction<CassMallocFunctionFunction>>;
typedef CassReallocFunctionFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Size size);
typedef DartCassReallocFunctionFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr, int size);

/// A custom realloc function. This function attempts to change the size of the
/// memory pointed to by "ptr". If the memory cannot be resized then new memory
/// should be allocated and contain the contents of the original memory at "ptr".
///
/// @param[in] ptr A pointer to the original memory. If NULL it should behave the
/// same as "CassMallocFunction"
/// @param[in] size The size of the memory to allocate/resize.
///
/// @see CassMallocFunction
/// @see CassFreeFunction
/// @see cass_alloc_set_functions()
typedef CassReallocFunction
    = ffi.Pointer<ffi.NativeFunction<CassReallocFunctionFunction>>;
typedef CassFreeFunctionFunction = ffi.Void Function(ffi.Pointer<ffi.Void> ptr);
typedef DartCassFreeFunctionFunction = void Function(ffi.Pointer<ffi.Void> ptr);

/// A custom free function. This function deallocates the memory pointed to by
/// "ptr" that was previously allocated by a "CassMallocFunction" or
/// "CassReallocFunction" function.
///
/// @param[in] ptr A pointer to memory that should be deallocated. If NULL then
/// this will perform no operation.
///
/// @see CassMallocFunction
/// @see CassReallocFunction
/// @see cass_alloc_set_functions()
typedef CassFreeFunction
    = ffi.Pointer<ffi.NativeFunction<CassFreeFunctionFunction>>;

final class CassAuthenticator_ extends ffi.Opaque {}

/// An authenticator.
///
/// @struct CassAuthenticator
typedef CassAuthenticator = CassAuthenticator_;
typedef CassAuthenticatorInitialCallbackFunction = ffi.Void Function(
    ffi.Pointer<CassAuthenticator> auth, ffi.Pointer<ffi.Void> data);
typedef DartCassAuthenticatorInitialCallbackFunction = void Function(
    ffi.Pointer<CassAuthenticator> auth, ffi.Pointer<ffi.Void> data);

/// A callback used to initiate an authentication exchange.
///
/// Use cass_authenticator_set_response() to set the response token.
///
/// Use cass_authenticator_set_error() if an error occurred during
/// initialization.
///
/// @param[in] auth
/// @param[in] data
typedef CassAuthenticatorInitialCallback
    = ffi.Pointer<ffi.NativeFunction<CassAuthenticatorInitialCallbackFunction>>;
typedef CassAuthenticatorChallengeCallbackFunction = ffi.Void Function(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Char> token,
    ffi.Size token_size);
typedef DartCassAuthenticatorChallengeCallbackFunction = void Function(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Char> token,
    int token_size);

/// A callback used when an authentication challenge initiated
/// by the server.
///
/// Use cass_authenticator_set_response() to set the response token.
///
/// Use cass_authenticator_set_error() if an error occurred during the
/// challenge.
///
/// @param[in] auth
/// @param[in] data
/// @param[in] token
/// @param[in] token_size
typedef CassAuthenticatorChallengeCallback = ffi
    .Pointer<ffi.NativeFunction<CassAuthenticatorChallengeCallbackFunction>>;
typedef CassAuthenticatorSuccessCallbackFunction = ffi.Void Function(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Char> token,
    ffi.Size token_size);
typedef DartCassAuthenticatorSuccessCallbackFunction = void Function(
    ffi.Pointer<CassAuthenticator> auth,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Char> token,
    int token_size);

/// A callback used to indicate the success of the authentication
/// exchange.
///
/// Use cass_authenticator_set_error() if an error occurred while evaluating
/// the success token.
///
/// @param[in] auth
/// @param[in] data
/// @param[in] token
/// @param[in] token_size
typedef CassAuthenticatorSuccessCallback
    = ffi.Pointer<ffi.NativeFunction<CassAuthenticatorSuccessCallbackFunction>>;
typedef CassAuthenticatorCleanupCallbackFunction = ffi.Void Function(
    ffi.Pointer<CassAuthenticator> auth, ffi.Pointer<ffi.Void> data);
typedef DartCassAuthenticatorCleanupCallbackFunction = void Function(
    ffi.Pointer<CassAuthenticator> auth, ffi.Pointer<ffi.Void> data);

/// A callback used to cleanup resources that were acquired during
/// the process of the authentication exchange. This is called after
/// the termination of the exchange regardless of the outcome.
///
/// @param[in] auth
/// @param[in] data
typedef CassAuthenticatorCleanupCallback
    = ffi.Pointer<ffi.NativeFunction<CassAuthenticatorCleanupCallbackFunction>>;
typedef CassAuthenticatorDataCleanupCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> data);
typedef DartCassAuthenticatorDataCleanupCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> data);

/// A callback used to cleanup resources.
///
/// @param[in] data
typedef CassAuthenticatorDataCleanupCallback = ffi
    .Pointer<ffi.NativeFunction<CassAuthenticatorDataCleanupCallbackFunction>>;

/// Authenticator callbacks
final class CassAuthenticatorCallbacks_ extends ffi.Struct {
  external CassAuthenticatorInitialCallback camelCase;

  external CassAuthenticatorChallengeCallback camelCase$1;

  external CassAuthenticatorSuccessCallback camelCase$2;

  external CassAuthenticatorCleanupCallback camelCase$3;
}

/// Authenticator callbacks
typedef CassAuthenticatorCallbacks = CassAuthenticatorCallbacks_;

enum CassHostListenerEvent_ {
  CASS_HOST_LISTENER_EVENT_UP(0),
  CASS_HOST_LISTENER_EVENT_DOWN(1),
  CASS_HOST_LISTENER_EVENT_ADD(2),
  CASS_HOST_LISTENER_EVENT_REMOVE(3);

  final int value;
  const CassHostListenerEvent_(this.value);

  static CassHostListenerEvent_ fromValue(int value) => switch (value) {
        0 => CASS_HOST_LISTENER_EVENT_UP,
        1 => CASS_HOST_LISTENER_EVENT_DOWN,
        2 => CASS_HOST_LISTENER_EVENT_ADD,
        3 => CASS_HOST_LISTENER_EVENT_REMOVE,
        _ => throw ArgumentError(
            'Unknown value for CassHostListenerEvent_: $value'),
      };
}

typedef CassHostListenerCallbackFunction = ffi.Void Function(
    ffi.UnsignedInt event, CassInet address, ffi.Pointer<ffi.Void> data);
typedef DartCassHostListenerCallbackFunction = void Function(
    CassHostListenerEvent_ event, CassInet address, ffi.Pointer<ffi.Void> data);

/// A callback used to indicate the host state for a node in the cluster.
///
/// @param[in] event
/// @param[in] address
/// @param[in] data
/// @see cass_cluster_set_host_listener_callback()
typedef CassHostListenerCallback
    = ffi.Pointer<ffi.NativeFunction<CassHostListenerCallbackFunction>>;

final class CassExecProfile_ extends ffi.Opaque {}

/// An execution profile object provides a mechanism to group together a set of
/// configuration options and reuse them across different statement executions.
/// This feature is useful when dealing with different query workloads.
///
/// @struct CassExecProfile
typedef CassExecProfile = CassExecProfile_;

const int camelCase$620 = 1024;
